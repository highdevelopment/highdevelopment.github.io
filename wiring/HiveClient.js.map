{"version":3,"sources":["src/common/services/stack.js","src/common/services/label.js","src/views/progress/wiring/preview.js","src/views/progress/screenState.js","src/data/enums.js","src/views/progress/site/list-setting-content.js","src/common/services/utils.js","src/common/services/graphic.js","src/views/progress/site/graphic.js","src/views/progress/system/graphic.js","src/views/progress/interface/graphic.js","src/views/progress/wiring/graphic.js","src/data/models.js","src/views/progress/breadcrumbs/breadcrumbs.js","src/views/progress/setup/sub-breadcrumbs.js","src/views/progress/wiring/sub-breadcrumbs.js","src/components/googlemap.js","src/data/data.js","src/views/progress/site/sensor.js","src/views/progress/site/input.js","src/views/progress/wiring/input.js","src/components/menubar.js","src/views/progress/system/search.js","src/views/progress/setup/site.js","src/components/sidebar.js","src/views/progress/system/sidebar.js","src/views/progress/interface/sidebar.js","src/views/progress/wiring/folderbar.js","src/views/progress/wiring/device-list-setup.js","src/views/progress/setup/input.js","src/views/progress/system/template.js","src/views/progress/wiring/wiring.js","src/components/button.js","src/views/progress/commission/submenu.js","src/views/progress/setup/building.js","src/views/progress/site/list-setting.js","src/views/progress/system/pullout.js","src/views/progress/interface/control-pullout.js","src/views/progress/interface/indicator-pullout.js","src/views/progress/interface/user-input-pullout.js","src/views/progress/commission/sidebar.js","src/views/progress/setup/setup.js","src/views/progress/site/site.js","src/views/progress/system/system.js","src/views/progress/interface/interface.js","src/views/progress/commission/commission.js","src/views/progress/progress.js","src/views/MainView.js","src/app.js","index.js"],"names":[],"mappingsvtljyxlohzzjvvlgvzzexlwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvrxhhrvjtjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["//\n\nvar STACK_TYPES = {\n    SVG: 'svg',\n    ENYO: 'enyo'\n};\nexports.STACK_TYPES = STACK_TYPES;\n\nvar STACK_METHODS = {\n    NONE: 'none',\n    DEFAULT: 'default',\n    CREATE: 'create',\n    DELETE: 'delete',\n    EDIT: 'edit',\n    REMOVE: 'remove',\n    MOVE: 'move',\n    RESIZE: 'resize',\n    FLIP: 'flip',\n    TRANSITION: 'transition',\n    CALLBACK: 'callback',\n    ROTATE: 'rotate',\n    PARALLEL: 'parallel',\n    TO_FRONT: 'toFront',\n    TO_BACK: 'toBack',\n    TAP: 'tap'\n};\nexports.STACK_METHODS = STACK_METHODS;\n\nvar STACK_ENYO = BaseEntity.extend({\n    init: function(panel, parentPanel, method, sender, value, parent, command) {\n        this.id = -1;\n        this.panel = panel;\n        this.parentPanel = parentPanel;\n        this.type = STACK_TYPES.ENYO;\n        this.method = method || STACK_METHODS.NONE;\n        this.sender = sender;\n        this.value = value;\n        this.parent = parent;\n        this.command = command;\n    }\n});\nexports.STACK_ENYO = STACK_ENYO;\n\nvar STACK_SVG = BaseEntity.extend({\n    init: function(panel, parentPanel, method, object, data) {\n        this.id = -1;\n        this.panel = panel;\n        this.parentPanel = parentPanel;\n        this.type = STACK_TYPES.SVG;\n        this.method = method || STACK_METHODS.NONE;\n        this.object = object;\n        this.data = data;\n    }\n});\nexports.STACK_SVG = STACK_SVG;\n\nvar STACK_STORAGE = Class.extend({\n    init: function() {\n        this.data = new Collection();\n    },\n    addStack: function(panel, parentPanel, type, method, sender, value, parentSender, command) {\n        var stack;\n        if(type === STACK_TYPES.ENYO) {\n            stack = new STACK_ENYO(panel, parentPanel, method, sender, value, parentSender, command);\n        } else if(type === STACK_TYPES.SVG) {\n            stack = new STACK_SVG(panel, parentPanel, method, sender, value);\n        }\n        if(stack) {\n            this.data.add(stack, true);\n        }\n\n        return stack;\n    },\n    removeStack: function(stack) {\n        this.data.remove(stack);\n    },\n    removePanel: function(parentPanel) {\n        for(var i = 0; i < this.data.count; i++) {\n            if(this.data.collection[i].parentPanel === parentPanel) {\n                this.removeStack(this.data.collection[i]);\n                i--;\n            }\n        }\n    },\n    getStack: function(panel) {\n        for(var i = this.data.count - 1; i > -1; i--) {\n            if(this.data.item(i).panel === panel) {\n                return this.data.item(i);\n            }\n        }\n        return false;\n    },\n    getStackByParentPanel: function(parentPanel) {\n        for(var i = this.data.count - 1; i > -1; i--) {\n            if(this.data.item(i).parentPanel === parentPanel) {\n                return this.data.item(i);\n            }\n        }\n        return false;\n    },\n    // Method Create\n    enyoCreate: function(stack) {\n        if(stack.sender && stack.parent && stack.command) {\n            stack.parent[stack.command](stack.sender);\n        }\n    },\n    // Method Remove\n    enyoRemove: function(stack) {\n        if(stack.parent && stack.command && stack.value) {\n            stack.parent[stack.command](stack.value);\n        }\n    },\n    // Method Edit\n    enyoEdit: function(stack) {\n        if(stack.sender.kind == \"onyx.Input\" || stack.sender.kind == \"onyx.TextArea\") {\n            stack.sender.setValue(stack.value);\n            stack.sender.triggerHandler('oninput');\n        } else if(stack.sender.kind == \"onyx.Checkbox\") {\n            stack.sender.setChecked(stack.value)\n        } else if(stack.sender.kind == \"Group\") {\n            stack.value.setChecked(true);\n        }\n        if(stack.parent && stack.command) {\n            stack.parent[stack.command](stack);\n        }\n    },\n    // Method Transition\n    enyoTransition: function(stack) {\n        if(stack.sender.kind == \"Panels\") {\n            stack.sender.undoed = true;\n            stack.sender.setIndex(stack.value);\n        }\n    },\n    // Method Callback\n    enyoCallback: function(stack) {\n        if(stack.parent && stack.command) {\n            stack.parent[stack.command](stack);\n        }\n    },\n    // Method default\n    enyoDefault: function(stack) {\n        if(stack.parent && stack.command && stack.value) {\n            stack.parent[stack.command](stack.value);\n        }\n    },\n    // Enyo Undo\n    undo: function(panel) {\n        var stack = this.getStack(panel);\n        if(!!stack && stack.type === STACK_TYPES.ENYO) {\n            if(stack.method === STACK_METHODS.CREATE) {\n                this.enyoCreate(stack);\n            } else if(stack.method === STACK_METHODS.REMOVE) {\n                this.enyoRemove(stack);\n            } else if(stack.method === STACK_METHODS.EDIT) {\n                this.enyoEdit(stack);\n            } else if(stack.method === STACK_METHODS.TRANSITION) {\n                this.enyoTransition(stack);\n            } else if(stack.method === STACK_METHODS.CALLBACK) {\n                this.enyoCallback(stack);\n            } else if(stack.method === STACK_METHODS.DEFAULT) {\n                this.enyoDefault(stack);\n            }\n\n            // Remove\n            this.removeStack(stack);\n        }\n    }\n});\nexports.STACK_STORAGE = STACK_STORAGE;\n\nvar STACK_LIST = new STACK_STORAGE();\nexports.STACK_LIST = STACK_LIST;\n","var ERROR = {\n    email: \"Email is required!\",\n    username: \"Username is required!\",\n    password: \"Password is required!\",\n    confirmPassword: \"Retype Password is required!\",\n    emailValid: \"Email is incorrect!\"\n};\nexports.ERROR = ERROR;\n\nvar LABELS = {\n    setup: {\n        projectName: \"New project\",\n        projectNotes: \"Project's description\",\n        projectAddress: \"unknown\",\n        projectCoordinates: \"unknown\",\n        projectAltitude: \"unknown\"\n    },\n    siteBuilder: {\n        zoneExisting: \"Room is ready!\",\n        zoneNotReady: \"Room doesn't ready!\"\n    }\n};\nexports.LABELS = LABELS;\n","//\n\nvar wiringPreview = module.exports = {\n    configs: {\n        distanceY: 80,\n        distanceAdaptor: 30,\n        distanceSensor: 10\n    },\n    mObjectController: new Collection(),\n    mObjectAdaptor: new Collection(),\n    mObjectSensor: new Collection(),\n    loaded: false,\n\n    init: function(svg, width, height, flag) {\n        this.width = width;\n        this.height = height;\n        this.mObjectController = new Collection();\n        this.mObjectAdaptor = new Collection();\n        this.mObjectSensor = new Collection();\n\n        $(\"#\" + svg).html('');\n        this.paper = Snap(\"#\" + svg);\n        this.paper.attr({width: this.width, height: this.height});\n\n        // Root node\n        this.rootNode = this.paper.g();\n\n        // Master (Tree root)\n        var controller = this.createController({\n            id: 1,\n            name: 'MASTER CONTROLLER',\n            url: \"assets/images/temps/wiring/master-controller.png\",\n            x: 0,\n            y: 0,\n            w: 130,\n            h: 90\n        });\n\n        // Adaptor\n        this.createAdaptor(controller, {\n            id: 1,\n            name: 'RELAY',\n            url: \"assets/images/temps/wiring/equipment.png\",\n            w: 79,\n            h: 117\n        });\n\n        var adaptor = this.createAdaptor(controller, {\n            id: 2,\n            name: 'SENSOR',\n            url: \"assets/images/temps/wiring/equipment.png\",\n            w: 79,\n            h: 117\n        });\n\n        this.moveToCenter();\n\n        if(!!flag) {\n\n            // Create sensor\n            this.createSensor(adaptor, {\n                id: 1,\n                name: \"sensor\",\n                url: 'assets/images/sensors/t.svg',\n                w: 30,\n                h: 30\n            });\n\n            this.createSensor(adaptor, {\n                id: 2,\n                name: \"sensor\",\n                url: 'assets/images/sensors/t.svg',\n                w: 30,\n                h: 30\n            });\n\n            this.createSensor(adaptor, {\n                id: 3,\n                name: \"sensor\",\n                url: 'assets/images/sensors/t.svg',\n                w: 30,\n                h: 30\n            });\n        }\n\n    },\n    createController: function(options) {\n        var controller = this.paper.g();\n        this.rootNode.add(controller);\n\n        var img = this.paper.image(options.url, options.x, options.y, options.w, options.h);\n        controller.add(img);\n\n        var text = options.name.split(' ');\n        // Create label\n        var label = this.paper.text(controller.getBBox().cx, controller.getBBox().cy - 5, text);\n        label.attr({\n            fill: \"#FFF\",\n            fontSize: 12,\n            fontWeight: 'bold',\n            'text-anchor': 'middle',\n            stroke: 'none',\n            cursor: 'pointer'\n\n        });\n        label.length = text.length;\n        if(text.length == 1) {\n            label.select('tspan:nth-of-type(1)').attr({x: parseFloat(label.attr('x')), dy: 10});\n        } else if(text.length == 2) {\n            label.select('tspan:first-of-type').attr({x: parseFloat(label.attr('x')), dy: 0});\n            label.select('tspan:last-of-type').attr({x: parseFloat(label.attr('x')), dy: 15});\n        } else {\n            label.select('tspan:first-of-type').attr({x: parseFloat(label.attr('x')), dy: 0});\n            label.select('tspan:last-of-type').attr({x: parseFloat(label.attr('x')), dy: 15});\n        }\n        controller.add(label);\n\n        controller.id = options.id;\n        this.mObjectController.add(controller);\n        controller.adaptors = new Collection();\n\n        this.rootNode.transform('T0,0');\n\n        return controller;\n    },\n    createAdaptor: function(controller, options) {\n        var adaptor = this.paper.g();\n        this.rootNode.add(adaptor);\n\n        var img = this.paper.image(options.url, options.x, options.y, options.w, options.h);\n\n        adaptor.add(img);\n\n        // Create label\n        //var label = this.paper.text((options.x * 2 + options.w) / 2, options.y + 35, options.name);\n        var label = this.paper.text(0, 0, options.name);\n        label.attr({\n            fill: \"#FFFFFF\",\n            fontSize: 11,\n            fontWeight: 'bold',\n            'text-anchor': 'middle',\n            stroke: 'none',\n            cursor: 'pointer'\n        });\n        adaptor.add(label);\n\n        this.mObjectAdaptor.add(adaptor);\n        controller.adaptors.add(adaptor);\n        adaptor.parentControler = controller;\n        adaptor.sensors = new Collection();\n\n        // Get Position\n        var distanceAdaptor = this.configs.distanceAdaptor;\n        var bb = controller.getBBox();\n        var x = bb.cx - (options.w * (controller.adaptors.count) + distanceAdaptor * (controller.adaptors.count - 1)) / 2;\n        var y = bb.y2 + this.configs.distanceY;\n\n        // Rearrange position\n        var ref = this;\n        this.mObjectAdaptor.forEach(function(item) {\n            if(item.parentControler === controller) {\n                item[0].attr({\n                    x: x,\n                    y: y\n                });\n                var bbItem = item[0].getBBox();\n                if(item[1]) {\n                    item[1].attr({\n                        x: bbItem.cx,\n                        y: y + 35\n                    });\n                }\n                // Draw connection\n                if(item.connectPath != undefined) {\n                    item.connectPath.remove();\n                }\n                item.connectPath = ref.paper.path(\"M\" + bb.cx + \" \" + bb.y2 + \"L\" + bbItem.cx + \" \" + bbItem.y).attr({\n                    stroke: \"#525380\",\n                    'stroke-width': 3\n                });\n                ref.rootNode.add(item.connectPath);\n\n                x += options.w + distanceAdaptor;\n            }\n        });\n\n        this.rootNode.transform('T0,0');\n\n        return adaptor;\n    },\n    createSensor: function(adaptor, options) {\n        var sensor = this.paper.image(options.url, options.x, options.y, options.w, options.h);\n        this.rootNode.add(sensor);\n\n        sensor.id = options.id;\n\n        this.mObjectSensor.add(sensor);\n        adaptor.sensors.add(sensor);\n        sensor.parentAdaptor = adaptor;\n\n        // Get Position\n        var distanceAdaptor = this.configs.distanceSensor;\n        var bb = adaptor.getBBox();\n        var x = bb.cx - (options.w * (adaptor.sensors.count) + distanceAdaptor * (adaptor.sensors.count - 1)) / 2;\n        var y = bb.y2 + this.configs.distanceY;\n        // Rearrange position\n        var ref = this;\n        this.mObjectSensor.forEach(function(item) {\n            if(item.parentAdaptor === adaptor) {\n                item.attr({\n                    x: x,\n                    y: y\n                });\n                x += options.w + distanceAdaptor;\n                // Draw connection\n                if(item.connectPath != undefined) {\n                    item.connectPath.remove();\n                }\n                var bbItem = item.getBBox();\n                item.connectPath = ref.paper.path(\"M\" + bb.cx + \" \" + bb.y2 + \"L\" + bbItem.cx + \" \" + bbItem.y).attr({\n                    stroke: \"#525380\",\n                    'stroke-width': 3\n                });\n\n                ref.rootNode.add(item.connectPath);\n            }\n        });\n\n        this.rootNode.transform('T0,0');\n\n        return sensor;\n    },\n    moveToCenter: function() {\n        var bb = this.rootNode.getBBox(),\n            cx = this.width / 2,\n        //cy = this.height / 2,\n            cy = bb.height / 2 + 50,\n            dx = cx - bb.cx,\n            dy = cy - bb.cy;\n\n        this.mObjectController.forEach(function(controller) {\n            // Image\n            controller[0].attr({\n                x: parseFloat(controller[0].attr('x')) + dx,\n                y: parseFloat(controller[0].attr('y')) + dy\n            });\n            // Label\n            controller[1].attr({\n                x: parseFloat(controller[1].attr('x')) + dx,\n                y: parseFloat(controller[1].attr('y')) + dy\n            });\n            for(var i = 1; i <= controller[1].length; i++) {\n                controller[1].select('tspan:nth-of-type(' + i + ')').attr({\n                    x: parseFloat(controller[1].attr('x'))\n                });\n            }\n\n            controller.adaptors.forEach(function(adaptor) {\n                adaptor[0].attr({\n                    x: parseFloat(adaptor[0].attr('x')) + dx,\n                    y: parseFloat(adaptor[0].attr('y')) + dy\n                });\n                adaptor[1].attr({\n                    x: parseFloat(adaptor[1].attr('x')) + dx,\n                    y: parseFloat(adaptor[1].attr('y')) + dy\n                });\n                adaptor.transform('T0,0');\n                var path = Snap.parsePathString(adaptor.connectPath.attr('path'));\n                for(var i = 0; i < path.length; i++) {\n                    path[i][1] += dx;\n                    path[i][2] += dy;\n                }\n                adaptor.connectPath.attr(\"path\", path.toString());\n                adaptor.connectPath.transform('T0,0');\n\n                adaptor.sensors.forEach(function(sensor) {\n                    sensor.attr({\n                        x: parseFloat(sensor.attr('x')) + dx,\n                        y: parseFloat(sensor.attr('y')) + dy\n                    });\n                    sensor.transform('T0,0');\n                    var path = Snap.parsePathString(sensor.connectPath.attr('path'));\n                    for(var i = 0; i < path.length; i++) {\n                        path[i][1] += dx;\n                        path[i][2] += dy;\n                    }\n                    sensor.connectPath.attr(\"path\", path.toString());\n                    sensor.connectPath.transform('T0,0');\n                });\n            });\n        });\n        this.rootNode.transform(\"T0,0\");\n    }\n};\n","module.exports= [{fromScreen: null, state:0, eventState:0}]","// Generated by DDL Code Generator\n// on 2017-01-30 06:02:16 UTC\n// from /srv/udat/home/jfilling/work/hcontroller_1/Database/current/current-schema.sql,/srv/udat/home/jfilling/work/hcontroller_1/Database/current/current-enums.sql.\n\nconst databaseEnumsDDLMD5Hash = \"4ee96eaf884da12c54d11f74f7455a5f\"\n\n// Animation_Method_Enum\nvar AnimationMethod = exports.AnimationMethod =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(AnimationMethod)\n\n// Animation_Types_Enum\nvar AnimationTypes = exports.AnimationTypes =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(AnimationTypes)\n\n// Boolean_Enum\nvar Boolean = exports.Boolean =\n{\n    FALSE: 0,\n    TRUE: 1\n}\nObject.freeze(Boolean)\n\n// Building_Model_Types_Enum\nvar BuildingModelTypes = exports.BuildingModelTypes =\n{\n    IFC: 0,\n    GBXML: 1,\n    resCheck: 2,\n    comCheck: 3,\n    designDay: 4\n}\nObject.freeze(BuildingModelTypes)\n\n// Building_Types_Enum\nvar BuildingTypes = exports.BuildingTypes =\n{\n    commercial: 0,\n    residential: 1,\n    industrial: 2,\n    other: 3\n}\nObject.freeze(BuildingTypes)\n\n// Connection_Node_Types_Enum\nvar ConnectionNodeTypes = exports.ConnectionNodeTypes =\n{\n    INPUT: 0,\n    OUTPUT: 1,\n    INOUT: 2\n}\nObject.freeze(ConnectionNodeTypes)\n\n// Connector_Type_Enum\nvar ConnectorType = exports.ConnectorType =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(ConnectorType)\n\n// Controller_Type_Enum\nvar ControllerType = exports.ControllerType =\n{\n    controlerLCD: 0,\n    controlerHeadless: 1\n}\nObject.freeze(ControllerType)\n\n// Day_Enum\nvar Day = exports.Day =\n{\n    Monday: 0,\n    Tuesday: 1,\n    Wednesday: 2,\n    Thursday: 3,\n    Friday: 4,\n    Saturday: 5,\n    Sunday: 6\n}\nObject.freeze(Day)\n\n// Design_Day_Enum\nvar DesignDay = exports.DesignDay =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(DesignDay)\n\n// Device_Type_Enum\nvar DeviceType = exports.DeviceType =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(DeviceType)\n\n// Frequency_Enum\nvar Frequency = exports.Frequency =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(Frequency)\n\n// Interface_Enum\nvar Interface = exports.Interface =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(Interface)\n\n// Module_Type_Enum\nvar ModuleType = exports.ModuleType =\n{\n    GPIO: 0,\n    relay: 1,\n    power: 2,\n    motorControl: 3\n}\nObject.freeze(ModuleType)\n\n// Protocol_Enum\nvar Protocol = exports.Protocol =\n{\n    TCP: 0,\n    oneWire: 1,\n    modbus: 2,\n    bacnet: 3,\n    enocean: 4\n}\nObject.freeze(Protocol)\n\n// Protocol_Transport_Type_Enum\nvar ProtocolTransportType = exports.ProtocolTransportType =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(ProtocolTransportType)\n\n// Protocol_Type_Enum\nvar ProtocolType = exports.ProtocolType =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(ProtocolType)\n\n// Role_Enum\nvar Role = exports.Role =\n{\n    superUser: 0,\n    privledgedUser: 1,\n    standardUser: 2\n}\nObject.freeze(Role)\n\n// Sensor_Subclass_Enum\nvar SensorSubclass = exports.SensorSubclass =\n{\n    temperature: 0,\n    thermostat: 1,\n    humidity: 2,\n    gasSensor: 3,\n    waterSensor: 4,\n    flow: 5,\n    liquidLevel: 6,\n    windSpeed: 7,\n    windDirection: 8,\n    errorStatus: 9,\n    custom: 10\n}\nObject.freeze(SensorSubclass)\n\n// Sensor_Substance_Enum\nvar SensorSubstance = exports.SensorSubstance =\n{\n    air: 0,\n    water: 1,\n    refrigerant: 2,\n    co2: 3,\n    surface: 4\n}\nObject.freeze(SensorSubstance)\n\n// Setting_Mode_Enum\nvar SettingMode = exports.SettingMode =\n{\n    auto: 0,\n    heating: 1,\n    cooling: 2\n}\nObject.freeze(SettingMode)\n\n// Subsystem_Group_Type_Enum\nvar SubsystemGroupType = exports.SubsystemGroupType =\n{\n    singleGroup: 0,\n    parallelGroup: 1,\n    exclusiveGroup: 2\n}\nObject.freeze(SubsystemGroupType)\n\n// Subsystem_Type_Enum\nvar SubsystemType = exports.SubsystemType =\n{\n    heating: 0,\n    cooling: 1,\n    general: 2\n}\nObject.freeze(SubsystemType)\n\n// Surface_Type_Enum\nvar SurfaceType = exports.SurfaceType =\n{\n    ROOF: 0,\n    WALL: 1,\n    FLOOR: 2,\n    SLAB: 3,\n    BASEMENT: 4,\n    GLAZING: 5\n}\nObject.freeze(SurfaceType)\n\n// System_Priority_Enum\nvar SystemPriority = exports.SystemPriority =\n{\n    highLifeSupport: 0,\n    lowLifeSupport: 1,\n    userRequest: 2,\n    generalPriority: 3\n}\nObject.freeze(SystemPriority)\n\n// Unit_Category_Enum\nvar UnitCategory = exports.UnitCategory =\n{\n    Acceleration: 1,\n    Angle: 2,\n    Area: 3,\n    ConcentrationMass: 4,\n    Dispersion: 5,\n    Duration: 6,\n    ElectricCharge: 7,\n    ElectricCurrent: 8,\n    ElectricPotentialDifference: 9,\n    ElectricResistance: 10,\n    Energy: 11,\n    Frequency: 12,\n    FuelEfficiency: 13,\n    Illuminance: 14,\n    Length: 15,\n    Mass: 16,\n    Number: 17,\n    Power: 18,\n    Pressure: 19,\n    Speed: 20,\n    Temperature: 21,\n    Volume: 22\n}\nObject.freeze(UnitCategory)\n\n// Virtual_Enum\nvar Virtual = exports.Virtual =\n{\n    SOMETHINGHERE: 0\n}\nObject.freeze(Virtual)\n\n","//\n\nvar kind = require('enyo/kind');\n\nmodule.exports = kind({\n    name: 'pl.site.ListSettingContent',\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n    },\n    sortAlphabet: function() {\n        var a, b, a1, b1, rx = /(\\d+)|(\\D+)/g, rd = /\\d+/;\n        this.children.sort(function(as, bs) {\n            a = String(as.value).toLowerCase().match(rx);\n            b = String(bs.value).toLowerCase().match(rx);\n            while(a.length && b.length) {\n                a1 = a.shift();\n                b1 = b.shift();\n                if(rd.test(a1) || rd.test(b1)) {\n                    if(!rd.test(a1)) return 1;\n                    if(!rd.test(b1)) return -1;\n                    if(a1 != b1) return a1 - b1;\n                } else if(a1 != b1) {\n                    return a1 > b1 ? 1 : -1;\n                }\n            }\n            return a.length - b.length;\n        });\n\n        this.render();\n    }\n});\n","//\n\nvar IS_TOUCH = require('enyo/platform').touch;\nvar eGetPosition= require('enyo/dispatcher').getPosition;\n\nvar utils = module.exports = {\n    // Get mouse position\n    getPosition: function() {\n        var pos = {x: 0, y: 0};\n        if(IS_TOUCH) {\n            pos.x = window.event.changedTouches[0].pageX;\n            pos.y = window.event.changedTouches[0].pageY;\n        } else {\n            pos.x = eGetPosition().pageX;\n            pos.y = eGetPosition().pageY;\n        }\n\n        return pos;\n    },\n\n    // Get offset enyo element\n    getOffset: function(element) {\n        var absoluteBounds = element.getAbsoluteBounds();\n\n        return {\n            top: absoluteBounds.top,\n            left: absoluteBounds.left,\n            width: absoluteBounds.width,\n            height: absoluteBounds.height\n        };\n    },\n\n    // Check inside enyo element\n    isInside: function(element) {\n        var pos = utils.getPosition();\n        var offset = utils.getOffset(element);\n        if((offset.left <= pos.x && pos.x <= offset.left + offset.width) && (offset.top <= pos.y && pos.y <= offset.top + offset.height)) {\n            return true;\n        }\n        return false;\n    },\n\n    // Get object size.\n    getSize: function(target, style) {\n        return {\n            width: this.getCSSProperty(target, PROPERTY_NAMES.width, style),\n            height: this.getCSSProperty(target, PROPERTY_NAMES.height, style)\n        }\n    },\n\n    // Set object size\n    setPosition: function(target, pos, unit) {\n        target = target || {};\n        unit = unit || \"px\";\n\n        if(target.hasOwnProperty('addStyles')) {\n            target.addStyles(\"top:\" + pos.y + unit + \"; left:\" + pos.x + unit);\n        }\n    },\n\n    // Get CSS Property\n    getCSSProperty: function(target, property, style) {\n        style == style || false;\n        if(target.hasNode()) {\n            return (style) ? target.node.style[property] : target.node[property];\n        }\n    },\n\n    // Check Number\n    isNumber: function(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    },\n\n    // Get Ordinal\n    getOrdinal: function(n) {\n        if((parseFloat(n) == parseInt(n)) && !isNaN(n)) {\n            var s = [\"th\", \"st\", \"nd\", \"rd\"],\n                v = n % 100;\n            return n + (s[(v - 20) % 10] || s[v] || s[0]);\n        }\n        return n;\n    },\n\n    // fn in valide email\n    invalidateEmail: function(email) {\n        var reg = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return reg.test(email);\n    },\n    ///\n    // convert longitude/latitude decimal degrees to degrees, minutes, seconds\n    // DDD to DMS\n    // @param lat, latitude degrees decimal\n    // @param lng, longitude degrees decimal\n    ///\n    convertDDToDMS: function(D) {\n        return [0 | D, '° ', 0 | (D < 0 ? D = -D : D) % 1 * 60, \"' \", 0 | D * 60 % 1 * 60, '\"'].join('');\n    },\n    degToDms: function(dec) {\n        var deg = Math.floor(Math.abs(dec));\n        var min = Math.floor((Math.abs(dec) - deg) * 60);\n        var sec = (Math.round((((Math.abs(dec) - deg) - (min / 60)) * 60 * 60) * 100) / 100 );\n        var len = String(deg).length\n        deg = Array(3 + 1 - len).join('0') + deg;\n        var len = String(min).length\n        min = Array(2 + 1 - len).join('0') + min;\n        var len = String(sec).length\n        sec = Array(5 + 1 - len).join('0') + sec;\n        deg = dec < 0 ? '-' + deg : deg;\n        var dec_min = (min * 1.0 + (sec / 60.0));\n        var dms = deg + '&deg ' + dec_min.toFixed(3) + '\\'';\n        return dms;\n    },\n\n    // To parse your input use the following.\n    parseInputDMS: function(input) {\n        var parts = input.split(/[^\\d\\w]+/);\n        var lat = utils.convertDMSToDD(parts[0], parts[1], parts[2], parts[3]);\n        var lng = utils.convertDMSToDD(parts[4], parts[5], parts[6], parts[7]);\n\n        console.log(lat)\n        console.log(lng)\n    },\n\n    // The following will convert your DMS to DD\n    convertDMSToDD: function(days, minutes, seconds, direction) {\n        var dd = days + minutes / 60 + seconds / (60 * 60);\n\n        if(direction == \"S\" || direction == \"W\") {\n            dd = dd * -1;\n        } // Don't do anything for N or E\n        return dd;\n    },\n\n    // Sort By ASC\n    orderByNameAscending: function(a, b) {\n        if(a.name == b.name) {\n            return 0;\n        } else if(a.name > b.name) {\n            return 1;\n        }\n        return -1;\n    },\n\n    // Sort By ASC\n    orderByIdAscending: function(a, b) {\n        if(a.id == b.id) {\n            return 0;\n        } else if(a.id > b.id) {\n            return 1;\n        }\n        return -1;\n    },\n\n    // Order By Name Ascending\n    foldersOrderBy: function(folders) {\n        //folders.sort(utils.orderByNameAscending);\n        for(var i = 0; i < folders.length; i++) {\n            folders[i].projects.sort(utils.orderByNameAscending);\n        }\n    },\n\n    // Remove Folder in Folders by folderIndex\n    removeItemInArray: function(folders, folderIndex) {\n        var newFolders = new Array();\n        for(var i = 0; i < folders.length; i++) {\n            if(i == folderIndex) continue;\n            newFolders.push(folders[i]);\n        }\n        return newFolders;\n    },\n\n    // Handle Files When Upload Or Drop\n    handleFiles: function(files) {\n        var url = undefined;\n        window.URL = window.URL || window.webkitURL;\n        for(var i = 0, file; file = files[i]; i++) {\n            if(!file.type.match(/image.*/)) continue;\n            url = window.URL.createObjectURL(file);\n            break;\n        }\n        return url;\n    },\n\n    // Image Info\n    getImageUrl: function(files) {\n        return new Promise(function(resolve) {\n            window.URL = window.URL || window.webkitURL;\n            var url, file;\n            for(var i = 0, f; f = files[i]; i++) {\n                if(!f.type.match(/image.*/)) continue;\n                file = f;\n                url = window.URL.createObjectURL(file);\n                break;\n            }\n            if(file && window.File && window.FileReader && window.FileList && window.Blob) {\n                var reader = new FileReader();\n                reader.onloadend = function() {\n                    var tempImg = new Image();\n                    tempImg.src = reader.result;\n                    tempImg.onload = function() {\n                        resolve({\n                            width: tempImg.width,\n                            height: tempImg.height,\n                            url: url\n                        });\n                    };\n                };\n                reader.readAsDataURL(file);\n            } else {\n                resolve(false);\n            }\n        });\n    },\n\n    ///\n    // convertImgToBase64\n    // @param  {String}   url\n    // @param  {Function} callback\n    // @param  {String}   [outputFormat='image/png']\n    // @author HaNdTriX\n    // @example\n    // convertImgToBase64('http://goo.gl/AOxHAL', function(base64Img){\n    // console.log('IMAGE:',base64Img);\n    // })\n    ///\n    convertImgToBase64: function(url, callback, outputFormat) {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d');\n        var img = new Image();\n        img.crossOrigin = 'Anonymous';\n        img.onload = function() {\n            canvas.height = img.height;\n            canvas.width = img.width;\n            ctx.drawImage(img, 0, 0);\n            var dataURL = canvas.toDataURL(outputFormat || \"image/png|gif|jpg\");\n            callback.call(this, dataURL);\n            // Clean up\n            canvas = null;\n        };\n        img.src = url;\n    },\n\n    // Make SVG tag\n    // var clippath = makeSVG(\"clippath\", {\"id\": \"mask_polygon\"});\n    // var polygon = makeSVG(\"polygon\", {\"points\": \"159 515,586 515,586 158,159 158\"});\n    // clippath.appendChild(polygon);\n    makeSVG: function(tag, attrs, content) {\n        var el = document.createElementNS('http://www.w3.org/2000/svg', tag);\n        if(!!attrs) {\n            for(var k in attrs) {\n                el.setAttribute(k, attrs[k]);\n            }\n        }\n        if(!!content) el.innerHTML = content;\n        return el;\n    },\n\n    // Make Html tag\n    makeHTML: function(tag, attrs) {\n        var el = document.createElement(tag);\n        if(!!attrs) {\n            for(var k in attrs) {\n                el.setAttribute(k, attrs[k]);\n            }\n        }\n        return el;\n    },\n\n    // Make highlight element\n    makeHighlight: function(id, colorMatrix, deviation) {\n        if(!id) {\n            id = \"highlight\";\n        }\n        if(!colorMatrix) {\n            colorMatrix = \"0 0 0 0 0 0 0 0 0 0 5 5 5 5 0 5 5 5 5.7 0\";\n        }\n        if(!deviation) {\n            deviation = \"2\";\n        }\n        // a transparent grey glow with no offset\n        var feMerge = this.makeSVG('feMerge');\n        feMerge.appendChild(this.makeSVG('feMergeNode', {in: \"coloredBlur\"}));\n        feMerge.appendChild(this.makeSVG('feMergeNode', {in: \"SourceGraphic\"}));\n        var filter = this.makeSVG('filter', {id: id});\n        filter.appendChild(this.makeSVG('feColorMatrix', {type: \"matrix\", values: colorMatrix}));\n        filter.appendChild(this.makeSVG('feGaussianBlur', {stdDeviation: deviation, result: \"coloredBlur\"}));\n        filter.appendChild(feMerge);\n        return filter;\n    },\n\n    // Convert to path\n    getPoints: function(points) {\n        var path = \"\";\n        for(var i = 0; i < points.length; i++) {\n            if(i == 0) {\n                path += 'M' + points[i].x + \",\" + points[i].y;\n            }\n            else {\n                path += 'L' + points[i].x + \",\" + points[i].y;\n            }\n        }\n        return path;\n    },\n    mergingPoints: function(points) {\n        var path = \"\";\n        for(var i = 0; i < points.length; i++) {\n            if(i == 0) {\n                path += 'M ' + points[i].x + \" \" + points[i].y;\n            }\n            else {\n                path += ' L ' + points[i].x + \" \" + points[i].y;\n            }\n        }\n        return path;\n    },\n\n    // Check position on connect-line to get point/breakpoint\n    checkBreakPoints: function(points, pos) { // start - end\n        var offset = 25;\n        // check start\n        var point = points[0];\n        var distance = Math.sqrt(Math.pow(pos.y - point[2], 2) + Math.pow(pos.x - point[1], 2));\n        if(distance <= offset) {\n            return {\n                pos: 'start',\n                index: 0\n            };\n        }\n        // check end\n        var point = points[points.length - 1];\n        var distance = Math.sqrt(Math.pow(pos.y - point[2], 2) + Math.pow(pos.x - point[1], 2));\n        if(distance <= offset) {\n            return {\n                pos: 'end',\n                index: points.length - 1\n            };\n        }\n\n        return false;\n    },\n\n    // encode xml\n    encodeXml: function(str) {\n        if(str === undefined) {\n            return \"\";\n        }\n        return str.replaceAll(\"&\", \"&amp;\").replaceAll(\"\\\"\", \"&quot;\").replaceAll(\"'\", \"&apos;\").replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\").replaceAll(\"\\n\", \"\\\\n\");\n    },\n\n    // decode xml\n    decodeXml: function(str) {\n        if(str === undefined) {\n            return \"\";\n        }\n        return str.replaceAll(\"\\\\n\", \"\\n\").replaceAll(\"&quot;\", \"\\\"\").replaceAll(\"&apos;\", \"'\").replaceAll(\"&lt;\", \"<\").replaceAll(\"&gt;\", \">\").replaceAll(\"&amp;\", \"&\");\n    },\n\n    // restrict character\n    restrictCharacter: function(e) {\n        var k;\n        document.all ? k = e.keyCode : k = e.which;\n        return ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57) || k == 40 || k == 41 || k == 45 || k == 95);\n    },\n\n    // number only\n    numbersOnly: function(e, decimal) {\n        var key;\n        var keychar;\n        if(window.event) {\n            key = window.event.keyCode;\n        } else if(e) {\n            key = e.which;\n        } else {\n            return true;\n        }\n        keychar = String.fromCharCode(key);\n        if((key == null) || (key == 0) || (key == 8) || (key == 9) || (key == 13) || (key == 27)) {\n            return true;\n        } else if(((\"-+0123456789\").indexOf(keychar) > -1)) {\n            return true;\n        } else if(decimal && (keychar == \".\")) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    parseFloat: function(str) {\n        return parseFloat(str.replace(/[^-.0-9]/g, ''));\n    },\n\n    // Parse String from Xml\n    parseString: function(XML) {\n        //code for IE\n        if(window.ActiveXObject) {\n            return XML.xml;\n        } else { // code for Chrome, Safari, Firefox, Opera, etc.\n            return (new XMLSerializer()).serializeToString(XML);\n        }\n    },\n\n    // Parse XML form string\n    parseXml: function(xmlStr) {\n        if(typeof window.DOMParser != \"undefined\") {\n            return (new window.DOMParser()).parseFromString(xmlStr, \"text/xml\");\n        } else if(typeof window.ActiveXObject != \"undefined\" && new window.ActiveXObject(\"Microsoft.XMLDOM\")) {\n            var xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = \"false\";\n            xmlDoc.loadXML(xmlStr);\n            return xmlDoc;\n        } else {\n            throw new Error(\"No XML parser found\");\n        }\n    },\n\n    // Get XML form Url\n    httpGetXml: function(theUrl) {\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open(\"GET\", theUrl, false);\n        xmlHttp.send(null);\n        return xmlHttp.responseXML;\n    },\n\n    // Get String form Url\n    httpGetString: function(theUrl) {\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open(\"GET\", theUrl, false);\n        xmlHttp.send(null);\n        return xmlHttp.responseText;\n    },\n\n    // Clone array\n    cloneArray: function(inArray) {\n        var outArray = [];\n        for(var i = 0; i < inArray.length; i++) {\n            var childs = [];\n            for(var j = 0; j < inArray[i].length; j++) {\n                childs.push(inArray[i][j]);\n            }\n            outArray.push(childs);\n        }\n        return outArray;\n    },\n    deltaTransformPoint: function(matrix, point) {\n        var dx = point.x * matrix.a + point.y * matrix.c + 0;\n        var dy = point.x * matrix.b + point.y * matrix.d + 0;\n        return {x: dx, y: dy};\n    },\n    decomposeMatrix: function(matrix) {\n        // @see https://gist.github.com/2052247\n        // calculate delta transform point\n        var px = this.deltaTransformPoint(matrix, {x: 0, y: 1});\n        var py = this.deltaTransformPoint(matrix, {x: 1, y: 0});\n\n        // calculate skew\n        var skewX = ((180 / Math.PI) * Math.atan2(px.y, px.x) - 90);\n        var skewY = ((180 / Math.PI) * Math.atan2(py.y, py.x));\n\n        return {\n            translateX: matrix.e,\n            translateY: matrix.f,\n            scaleX: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),\n            scaleY: Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d),\n            skewX: skewX,\n            skewY: skewY,\n            rotation: skewX // rotation is the same as skew x\n        };\n    },\n\n    /**\n     * Returns a random number between min (inclusive) and max (exclusive)\n     */\n    getRandomArbitrary: function(min, max) {\n        return Math.random() * (max - min) + min;\n    },\n\n    /**\n     * Returns a random integer between min (inclusive) and max (inclusive)\n     * Using Math.round() will give you a non-uniform distribution!\n     */\n    getRandomInt: function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    },\n\n    /**\n     * Calculate Lighter or Darker Hex Colors\n     */\n    colorLuminance: function(hex, lum) {\n        // validate hex string\n        hex = String(hex).replace(/[^0-9a-f]/gi, '');\n        if(hex.length < 6) {\n            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n        }\n        lum = lum || 0;\n\n        // convert to decimal and change luminosity\n        var rgb = \"#\", c, i;\n        for(i = 0; i < 3; i++) {\n            c = parseInt(hex.substr(i * 2, 2), 16);\n            c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n            rgb += (\"00\" + c).substr(c.length);\n        }\n\n        return rgb;\n    },\n\n    //*** Convert color\n    hex2Rgb: function(hex) {\n        // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n            return r + r + g + g + b + b;\n        });\n\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        } : null;\n    },\n    rgb2Hex: function(r, g, b) {\n        function componentToHex(c) {\n            var hex = c.toString(16);\n            return hex.length == 1 ? \"0\" + hex : hex;\n        }\n\n        return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n    },\n    hex2hsb: function(hex) {\n        var rgb = this.hex2Rgb(hex);\n        return rgb ? Snap.rgb2hsb(rgb) : null;\n    },\n\n    // Change opacity = 1 and luminosity\n    changeLuminosityOfHsl: function(color, luminosity) {\n        var rgb = Snap.getRGB(color);\n        var hsl = Snap.rgb2hsl(rgb.r, rgb.g, rgb.b);\n\n        return Snap.hsl2rgb(hsl.h, hsl.s, luminosity).hex;\n    },\n\n    // Incrementing hue color\n    colorHsvIncrementing: function(hexColor, hue, saturation, brightness) {\n        saturation = saturation || 1;\n        brightness = brightness || 1;\n\n        var rgb = Snap.getRGB(hexColor);\n        var hsb = Snap.rgb2hsb(rgb.r, rgb.g, rgb.b);\n\n        return Snap.hsb2rgb(hsb.h + hue, saturation, brightness).hex;\n    },\n    getRgbaString: function(color, transparency) {\n        transparency = transparency || 1;\n        var rgb = Snap.getRGB(color);\n\n        return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + transparency + ')';\n\n    },\n\n    // SVG Ellipse to Path Converter\n    ellipseToPath: function(cx, cy, rx, ry) {\n        var output = \"M\" + (cx - rx).toString() + \",\" + cy.toString() +\n            \"a\" + rx.toString() + \",\" + ry.toString() + \" 0 1,0 \" + (2 * rx).toString() + \",0\" +\n            \"a\" + rx.toString() + \",\" + ry.toString() + \" 0 1,0 \" + (-2 * rx).toString() + \",0\";\n\n        return output;\n    },\n\n    // SVG Circle to Path Converter\n    circleToPath: function(cx, cy, r) {\n        return this.ellipseToPath(cx, cy, r, r);\n    },\n\n    // SVG Rect to Path Converter\n    rectToPath: function(x, y, x2, y2) {\n        var output = \"M\" + x.toString() + \",\" + y.toString() +\n            \"L\" + x2.toString() + \",\" + y.toString() +\n            \"L\" + x2.toString() + \",\" + y2.toString() +\n            \"L\" + x + \",\" + y2 + \"Z\";\n\n        return output;\n    },\n\n    // Points to Path Converter\n    pointsToPath: function(points) {\n        var path = utils.getPoints(points);\n\n        return path + 'Z';\n    },\n\n    polarToCartesian: function(centerX, centerY, radiusX, radiusY, angleInDegrees) {\n        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n\n        return {\n            x: centerX + (radiusX * Math.cos(angleInRadians)),\n            y: centerY + (radiusY * Math.sin(angleInRadians))\n        };\n    },\n\n    // SVG Arc (Ellipse or  Circle) to Path Converter\n    ellipticalArcToPath: function(x, y, radiusX, radiusY, startAngle, endAngle) {\n        var start = this.polarToCartesian(x, y, radiusX, radiusY, endAngle);\n        var end = this.polarToCartesian(x, y, radiusX, radiusY, startAngle);\n        var arcSweep = endAngle - startAngle <= 180 ? '0' : '1';\n        var d = [\n            'M', start.x, start.y,\n            'A', radiusX, radiusY, 0, arcSweep, 0, end.x, end.y\n        ].join(' ');\n\n        return d;\n    },\n\n    // Left trim\n    ltrim: function(strings, chars) {\n        chars = chars || \"\\\\s*\";\n        return strings.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\");\n    },\n\n    // Right trim\n    rtrim: function(strings, chars) {\n        chars = chars || \"\\\\s*\";\n        return strings.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\");\n    },\n\n    // Trim\n    trim: function(strings, chars) {\n        return this.ltrim(this.rtrim(strings, chars), chars);\n    },\n\n    // Prepend array\n    prependArray: function(oldArray, value) {\n        var newArray = new Array();\n        newArray.push(value);\n        for(var i = 0; i < oldArray.length; ++i) {\n            newArray.push(oldArray[i]);\n        }\n        return newArray;\n    },\n\n    //*** Calculate angle, distance between three points - Return degrees\n    calculateThreePoints: function(p2, p1, p3) {\n        p1 = p1 || {x: 0, y: 0};\n        p2 = p2 || {x: 0, y: 0};\n        p3 = p3 || {x: 0, y: 0};\n\n        var d12 = utils.getDistanceTwoPoints(p1, p2);\n        var d13 = utils.getDistanceTwoPoints(p1, p3);\n        var d23 = utils.getDistanceTwoPoints(p2, p3);\n\n        var rad = Math.acos((Math.pow(d12, 2) + Math.pow(d13, 2) - Math.pow(d23, 2)) / (2 * d12 * d13)); // between 0 and PI radians\n        if(rad == 0) {\n            return {d12: d12, d13: d13, d23: d23, angle: 0};\n        } else {\n            return {d12: d12, d13: d13, d23: d23, angle: rad * 180 / Math.PI};\n        }\n    },\n\n    /***\n     * Distance two points\n     * @param p1\n     * @param p2\n     * @returns {number}\n     */\n    calculateTwoPoints: function(p1, p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    },\n\n    //*** Get point by projection\n    projectionPointOnPath: function(path, point) {\n        point = point || {x: 0, y: 0};\n        var arr = [];\n        var i1 = Snap.path.intersection(path, 'M-10000,' + point.y + 'L' + \"10000,\" + point.y),\n            i2 = Snap.path.intersection(path, 'M' + point.x + ',-10000L' + point.x + \",10000\");\n        for(var i = 0; i < i1.length; i++) {\n            var p = {\n                x: parseFloat(i1[i].x.toFixed(2)),\n                y: parseFloat(i1[i].y.toFixed(2))\n            };\n            p.d = Math.sqrt(Math.pow(p.x - point.x, 2) + Math.pow(p.y - point.y, 2));\n            arr.push(p);\n        }\n        for(var i = 0; i < i2.length; i++) {\n            var p = {\n                x: parseFloat(i2[i].x.toFixed(2)),\n                y: parseFloat(i2[i].y.toFixed(2))\n            };\n            p.d = Math.sqrt(Math.pow(p.x - point.x, 2) + Math.pow(p.y - point.y, 2));\n            arr.push(p);\n        }\n        if(arr.length > 0) {\n            arr.sort(function(a, b) {\n                return a.d - b.d\n            });\n            return {x: arr[0].x, y: arr[0].y};\n        }\n        return false;\n    },\n\n    //*** Quadrant coordinates\n    getDirection: function(r, p) {\n        if(r.x == p.x && r.y == p.y) {\n            return 0;\n        } else if(r.x <= p.x && r.y >= p.y) {\n            return 1;\n        } else if(r.x <= p.x && r.y <= p.y) {\n            return 2;\n        } else if(r.x >= p.x && r.y <= p.y) {\n            return 3;\n        } else if(r.x >= p.x && r.y >= p.y) {\n            return 4;\n        }\n    },\n\n    /***\n     * Get Distance from p1 to p2\n     */\n    getDistanceTwoPoints: function(p1, p2) {\n        return utils.calculateTwoPoints(p1, p2);\n    },\n\n    /***\n     * Get Properties From Three Points\n     * @param p2\n     * @param p1\n     * @param p3\n     * @returns {*|{d12, d13, d23, angle}}\n     */\n    getPropertiesThreePoints: function(p2, p1, p3) {\n        return utils.calculateThreePoints(p2, p1, p3);\n    },\n\n    /***\n     * Get Point: Projection of a point to vector\n     * @param O(x;y)\n     * @param vector(A(x,y),B(x,y))\n     * n=(a,b), A(xa, ya) => a(x-xa)+b(y-yb)=0\n     */\n    getPointOfPointToVector: function(O, A, B) {\n        // OM*AB\n        var a1 = A.x - B.x,\n            b1 = A.y - B.y,\n            c1 = -(A.x - B.x) * O.x - (A.y - B.y) * O.y;\n\n        // a(x-xa)+b(y-yb)=0\n        var a2 = A.y - B.y,\n            b2 = -A.x + B.x,\n            c2 = -(A.y - B.y) * A.x - (B.x - A.x) * A.y;\n\n        return utils.getXYOfEquation(a1, b1, -c1, a2, b2, -c2);\n    },\n\n    /***\n     * @param a1x + b1y = c1\n     * @param a2x + b2y = c2\n     */\n    getXYOfEquation: function(a1, b1, c1, a2, b2, c2) {\n        var d = a1 * b2 - a2 * b1,\n            dx = c1 * b2 - c2 * b1,\n            dy = a1 * c2 - a2 * c1;\n\n        if(d != 0) {\n            return {\n                x: parseFloat(dx / d),\n                y: parseFloat(dy / d)\n            };\n        } else {\n            if(dx != 0 && dy != 0) {\n                // return false\n            } else if(dx == 0 && dy == 0) {\n                // return n\n            }\n        }\n\n        return false;\n    },\n\n    /**\n     *    var svgText = document.getElementById(\"myViewer\").outerHTML;\n     *    var myCanvas = document.getElementById(\"canvas\");\n     *    var ctxt = myCanvas.getContext(\"2d\");\n     *    // usage:\n     *    drawInlineSVG(ctxt, svgText, function() {\n     *        console.log(canvas.toDataURL());  // -> PNG\n     *        alert(\"see console for output...\");\n     *    });\n     **/\n    drawInlineSVG: function(ctx, rawSVG, callback) {\n        var svg = new Blob([rawSVG], {type: \"image/svg+xml;charset=utf-8\"}),\n            domURL = self.URL || self.webkitURL || self,\n            url = domURL.createObjectURL(svg),\n            img = new Image;\n\n        img.onload = function() {\n            ctx.drawImage(this, 0, 0);\n            domURL.revokeObjectURL(url);\n            callback(this);\n        };\n\n        img.src = url;\n    }\n};\n","//\n\nvar utils = require('../../common/services/utils.js');\nvar STACK_LIST = require('../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../common/services/stack.js').STACK_TYPES;\nvar eGetPosition= require('enyo/dispatcher').getPosition;\n\nvar IS_TOUCH = require('enyo/platform').touch;\n\nvar Graphic = module.exports = Class.extend({\n    init: function(svgName, inputName, info, width, height, configs, onMouseDown, onMouseMove, onMouseUp, onStart, onMove, onEnd, fIn, fOut) {\n        var _self = this;\n        this.svgName = svgName;\n        this.inputName = inputName;\n        this.info = info;\n        this.configs = configs;\n        this.scale = 1;\n        this.currZoom = 1;\n        this.minZoom = 0.5;\n        this.maxZoom = 2;\n        this.currPos = {x: 0, y: 0};\n        this.currMatrix = new Snap.Matrix();\n        this.mMouse = {\n            start: {x: 0, y: 0},\n            position: {x: 0, y: 0}\n        };\n        this.width = width;\n        this.height = height;\n\n        // Create node input\n        this.input = document.getElementById(inputName);\n        this.input.addEventListener('keydown', function(e) {\n            switch(e.keyCode) {\n                case 13: // enter\n                {\n                    if(toolIcons.isAddText) {\n                        _self.createText({\n                            x: this.x,\n                            y: this.y,\n                            text: this.value\n                        });\n                    }\n                    break;\n                }\n            }\n        });\n\n        // Create svg\n        this.paper = Snap(\"#\" + svgName);\n        this.paper.attr({width: this.width, height: this.height});\n        this.paper.width = width;\n        this.paper.height = height;\n\n        // Events\n        if(IS_TOUCH) { // For mobile\n            this.paper.node.addEventListener('touchstart', onMouseDown, false);\n            this.paper.node.addEventListener('touchmove', onMouseMove, false);\n            this.paper.node.addEventListener('touchend', onMouseUp, false);\n        } else { // For desktop\n            this.paper.node.onmousedown = onMouseDown;\n            this.paper.node.onmousemove = onMouseMove;\n            this.paper.node.onmouseup = onMouseUp;\n        }\n\n        // Create root group\n        var rootChildNodes = this.paper.node.childNodes; // get all child nodes in our svg element\n        this.rootNode = this.paper.g(); // Root\n        var index = 0; // initialize our index counter for child nodes\n        var noOfChildNodes = rootChildNodes.length - 1;// get the number of child nodes in our root node\n        // go through all child elements\n        // (except the last one, which is our <g> element)\n        while(index < noOfChildNodes) {\n            this.appendChild(rootChildNodes[0]);\n            index += 1;\n        }\n\n        // Create group behind\n        this.behindNode = this.group();\n\n        // Create background\n        this.backdrop = this.paper.g();\n        this.paper.prepend(this.backdrop);\n\n        // panZoom\n        this.panZoom = this.paper.panzoom({\n            zoomStep: this.configs.zoomStep\n        });\n\n        // function\n        this.onMove = onMove;\n        this.onStart = onStart;\n        this.onEnd = onEnd;\n        this.fIn = fIn;\n        this.fOut = fOut;\n\n        // define some custom options\n        this.zpdOptions = {\n            pan: true,          // enable or disable panning (default enabled)\n            zoom: true,         // enable or disable zooming (default enabled)\n            drag: false,        // enable or disable dragging (default disabled)\n            zoomStep: 0.05       // define zoom sensitivity\n        };\n\n        // define some data to be used in the function internally\n        this.zpdData = {\n            state: 'none',\n            stateTarget: null,\n            stateOrigin: null,\n            stateTf: null\n        };\n\n        /**\n         * Sets the current transform matrix of an element.\n         */\n        function setCTM(element, matrix, threshold) {\n            if(threshold && typeof threshold === 'object') { // array [0.5,2]\n                if(matrix.a <= threshold[0]) {\n                    return;\n                }\n                if(matrix.d >= threshold[1]) {\n                    return;\n                }\n            }\n            var s = \"matrix(\" + matrix.a + \",\" + matrix.b + \",\" + matrix.c + \",\" + matrix.d + \",\" + matrix.e + \",\" + matrix.f + \")\";\n            element.setAttribute(\"transform\", s);\n\n            return matrix;\n        }\n\n        /**\n         * Instance an SVGPoint object with given event coordinates.\n         */\n        function getEventPoint(event, svgNode) {\n            var p = svgNode.node.createSVGPoint();\n\n            if(!!('ontouchstart' in window)) { // Check tablet\n                p.x = event.changedTouches[0].clientX;\n                p.y = event.changedTouches[0].clientY;\n            } else {\n                p.x = event.clientX;\n                p.y = event.clientY;\n            }\n\n            return p;\n        }\n\n        function handleMouseDown(event) {\n            if(event.preventDefault) {\n                event.preventDefault();\n            }\n\n            event.returnValue = false;\n\n            var g = _self.rootNode.node;\n\n            if(event.target.tagName == \"svg\" || !_self.zpdOptions.drag) { // Pan anyway when drag is disabled and the user clicked on an element\n                // Pan mode\n                _self.zpdData.state = 'pan';\n                _self.zpdData.stateTf = g.getCTM().inverse();\n                _self.zpdData.stateOrigin = getEventPoint(event, _self.paper).matrixTransform(_self.zpdData.stateTf);\n            } else {\n                // Drag mode\n                _self.zpdData.state = 'drag';\n                _self.zpdData.stateTarget = event.target;\n                _self.zpdData.stateTf = g.getCTM().inverse();\n                _self.zpdData.stateOrigin = getEventPoint(event, _self.paper).matrixTransform(_self.zpdData.stateTf);\n            }\n        }\n\n        function handleMouseMove(event) {\n            if(event.preventDefault) {\n                event.preventDefault();\n            }\n            event.returnValue = false;\n            var g = _self.rootNode.node;\n            if(_self.zpdData.state == 'pan' && _self.zpdOptions.pan && toolIcons.isMoving) { // Pan mode\n                var p = getEventPoint(event, _self.paper).matrixTransform(_self.zpdData.stateTf);\n                var matrix = setCTM(\n                    g,\n                    _self.zpdData.stateTf.inverse().translate(p.x - _self.zpdData.stateOrigin.x, p.y - _self.zpdData.stateOrigin.y)\n                );\n                _self.currMatrix = matrix;\n            } else if(_self.zpdData.state == 'drag' && _self.zpdOptions.drag) { // Drag mode\n                var dragPoint = getEventPoint(event, _self.paper).matrixTransform(g.getCTM().inverse());\n                setCTM(\n                    _self.zpdData.stateTarget,\n                    _self.paper.node.createSVGMatrix()\n                        .translate(dragPoint.x - _self.zpdData.stateOrigin.x, dragPoint.y - _self.zpdData.stateOrigin.y)\n                        .multiply(g.getCTM().inverse())\n                        .multiply(_self.zpdData.stateTarget.getCTM())\n                );\n                _self.zpdData.stateOrigin = dragPoint;\n            }\n        }\n\n        function handleMouseUp(event) {\n            if(event.preventDefault) {\n                event.preventDefault();\n            }\n            event.returnValue = false;\n            if(_self.zpdData.state == 'pan' || _self.zpdData.state == 'drag') {\n                _self.zpdData.state = ''; // quit pan mode\n            }\n        }\n\n        if(IS_TOUCH) { // For mobile\n            this.paper.node.addEventListener('touchstart', handleMouseDown, false);\n            this.paper.node.addEventListener('touchmove', handleMouseMove, false);\n            this.paper.node.addEventListener('touchend', handleMouseUp, false);\n        } else { // For desktop\n            // IE < 9 would need to use the event onmouseup, but they do not support svg anyway.\n            this.paper.node.addEventListener('mousedown', handleMouseDown, false);\n            this.paper.node.addEventListener('mousemove', handleMouseMove, false);\n            this.paper.node.addEventListener('mouseup', handleMouseUp, false);\n        }\n    },\n    // Offset for Draw SVG -  Fix dragtable\n    getOffset: function() {\n        var offset = {\n            top: parseFloat(this.paper.node.getAttribute('offsetTop')),\n            left: parseFloat(this.paper.node.getAttribute('offsetLeft')),\n            width: parseFloat(this.paper.node.getAttribute('width')),\n            height: parseFloat(this.paper.node.getAttribute('height'))\n        };\n\n        var rect = this.paper.node.getBoundingClientRect();\n        if(isNaN(offset.top) || !offset.top) {\n            offset.top = rect.top;\n        }\n        if(isNaN(offset.left) || !offset.left) {\n            offset.left = rect.left;\n        }\n        if(isNaN(offset.width) || !offset.width) {\n            offset.width = rect.width;\n        }\n        if(isNaN(offset.height) || !offset.height) {\n            offset.height = rect.left;\n        }\n\n        return offset;\n    },\n    // Position mouse on Draw Panel\n    getPosition: function() {\n        var pos = {x: 0, y: 0};\n        var offset = this.getOffset();\n\n        if(IS_TOUCH) {\n            pos = {\n                x: window.event.changedTouches[0].pageX - offset.left,\n                y: window.event.changedTouches[0].pageY - offset.top\n            };\n        } else {\n            pos = {\n                x: eGetPosition().pageX - offset.left,\n                y: eGetPosition().pageY - offset.top\n            };\n        }\n\n        // Zoom fixed\n        var pan = this.getCurrentPosition();\n        pos.x = pos.x * this.scale + pan.x;\n        pos.y = pos.y * this.scale + pan.y;\n\n        return pos;\n    },\n    // Mouse in Draw Panel\n    isInside: function() {\n        var pos = utils.getPosition();\n        var offset = this.getOffset();\n        if((offset.left <= pos.x && pos.x <= offset.left + offset.width) && (offset.top <= pos.y && pos.y <= offset.top + offset.height)) {\n            return true;\n        }\n        return false;\n    },\n    appendChild: function(nodeElement) {\n        this.rootNode.node.appendChild(nodeElement);\n\n        return nodeElement;\n    },\n    appendBackdrop: function(nodeElement) {\n        this.backdrop.node.appendChild(nodeElement);\n\n        return nodeElement;\n    },\n    add: function(node) {\n        this.rootNode.add(node);\n    },\n    group: function() {\n        var g = this.paper.g();\n        this.rootNode.add(g);\n        return g;\n    },\n    rect: function(x, y, width, height) {\n        var rect = this.paper.rect(x, y, width, height);\n        this.rootNode.add(rect);\n        return rect;\n    },\n    circle: function(x, y, r) {\n        var circle = this.paper.circle(x, y, r);\n        this.rootNode.add(circle);\n        return circle;\n    },\n    ellipse: function(x, y, rx, ry) {\n        var ellipse = this.paper.ellipse(x, y, rx, ry);\n        this.rootNode.add(ellipse);\n        return ellipse;\n    },\n    polygon: function(points) {\n        var polygon = this.paper.polygon(points);\n        this.rootNode.add(polygon);\n        return polygon;\n    },\n    path: function(pathString) {\n        var path = this.paper.path(pathString);\n        this.rootNode.add(path);\n        return path;\n    },\n    image: function(url, x, y, width, height) {\n        var image = this.paper.image(url, x, y, width, height);\n        this.rootNode.add(image);\n        return image;\n    },\n    text: function(x, y, text) {\n        var t = this.paper.text(x, y, text);\n        this.rootNode.add(t);\n        return t;\n    },\n    connection: function(start, end, info) {\n        var conn = false;\n        if(!end && !info) {\n            conn = start;\n            this.paper.connection(conn);\n        } else {\n            conn = this.paper.connection(start, end, info);\n            if(!!conn) {\n                this.behindNode.attr({\n                    id: 'svg-system-group-path',\n                    classes: 'svg-system-group-path'\n                });\n                this.behindNode.add(conn.line1, conn.line2, conn.mask);\n\n                if(!!conn.lineStart) {\n                    this.behindNode.add(conn.lineStart.line1, conn.lineStart.line2, conn.lineStart.mask);\n                }\n\n                if(!!conn.lineEnd) {\n                    this.behindNode.add(conn.lineEnd.line1, conn.lineEnd.line2, conn.lineEnd.mask);\n                }\n            }\n        }\n        return conn;\n    },\n    /**\n     * zoom element to a certain zoom factor\n     * zoomTo(1, 1000);\n     * zoomTo(1);\n     */\n    zoomTo: function(zoom, translate, interval, ease, callback) {\n        if(zoom < 0 || typeof zoom !== 'number') {\n            console.error('zoomTo(arg) should be a number and greater than 0');\n            return;\n        }\n\n        translate = translate || {x: 0, y: 0};\n\n        if(typeof interval !== 'number') {\n            interval = 100;\n        }\n\n        var _self = this,\n            _root = this.rootNode;\n\n        _self.currMatrix = new Snap.Matrix().scale(zoom).translate(translate.x, translate.y);\n        _self.scale = 1 / zoom;\n        // animate our element and call the callback afterwards\n        _root.animate({transform: _self.currMatrix}, interval, ease || null, function() {\n            if(callback) {\n                callback(_root);\n            }\n        });\n    },\n    /**\n     * move the element to a certain position\n     * panTo(0, 0); // original location\n     * panTo('+10', 0); // move right\n     */\n    panTo: function(x, y, interval, ease, cb) {\n        // Detect is +1 -1 or 1\n        // increase decrease or just number\n        function increaseDecreaseOrNumber(defaultValue, input) {\n            if(input === undefined) {\n                return parseInt(defaultValue);\n            } else if(input[0] == '+') {\n                return defaultValue + parseInt(input.split('+')[1]);\n            } else if(input[0] == '-') {\n                return defaultValue - parseInt(input.split('-')[1]);\n            } else {\n                return parseInt(input);\n            }\n        }\n\n        // get a reference to the current element\n        var self = this.rootNode;\n\n        var gMatrix = self.node.getCTM(),\n            matrixX = increaseDecreaseOrNumber(gMatrix.e, x),\n            matrixY = increaseDecreaseOrNumber(gMatrix.f, y),\n            matrixString = \"matrix(\" + gMatrix.a + \",\" + gMatrix.b + \",\" + gMatrix.c + \",\" + gMatrix.d + \",\" + matrixX + \",\" + matrixY + \")\";\n\n        // load <g> transform matrix\n        self.animate({transform: matrixString}, interval || 10, ease || null, function() {\n            if(cb) {\n                cb(null, self);\n            }\n        });\n    },\n    // Zoom By Step\n    zoom: function() {\n        var dentalX = (this.currMatrix.e - this.width / 2 * (1 - this.currZoom)) / this.currZoom;\n        var dentalY = (this.currMatrix.f - this.height / 2 * (1 - this.currZoom)) / this.currZoom;\n        var currZoom = this.currZoom;\n\n        if(PL.keyCode == 16) { // Zoom Out\n            this.currZoom -= this.zpdOptions.zoomStep;\n        } else { // Zoom In\n            this.currZoom += this.zpdOptions.zoomStep;\n        }\n        this.currZoom = parseFloat(this.currZoom.toFixed(2));\n\n        var dx = this.width / 2 * (1 - this.currZoom) / this.currZoom + dentalX,\n            dy = this.height / 2 * (1 - this.currZoom) / this.currZoom + dentalY;\n\n        if(this.currZoom === this.minZoom - this.zpdOptions.zoomStep || this.maxZoom + this.zpdOptions.zoomStep === this.currZoom) {\n            console.error(this.minZoom + ' <= zoomTo <= ' + this.maxZoom);\n            this.currZoom = currZoom;\n        } else if(this.currZoom < this.minZoom || this.maxZoom < this.currZoom) {\n            console.error(this.minZoom + ' <= zoomTo <= ' + this.maxZoom);\n            this.zoomDefault();\n        } else {\n            this.zoomTo(this.currZoom, {x: dx, y: dy});\n        }\n    },\n    // Zoom By Param\n    zoomBy: function(currZoom) {\n        var dentalX = (this.currMatrix.e - this.width / 2 * (1 - this.currZoom)) / this.currZoom;\n        var dentalY = (this.currMatrix.f - this.height / 2 * (1 - this.currZoom)) / this.currZoom;\n\n        this.currZoom = currZoom;\n\n        var dx = this.width / 2 * (1 - this.currZoom) / this.currZoom + dentalX,\n            dy = this.height / 2 * (1 - this.currZoom) / this.currZoom + dentalY;\n\n        this.zoomTo(this.currZoom, {x: dx, y: dy});\n    },\n    zoomByRoot: function(currZoom) {\n        this.currZoom = currZoom;\n        this.zoomTo(this.currZoom, {x: 0, y: 0});\n    },\n    // Zoom to fit\n    zoomFit: function(bbox) {\n        var x = bbox.x - 10,\n            y = bbox.y - 10,\n            width = bbox.width + 20,\n            height = bbox.height + 20,\n            zW = this.width / width,\n            zH = this.height / height;\n\n        if(zW < zH) {\n            this.currZoom = zW;\n        } else {\n            this.currZoom = zH;\n        }\n\n        this.zoomTo(this.currZoom, {x: -x, y: -y});\n    },\n    zoomDefault: function(callback) {\n        this.currZoom = 1;\n        this.zoomTo(this.currZoom, undefined, undefined, undefined, callback);\n    },\n    scaleViewPort: function(scaleX, scaleY) {\n        this.rootNode.transform(new Snap.matrix().scale(scaleX, scaleY));\n    },\n    // Get position for mouseover\n    getCurrentPosition: function() {\n        this.currPos.x = -this.currMatrix.e * this.scale;\n        this.currPos.y = -this.currMatrix.f * this.scale;\n\n        return this.currPos;\n    },\n    // Verifying the parent - check current panel\n    verify: function(item) {\n        if(item.paper && item.paper.node.id === this.svgName) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    // fn select item\n    isSelectedItem: function(item) {\n        for(var i = 0; i < this.info.mSelectedItems.count; i++) {\n            if(this.info.mSelectedItems.item(i) === item) {\n                return true;\n            }\n        }\n        return false;\n    },\n    // deselect items in array selecteditems\n    deSelectedItems: function() {\n        this.info.mSelectedItems.forEach(function(item) {\n            item.selectChange(false);\n        });\n        this.info.mSelectedItems = new Collection();\n    },\n    // deselect item in list selected items\n    deSelectedItem: function(ele) {\n        var that = this;\n        this.info.mSelectedItems.forEach(function(item) {\n            if(item === ele) {\n                item.selectChange(false);\n                that.info.mSelectedItems.remove(item);\n            }\n        });\n        if(this.info.mSelectedItems.count === 0) {\n            this.info.mSelectedItems = new Collection();\n        }\n    },\n    createText: function(options) {\n        if(options.text.trim() !== \"\") {\n            var text = new Text(options.x, options.y, options.text);\n            this.info.mText.add(text, true);\n            var item = this.drawText(text);\n            this.info.mObjectText.add(item);\n\n            // Add stack list\n            STACK_LIST.addStack(this.info.currentTagName, this.info.panel.name, STACK_TYPES.SVG, STACK_METHODS.CREATE, item);\n\n            // Off input\n            this.turnOnTextBoxToAddText(false);\n\n            // Reset input value\n            this.input.value = \"\";\n\n            return item;\n        }\n        return false;\n    },\n    // fn draw text\n    drawText: function(object, label) {\n        if(label == undefined) {\n            label = false;\n        } else {\n            label = true;\n        }\n\n        var text = this.text(object.x, object.y, object.text).attr({\n            'font-size': object.fontSize,\n            'text-anchor': 'middle',\n            stroke: 'none',\n            fill: '#000000',\n            cursor: 'pointer'\n        });\n\n        if(!label) {\n            text.id = object.id;\n            text.info = object;\n            text.objType = OBJECTS.TEXT;\n            text.angle = 0;\n            text.selectChange = function(flag) {\n                if(flag) {\n                    this.attr({stroke: '#B8C8E6', 'stroke-opacity': .5});\n                } else {\n                    this.attr({stroke: 'none'});\n                }\n            };\n            if(!IS_TOUCH) {\n                text.hover(this.fIn, this.fOut);\n            }\n            text.drag(this.onMove, this.onStart, this.onEnd);\n        }\n\n        return text;\n    },\n    // fn remove text\n    removeText: function(item) {\n        this.info.mText.remove(item);\n        for(var i = 0; i < this.info.mObjectText.count; i++) {\n            if(this.info.mObjectText.item(i) === item) {\n                this.info.mObjectText.remove(item);\n                item.remove();\n                break;\n            }\n        }\n    },\n    contain: function(shape, item) {\n        function contain(shape, item) {\n            var outSite = shape.getBBox();\n            var inSite = item.getBBox();\n            if(outSite.x < inSite.x && inSite.x + inSite.width < outSite.x + outSite.width &&\n                outSite.y < inSite.y && inSite.y + inSite.height < outSite.y + outSite.height) {\n                return true;\n            }\n            return false;\n        }\n\n        shape.matrix = shape.matrix || shape.node.getCTM();\n        item.matrix = item.matrix || item.node.getCTM();\n        if((shape.type == 'ellipse' || shape.type == 'circle' || shape.type == 'rect' || shape.type == \"path\" || shape.type == \"polygon\") &&\n            (shape.matrix.a == 1 && shape.matrix.b == 0 && shape.matrix.c == 0 && shape.matrix.d == 1) &&\n            (item.type == 'ellipse' || item.type == 'circle' || item.type == 'rect' || item.type == \"path\" || item.type == \"polygon\") &&\n            (item.matrix.a == 1 && item.matrix.b == 0 && item.matrix.c == 0 && item.matrix.d == 1)) {\n            var path1, path2, bb1 = shape.getBBox(), bb2 = item.getBBox(), ma1 = shape.matrix, ma2 = item.matrix;\n            if(shape.type == 'ellipse') {\n                path1 = utils.ellipseToPath(parseFloat(shape.attr('cx')) + ma1.e, parseFloat(shape.attr('cy')) + ma1.f, parseFloat(shape.attr('rx')), parseFloat(shape.attr('ry')));\n            } else if(shape.type == 'circle') {\n                path1 = utils.circleToPath(parseFloat(shape.attr('cx')) + ma1.e, parseFloat(shape.attr('cy')) + ma1.f, parseFloat(shape.attr('r')));\n            } else if(shape.type == 'rect') {\n                path1 = utils.rectToPath(bb1.x, bb1.y, bb1.x2, bb1.y2);\n            } else if(shape.type == 'path') {\n                path1 = Snap.parsePathString(shape.attr('path'));\n                for(var i = 0; i < path1.length - 1; i++) {\n                    path1[i][1] += ma1.e;\n                    path1[i][2] += ma1.f;\n                }\n                path1 = path1.toString();\n            } else if(shape.type == 'polygon') {\n                path1 = Snap.parsePathString('M' + shape.attr('points').toString() + 'Z');\n                for(var i = 0; i < path1.length - 1; i++) {\n                    path1[i][1] += ma1.e;\n                    path1[i][2] += ma1.f;\n                }\n                path1 = path1.toString();\n            }\n            if(item.type == 'ellipse') {\n                path2 = utils.ellipseToPath(parseFloat(item.attr('cx')) + ma2.e, parseFloat(item.attr('cy')) + ma2.f, parseFloat(item.attr('rx')), parseFloat(item.attr('ry')));\n            } else if(item.type == 'circle') {\n                path2 = utils.circleToPath(parseFloat(item.attr('cx')) + ma2.e, parseFloat(item.attr('cy')) + ma2.f, parseFloat(item.attr('r')));\n            } else if(item.type == 'rect') {\n                path2 = utils.rectToPath(bb2.x, bb2.y, bb2.x2, bb2.y2);\n            } else if(item.type == 'path') {\n                path2 = Snap.parsePathString(item.attr('path'));\n                for(var i = 0; i < path2.length - 1; i++) {\n                    path2[i][1] += ma1.e;\n                    path2[i][2] += ma1.f;\n                }\n                path2 = path2.toString();\n            } else if(item.type == 'polygon') {\n                path2 = Snap.parsePathString('M' + item.attr('points').toString() + 'Z');\n                for(var i = 0; i < path2.length - 1; i++) {\n                    path2[i][1] += ma1.e;\n                    path2[i][2] += ma1.f;\n                }\n                path2 = path2.toString();\n            }\n\n            if(Snap.path.isPointInside(path1, bb2.cx, bb2.cy) && Snap.path.intersection(path1, path2).length == 0) {\n                return true;\n            }\n            return false;\n        } else {\n            return contain(shape, item);\n        }\n    },\n    // Resize\n    setSize: function(width, height, zoomDefault, callback) {\n        var isDefault = (zoomDefault !== false);\n        this.width = width;\n        this.height = height;\n        var currZoom = this.panZoom.getCurrentZoom(),\n            curPos = this.panZoom.getCurrentPosition(),\n            newWidth = this.width * (1 - (currZoom * this.configs.zoomStep)),\n            newHeight = this.height * (1 - (currZoom * this.configs.zoomStep));\n        this.paper.width = this.width;\n        this.paper.height = this.height;\n        this.paper.attr({\n            width: this.width,\n            height: this.height,\n            viewBox: curPos.x + \" \" + curPos.y + \" \" + newWidth + \" \" + newHeight\n        });\n\n        // Reset zoom\n        if(isDefault) {\n            this.zoomDefault(callback);\n        } else {\n            if(callback) callback();\n        }\n    },\n    setSizeViewPort: function(width, height, zoomDefault, callback) {\n        this.setSize(width, height, zoomDefault, callback);\n    },\n    // Scale By Zoom Default\n    setScaleViewPort: function(scaleX, scaleY) {\n        var _self = this;\n        _self.zoomDefault(function() {\n            _self.scaleViewPort(scaleX, scaleY);\n        });\n    },\n    // Showing\n    setShowing: function(showing) {\n        this.rootNode.attr('opacity', showing ? 1 : 0);\n    },\n\n    //--- panZoom library ---//\n    // fn zoom\n    zoomViewPort: function(pos) {\n        if(PL.keyCode == 16) {\n            this.panZoom.zoomOut(this.configs.zoomStep, pos);\n        } else {\n            this.panZoom.zoomIn(this.configs.zoomStep, pos);\n        }\n        this.scale = (1 - (this.panZoom.getCurrentZoom() * this.configs.zoomStep));\n    },\n    zoomToFit: function() {\n        this.panZoom.enable();\n        this.panZoom.zoomOut(this.panZoom.getCurrentZoom());\n        this.scale = (1 - (this.panZoom.getCurrentZoom() * this.configs.zoomStep));\n        this.panZoom.disable();\n    },\n    //--- End panZoom ---//\n\n    // fn turn on textbox for input text to add text\n    turnOnTextBoxToAddText: function(turnOn) {\n        if(turnOn) {\n            this.input.style.display = 'block';\n            this.input.x = this.mMouse.position.x;\n            this.input.y = this.mMouse.position.y;\n            var pan = this.getCurrentPosition();\n            if((this.mMouse.position.x - pan.x) / this.scale < 100) {\n                this.input.style.left = '0px';\n            } else {\n                this.input.style.left = (this.mMouse.position.x - pan.x) / this.scale - 100 + 'px';\n            }\n            if((this.mMouse.position.y - pan.y) / this.scale < 20) {\n                this.input.style.top = \"0px\";\n            } else {\n                this.input.style.top = (this.mMouse.position.y - pan.y) / this.scale - 20 + 'px';\n            }\n            this.input.focus();\n        } else {\n            this.input.style.display = 'none';\n        }\n        // Set value\n        this.input.width = 200;\n        this.input.height = 40;\n        this.input.style.fontSize = 20 + \"px\";\n        this.input.style.width = 200 + \"px\";\n        this.input.style.height = 40 + \"px\";\n    },\n\n    /**\n     * Calculate available size of all items\n     * @param mObjects\n     * @param availableSize\n     * @param pipeGroup - Zoom fit should include pipe extents\n     * @returns {*|{x: number, y: number, x2: number, y2: number, cx: number, cy: number, width: number, height: number}}\n     */\n    calculateFitSize: function(mObjects, availableSize, pipeGroup) {\n        availableSize = availableSize || {x: 0, y: 0, x2: 0, y2: 0, cx: 0, cy: 0, width: 0, height: 0};\n        if(mObjects.count > 0) {\n            // Set x2, y2\n            for(var i = 0; i < mObjects.count; i++) {\n                mObjects.item(i).x2 = mObjects.item(i).x + mObjects.item(i).width;\n                mObjects.item(i).y2 = mObjects.item(i).y + mObjects.item(i).height;\n            }\n\n            var min = mObjects.sort('x').item(0),\n                max = mObjects.sort('x2').item(mObjects.count - 1);\n            availableSize.x = min.x;\n            availableSize.x2 = max.x + max.width;\n            availableSize.width = max.x + max.width - min.x;\n            availableSize.cx = min.x + availableSize.width / 2;\n\n            var min = mObjects.sort('y').item(0),\n                max = mObjects.sort('y2').item(mObjects.count - 1);\n            availableSize.y = min.y;\n            availableSize.y2 = max.y + max.height;\n            availableSize.height = max.y + max.height - min.y;\n            availableSize.cy = min.y + availableSize.height / 2;\n        }\n\n        if(!!pipeGroup) {\n            var bb = pipeGroup.getBBox();\n            if(bb.width > 0 && bb.height > 0) {\n                if(bb.x < availableSize.x) availableSize.x = bb.x;\n                if(bb.y < availableSize.y) availableSize.y = bb.y;\n                if(bb.x2 > availableSize.x2)  availableSize.x2 = bb.x2;\n                if(bb.y2 > availableSize.y2)  availableSize.y2 = bb.y2;\n\n                availableSize.width = availableSize.x2 - availableSize.x;\n                availableSize.height = availableSize.y2 - availableSize.y;\n                availableSize.cx = (availableSize.x + availableSize.x2) / 2;\n                availableSize.cy = (availableSize.y + availableSize.y2) / 2;\n            }\n        }\n\n        return availableSize;\n    }\n});\n","//\n\nvar Signals = require('enyo/Signals');\n\nvar Graphic = require('../../../common/services/graphic.js');\nvar utils = require('../../../common/services/utils.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar IS_TOUCH = require('enyo/platform').touch;\n\nvar siteGraphic = module.exports = {\n    configs: {\n        opacity: 0.6,\n        zoomStep: 0.1,\n        edge: 40,\n        angle: 15 // (degree) For polygon - All angles greater than 15 degrees\n    },\n    panel: null,\n    width: 0,\n    height: 0,\n    isDrawArea: false,\n    drawing: false,\n    currentTagName: null,\n    availableDraw: {\n        color: \"#ffffff\",\n        floorId: -1000,\n        zoneId: -1000\n    },\n    selectedArea: {\n        shape: undefined,\n        areaNormal: {fill: 'none', stroke: 'none'},\n        areaSelect: {fill: '#9CFFFD', 'fill-opacity': 0.1, stroke: '#389CFF'},\n        stroke: '#389CFF',\n        strokeWidth: 1\n    },\n    mAttributes: {\n        fill: '#ffffff',\n        stroke: '#ffffff',\n        'stroke-width': 0.001,\n        'fill-opacity': 0.5\n    },\n    floors: {},\n    queues: [],\n    init: function(info, svg, input, width, height) {\n        this.currentTagName = svg.getId();\n        this.width = width;\n        this.height = height;\n        // Init available\n        this.floors[this.currentTagName] = {\n            info: info,\n            currentTagName: this.currentTagName,\n            panel: this.panel,\n            image: undefined,\n            currentSensor: undefined,\n            stackList: new Array(),\n            currentStack: -1,\n            mText: new Collection(),\n            mObjectText: new Collection(),\n            mSensors: new Collection(),\n            mShapes: new Collection(),\n            mObjectShapes: new Collection(),\n            mSelectedItems: new Collection()\n        };\n        var floor = this.floors[this.currentTagName];\n        floor.g = new Graphic(\n            svg.getId(),\n            input.getId(),\n            floor,\n            this.width,\n            this.height,\n            this.configs,\n            this.onMouseDown,\n            this.onMouseMove,\n            this.onMouseUp,\n            this.onStart,\n            this.onMove,\n            this.onEnd,\n            this.fIn,\n            this.fOut\n        );\n        // Add highlight\n        floor.g.appendChild(utils.makeHighlight(this.currentTagName + '_hlSensor'));\n        floor.g.appendChild(utils.makeHighlight(this.currentTagName + '_hlShape', '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0'));\n        // Add group\n        floor.bgGroup = floor.g.group().attr({id: this.currentTagName + '_bgGroup'});\n        floor.shapeGroup = floor.g.group().attr({id: this.currentTagName + '_shapeGroup'});\n        floor.shapeGroup.length = 0;\n        floor.sensorGroup = floor.g.group().attr({id: this.currentTagName + '_sensorGroup'});\n        floor.sensorGroup.length = 0;\n        floor.textGroup = floor.g.group().attr({id: this.currentTagName + '_textGroup'});\n        floor.textGroup.length = 0;\n        floor.edgeGroup = floor.g.group();\n        // Background\n        this.setBackground(floor.image);\n\n        // Backdrop Blue-Grey-Drawing\n        floor.g.appendBackdrop(utils.makeSVG('defs', undefined, '' +\n            '<pattern id=\"' + this.currentTagName + '_blueStripe\" patternUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"25\" height=\"25\" viewBox=\"0 0 16 16\">' +\n                //'<pattern id=\"' + this.currentTagName + '_grayStripe\" patternUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"8\" height=\"8\" viewBox=\"0 0 16 16\">' +\n            '   <rect width=\"100%\" height=\"100%\" fill=\"#D8E2ED\"/>' +\n            '   <path d=\"M1,1h16v16h-16v-16\" fill-opacity=\"0\" stroke-width=\".5\" stroke-dasharray=\"1,1\" stroke=\"#446F9C\"/>' +\n            '</pattern>' +\n            '<pattern id=\"' + this.currentTagName + '_greyStripe\" patternUnits=\"userSpaceOnUse\" x=\"0\" y=\"0\" width=\"25\" height=\"25\" viewBox=\"0 0 16 16\">' +\n            '   <rect width=\"100%\" height=\"100%\" fill=\"#dce3e4\"/>' +\n            '   <path d=\"M1,1h16v16h-16v-16\" fill-opacity=\"0\" stroke-width=\"0.5\" stroke-dasharray=\"1,1\" stroke=\"#bbc5c9\"/>' +\n            '</pattern>'\n        ));\n        floor.g.appendBackdrop(utils.makeSVG('rect', {\n            width: '100%',\n            height: '100%',\n            fill: 'url(#' + this.currentTagName + '_blueStripe)',\n            class: 'blue-stripe'\n        }));\n        floor.g.appendBackdrop(utils.makeSVG('rect', {\n            width: '100%',\n            height: '100%',\n            fill: 'url(#' + this.currentTagName + '_greyStripe)',\n            class: 'grey-stripe'\n        }));\n    },\n    onMouseDown: function(e) {\n        var _self = siteGraphic;\n        if(_self.drawing !== true) return;\n        var floor = _self.floors[_self.currentTagName];\n        floor.g.mMouse.start = floor.g.getPosition();\n        if(!_self.currentItem && toolIcons.isSelector) {\n            _self.isDrawArea = true;\n            if(PL.keyCode != 16 && PL.keyCode != 17) { // shift or ctrl key\n                floor.g.deSelectedItems();\n            }\n        } else {\n            _self.isDrawArea = false;\n        }\n        // Set variables\n        GB.isStart = true;\n        floor.g.turnOnTextBoxToAddText(false);\n    },\n    // fn draw shape mouse move\n    onMouseMove: function(e) {\n        var _self = siteGraphic;\n        if(_self.drawing !== true) return;\n        var floor = _self.floors[_self.currentTagName];\n        floor.g.mMouse.position = floor.g.getPosition();\n        var x = floor.g.mMouse.start.x > floor.g.mMouse.position.x ? floor.g.mMouse.position.x : floor.g.mMouse.start.x,\n            y = floor.g.mMouse.start.y > floor.g.mMouse.position.y ? floor.g.mMouse.position.y : floor.g.mMouse.start.y,\n            w = Math.abs(floor.g.mMouse.start.x - floor.g.mMouse.position.x),\n            h = Math.abs(floor.g.mMouse.start.y - floor.g.mMouse.position.y);\n        if(_self.isDrawArea) {\n            // draw multi select element area\n            if(_self.selectedArea.shape === undefined) {\n                _self.selectedArea.shape = floor.g.rect(x, y, w, h).attr(_self.selectedArea.areaSelect);\n            } else {\n                _self.selectedArea.shape.attr({x: x, y: y, width: w, height: h}).attr(_self.selectedArea.areaSelect);\n            }\n        } else {\n            if(toolIcons.isAddRectangle && GB.isStart) {\n                if(_self.selectedArea.shape === undefined) {\n                    _self.selectedArea.shape = floor.g.rect(x, y, w, h).attr(_self.selectedArea.areaSelect);\n                } else {\n                    _self.selectedArea.shape.attr({\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }).attr(_self.selectedArea.areaSelect);\n                }\n            } else if(toolIcons.isAddCircle && GB.isStart) {\n                if(_self.selectedArea.shape === undefined) {\n                    _self.selectedArea.shape = floor.g.ellipse(x + w / 2, y + h / 2, w / 2, h / 2).attr(_self.selectedArea.areaSelect);\n                } else {\n                    _self.selectedArea.shape.attr({\n                        cx: x + w / 2,\n                        cy: y + h / 2,\n                        rx: w / 2,\n                        ry: h / 2\n                    }).attr(_self.selectedArea.areaSelect);\n                }\n            }\n        }\n    },\n    // fn draw shape mouse up\n    onMouseUp: function(e) {\n        var _self = siteGraphic;\n        if(_self.drawing !== true) return;\n        var floor = _self.floors[_self.currentTagName];\n        floor.g.mMouse.position = floor.g.getPosition();\n        if(toolIcons.isSelector) {\n            if(_self.selectedArea.shape !== undefined) { // Shape select\n                floor.mObjectShapes.forEach(function(item) {\n                    if(PL.keyCode == 17) {\n                        if(floor.g.contain(_self.selectedArea.shape, item)) {\n                            if(floor.g.isSelectedItem(item)) {\n                                floor.g.deSelectedItem(item);\n                                item.selectChange(false);\n                            } else {\n                                floor.mSelectedItems.add(item);\n                                item.selectChange(true);\n                            }\n                        }\n                    } else {\n                        if(floor.g.contain(_self.selectedArea.shape, item)) {\n                            if(!floor.g.isSelectedItem(item)) {\n                                floor.mSelectedItems.add(item);\n                                item.selectChange(true);\n                            }\n                        }\n                    }\n                });\n                // Add text\n                floor.mObjectText.forEach(function(item) {\n                    if(PL.keyCode == 17) {\n                        if(floor.g.contain(_self.selectedArea.shape, item)) {\n                            if(floor.g.isSelectedItem(item)) {\n                                floor.g.deSelectedItem(item);\n                                item.selectChange(false);\n                            } else {\n                                floor.mSelectedItems.add(item);\n                                item.selectChange(true);\n                            }\n                        }\n                    } else {\n                        if(floor.g.contain(_self.selectedArea.shape, item)) {\n                            if(!floor.g.isSelectedItem(item)) {\n                                floor.mSelectedItems.add(item);\n                                item.selectChange(true);\n                            }\n                        }\n                    }\n                });\n                _self.selectedArea.shape.remove();\n                _self.selectedArea.shape = undefined;\n            }\n        } else {\n            if(toolIcons.isAddRectangle || toolIcons.isAddCircle) {\n                var type = SHAPE_TYPES.RECTANGLE;\n                if(toolIcons.isAddRectangle) {\n                    type = SHAPE_TYPES.RECTANGLE;\n                } else if(toolIcons.isAddCircle) {\n                    type = SHAPE_TYPES.CIRCLE;\n                }\n\n                if(_self.selectedArea.shape) {\n                    var bb = _self.selectedArea.shape.getBBox();\n                    _self.createShape({\n                        type: type,\n                        x: bb.x,\n                        y: bb.y,\n                        w: bb.width,\n                        h: bb.height\n                    });\n                }\n                if(_self.selectedArea.shape !== undefined) {\n                    _self.selectedArea.shape.remove();\n                    _self.selectedArea.shape = undefined;\n                }\n            } else if(toolIcons.isAddPolyline) {\n                var isFinish = false;\n                if(GB.points.length >= 3) { // Check create polygon\n                    var nodeRoot = GB.points[0];\n                    if((nodeRoot.x - 10 < floor.g.mMouse.position.x && floor.g.mMouse.position.x < nodeRoot.x + 10) &&\n                        (nodeRoot.y - 10 < floor.g.mMouse.position.y && floor.g.mMouse.position.y < nodeRoot.y + 10)) {\n                        _self.createPolygon();\n                        isFinish = true;\n                    }\n                }\n                if(!isFinish) {\n                    GB.points.push({x: floor.g.mMouse.position.x, y: floor.g.mMouse.position.y});\n                    if(_self.selectedArea.shape === undefined) {\n                        _self.selectedArea.shape = floor.g.path(utils.getPoints(GB.points)).attr({\n                            stroke: _self.selectedArea.stroke,\n                            'stroke-width': _self.selectedArea.strokeWidth,\n                            fill: \"none\"\n                        });\n                    } else {\n                        _self.selectedArea.shape.attr({path: utils.getPoints(GB.points)});\n                    }\n                }\n            } else if(toolIcons.isAddText) {\n                // Add Text and Off textBox\n                var input = floor.g.input;\n                if(!!input) {\n                    if(input.value.trim() != \"\") {\n                        floor.g.createText({x: input.x, y: input.y, text: input.value});\n                    }\n                }\n                // Edit Text\n                if(!!_self.currentItem) {\n                    if(_self.currentItem.objType == OBJECTS.TEXT) {\n                        var pan = floor.g.getCurrentPosition();\n\n                        var left = (parseFloat(_self.currentItem.attr('x')) - pan.x) / floor.g.scale - parseInt(input.getAttribute('width')) / 2;\n                        var top = (parseFloat(_self.currentItem.attr('y')) - pan.y) / floor.g.scale - parseInt(input.getAttribute('height')) / 2;\n\n                        input.x = parseFloat(_self.currentItem.attr('x'));\n                        input.y = parseFloat(_self.currentItem.attr('y'));\n\n                        input.style.left = left + 'px';\n                        input.style.top = top + 'px';\n                        input.style.display = 'block';\n                        input.value = _self.currentItem.attr('text');\n                        input.focus();\n\n                        floor.g.removeText(_self.currentItem);\n                        floor.textGroup.length--;\n                        _self.currentItem = undefined;\n                    } else {\n                        floor.g.turnOnTextBoxToAddText(true);\n                    }\n                } else {\n                    floor.g.turnOnTextBoxToAddText(true);\n                }\n            }\n        }\n        // Reset variables\n        GB.isStart = false;\n        _self.isDrawArea = false;\n    },\n    // fn fin\n    fIn: function(e) {\n        if(siteGraphic.drawing !== true) return;\n        siteGraphic.currentItem = this;\n    },\n    // fn fout\n    fOut: function() {\n        if(siteGraphic.drawing !== true) return;\n        siteGraphic.currentItem = undefined;\n    },\n    // fn onstart\n    onStart: function(x, y) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        if(!floor.g || (floor.g && !floor.g.verify(this))) {\n            return false;\n        }\n        if(_self.drawing !== true) {\n            return false;\n        }\n\n        // Check key holding\n        if(PL.keyCode == 16 || PL.keyCode == 17) { // shift key or ctrl key\n            floor.g.deSelectedItems();\n            floor.mSelectedItems.add(this);\n            this.selectChange(true);\n        }\n\n        if(IS_TOUCH) {\n            var offset = floor.g.getOffset();\n            floor.g.mMouse.position = {\n                x: x - offset.left,\n                y: y - offset.top\n            };\n        }\n\n        if(toolIcons.isSelector) {\n            if(this.objType === OBJECTS.TEXT || this.objType === OBJECTS.SHAPE) {\n                if(PL.keyCode == 16 || PL.keyCode == 17) { // shift key or ctrl key\n                    if(!floor.g.isSelectedItem(this)) {\n                        floor.mSelectedItems.add(this);\n                        this.selectChange(true);\n                    } else if(PL.keyCode == 17) {\n                        floor.g.deSelectedItem(this);\n                        this.selectChange(false);\n                    }\n                } else {\n                    floor.g.deSelectedItems();\n                    floor.mSelectedItems.add(this);\n                    this.selectChange(true);\n                }\n            } else if(this.objType === OBJECTS.SENSOR) {\n                _self.deSelectedSensor();\n                this.selectChange(true);\n                floor.currentSensor = this;\n                floor.g.deSelectedItems();\n            } else if(this.objType === OBJECTS.EDGE) {\n                // Backup parent size\n                this.parentBBox = this.parentShape.getBBox();\n                // For ellipse\n                this.parentBBox.rx = parseFloat(this.parentShape.attr('rx'));\n                this.parentBBox.ry = parseFloat(this.parentShape.attr('ry'));\n                // For polygon\n                if(this.parentShape.type == SHAPE_TYPES.POLYGON) {\n                    this.parentBBox.points = this.parentShape.attr('points').join(' ');\n                }\n            }\n        } else {\n            floor.g.deSelectedItems();\n            _self.deSelectedSensor();\n        }\n\n        // Set variables\n        this.dx = 0;\n        this.dy = 0;\n        _self.currentItem = this;\n    },\n    // fn onmove\n    onMove: function(dx, dy) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n\n        if(!floor.g || (floor.g && !floor.g.verify(this))) {\n            return false;\n        }\n\n        if(_self.drawing !== true) {\n            return false;\n        }\n\n        dx = dx * floor.g.scale;\n        dy = dy * floor.g.scale;\n\n        if(toolIcons.isSelector) {\n            if(this.objType === OBJECTS.TEXT || this.objType === OBJECTS.SHAPE) {\n                floor.mSelectedItems.forEach(function(item) {\n                    item.transform('R0T' + dx + ',' + dy);\n                    if(item.objType === OBJECTS.SHAPE) {\n                        item.mObjectSensors.forEach(function(sensor) {\n                            sensor.transform('R0T' + dx + ',' + dy);\n                            var bb = sensor.getBBox();\n                            sensor.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n                        });\n                    }\n                });\n            } else if(this.objType === OBJECTS.SENSOR) {\n                this.transform('R0T' + dx + ',' + dy);\n                var bb = this.getBBox();\n                this.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n            } else if(this.objType === OBJECTS.EDGE) {\n                // Parent shape has selected\n                if(floor.mSelectedItems.collection.indexOf(this.parentShape) > -1) {\n                    this.resized = true;\n                    _self.setTransformForEdge(this, dx, dy);\n                } else {\n                    this.resized = false;\n                }\n            }\n        }\n\n        // Set variables\n        this.dx = dx;\n        this.dy = dy;\n    },\n    // fn onend\n    onEnd: function(e) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        if(!floor.g || (floor.g && !floor.g.verify(this))) {\n            return false;\n        }\n        if(_self.drawing !== true) {\n            return false;\n        }\n\n        var dx = this.dx;\n        var dy = this.dy;\n\n        if(toolIcons.isSelector && (dx != 0 || dy != 0)) {\n            if(this.objType === OBJECTS.TEXT || this.objType === OBJECTS.SHAPE) {\n                floor.mSelectedItems.forEach(function(item) {\n                    // Add stack list\n                    if(_self.setTransform(item, dx, dy)) {\n                        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, item, {\n                            dx: dx,\n                            dy: dy\n                        });\n\n                        // Set edge for shape\n                        if(item.objType === OBJECTS.SHAPE) {\n                            _self.setEdgePosition(item);\n                            _self.minSizeForZoneShape(item);\n                        }\n                    }\n                });\n            } else if(this.objType === OBJECTS.SENSOR) {\n                if(floor.g.contain(this.parentShape, this)) {\n                    // Add stack list\n                    if(_self.setTransform(this, dx, dy)) {\n                        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, this, {\n                            dx: dx,\n                            dy: dy,\n                            parentShape: this.parentShape\n                        });\n\n                        _self.minSizeForZoneShape(this.parentShape);\n                    }\n                } else {\n                    var bb = this.getBBox();\n                    var shape = _self.getShapeContainer({x: bb.x, y: bb.y, w: bb.width, h: bb.height});\n                    if(shape) {\n                        // Remove parent\n                        var parent = this.parentShape;\n                        parent.mObjectSensors.remove(this);\n                        _self.isEmptyShape(parent);\n                        if(_self.setTransform(this, dx, dy)) {\n                            // Set new parent\n                            this.parentShape = shape;\n                            shape.mObjectSensors.add(this);\n                            this.pathColor.attr({\n                                fill: utils.changeLuminosityOfHsl(shape.node.getAttribute('fill'), SITE_SETTING.luminosity)\n                            });\n                            _self.isEmptyShape(shape);\n\n                            // Chang info\n                            this.info.floorId = shape.info.floorId;\n                            this.info.zoneId = shape.info.zoneId;\n\n                            // Change zone parent for sensor in floor\n                            Signals.send(\"onSiteMenu\", {\n                                sensorId: this.info.type,\n                                from: parent.vals,\n                                to: shape.vals,\n                                method: STACK_METHODS.MOVE\n                            });\n\n                            // Add stack list\n                            STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, this, {\n                                dx: dx,\n                                dy: dy,\n                                parentShape: parent\n                            });\n\n                            // Calculator\n                            _self.minSizeForZoneShape(shape);\n                            _self.minSizeForZoneShape(parent);\n                        }\n                    } else {\n                        this.transform('R0T0,0');\n                        var bb = this.getBBox();\n                        this.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n                    }\n                }\n            } else if(this.objType === OBJECTS.EDGE) {\n                if(this.resized) {\n                    _self.setEdgePosition(this.parentShape);\n\n                    // Add stack list\n                    STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.RESIZE, this.parentShape, this.parentBBox);\n                }\n            }\n        }\n\n        // Reset variables\n        this.dx = 0;\n        this.dy = 0;\n        _self.currentItem = undefined;\n    },\n    // fn get position transform of element after moving\n    setTransform: function(item, dx, dy) {\n        var _self = siteGraphic,\n            bb = item.getBBox(),\n            limit = {\n                min: {x: bb.x, y: bb.y},\n                max: {x: bb.x + bb.width, y: bb.y + bb.height}\n            };\n\n        // entities only moving into limited area\n        if(!(0 < limit.min.x && 0 < limit.min.y && limit.max.x < _self.width && limit.max.y < _self.height)) {\n            item.transform('R0T0,0');\n            if(item.objType === OBJECTS.SHAPE) {\n                item.mObjectSensors.forEach(function(sensor) {\n                    sensor.transform('R0T0,0');\n                    var bb = sensor.getBBox();\n                    sensor.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n                });\n            } else if(item.objType === OBJECTS.SENSOR) {\n                var bb = item.getBBox();\n                item.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n            }\n            return false;\n        } else {\n            if(item.objType === OBJECTS.SHAPE) {\n                if(item.type === SHAPE_TYPES.ELLIPSE) {\n                    item.attr({\n                        cx: parseFloat(item.attr('cx')) + dx,\n                        cy: parseFloat(item.attr('cy')) + dy\n                    });\n                } else if(item.type === SHAPE_TYPES.POLYGON) {\n                    var path = Snap.parsePathString('M' + item.attr('points').toString() + 'Z'),\n                        points = [];\n                    for(var i = 0; i < path.length - 1; i++) {\n                        points.push(path[i][1] + dx, path[i][2] + dy)\n                    }\n                    item.attr('points', points);\n                } else {\n                    item.attr({\n                        x: parseFloat(item.attr('x')) + dx,\n                        y: parseFloat(item.attr('y')) + dy\n                    });\n                }\n                item.mObjectSensors.forEach(function(sensor) {\n                    _self.setTransform(sensor, dx, dy);\n                });\n                var box = item.getBBox();\n                item.info.x = box.x;\n                item.info.y = box.y;\n                item.info.w = box.width;\n                item.info.h = box.height;\n                item.transform('R0T0,0');\n            } else if(item.objType === OBJECTS.TEXT) {\n                item.attr({\n                    x: parseFloat(item.attr('x')) + dx,\n                    y: parseFloat(item.attr('y')) + dy\n                });\n                item.transform('R0T0,0');\n                item.info.x = parseFloat(item.attr('x'));\n                item.info.y = parseFloat(item.attr('y'));\n            } else if(item.objType === OBJECTS.SENSOR) {\n                item.attr({\n                    cx: parseFloat(item.attr('cx')) + dx,\n                    cy: parseFloat(item.attr('cy')) + dy\n                });\n                item.transform('R0T0,0');\n                var bb = item.getBBox();\n                item.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n                item.info.x = bb.x;\n                item.info.y = bb.y;\n            }\n        }\n        return true;\n    },\n    // fn set position of edge and parent shape for moving\n    setTransformForEdge: function(edge, dx, dy) {\n        var _self = siteGraphic,\n            zoneShape = edge.parentShape,\n            bb = zoneShape.getBBox(),\n            bbEdge = edge.getBBox(),\n            dx2 = dx - edge.dx,\n            dy2 = dy - edge.dy,\n            change = false;\n\n        if(zoneShape.type == SHAPE_TYPES.RECTANGLE) {\n            var dtx = bbEdge.x + dx2,\n                dty = bbEdge.y + dy2;\n\n            if(edge.edgeType == 'left') {\n                if(!!zoneShape.minSize && zoneShape.minSize.x != zoneShape.minSize.x2) {\n                    if(bb.x2 - dtx >= _self.configs.edge && dtx < zoneShape.minSize.x) {\n                        change = true;\n                    }\n                } else if(bb.x2 - dtx >= _self.configs.edge) {\n                    change = true;\n                }\n\n                if(change) {\n                    edge.attr('path', 'M' + dtx + ',' + bbEdge.y + 'L' + dtx + ',' + bbEdge.y2);\n                    zoneShape.attr({\n                        x: parseFloat(zoneShape.attr('x')) + dx2,\n                        width: parseFloat(zoneShape.attr('width')) - dx2\n                    });\n                }\n            } else if(edge.edgeType == 'right') {\n                if(!!zoneShape.minSize && zoneShape.minSize.x != zoneShape.minSize.x2) {\n                    if(dtx - bb.x >= _self.configs.edge && dtx > zoneShape.minSize.x2) {\n                        change = true;\n                    }\n                } else if(dtx - bb.x >= _self.configs.edge) {\n                    change = true;\n                }\n\n                if(change) {\n                    edge.attr('path', 'M' + dtx + ',' + bbEdge.y + 'L' + dtx + ',' + bbEdge.y2);\n                    zoneShape.attr({\n                        width: parseFloat(zoneShape.attr('width')) + dx2\n                    });\n                }\n            } else if(edge.edgeType == 'top') {\n                if(!!zoneShape.minSize && zoneShape.minSize.y != zoneShape.minSize.y2) {\n                    if(bb.y2 - dty >= _self.configs.edge && dty < zoneShape.minSize.y) {\n                        change = true;\n                    }\n                } else if(bb.y2 - dty >= _self.configs.edge) {\n                    change = true;\n                }\n\n                if(change) {\n                    edge.attr('path', 'M' + bbEdge.x + ',' + dty + 'L' + bbEdge.x2 + ',' + (bbEdge.y2 + dy2));\n                    zoneShape.attr({\n                        y: parseFloat(zoneShape.attr('y')) + dy2,\n                        height: parseFloat(zoneShape.attr('height')) - dy2\n                    });\n                }\n            } else if(edge.edgeType == 'bottom') {\n                if(!!zoneShape.minSize && zoneShape.minSize.y != zoneShape.minSize.y2) {\n                    if(dty - bb.y >= _self.configs.edge && dty > zoneShape.minSize.y2) {\n                        change = true;\n                    }\n                } else if(dty - bb.y >= _self.configs.edge) {\n                    change = true;\n                }\n\n                if(change) {\n                    edge.attr('path', 'M' + bbEdge.x + ',' + dty + 'L' + bbEdge.x2 + ',' + (bbEdge.y2 + dy2));\n                    zoneShape.attr({\n                        height: parseFloat(zoneShape.attr('height')) + dy2\n                    });\n                }\n            }\n        } else if(zoneShape.type == SHAPE_TYPES.ELLIPSE) {\n            var cx, cy, rx, ry, path;\n            if(edge.edgeType == 'topLeft') {\n                cx = parseFloat(zoneShape.attr('cx')) + dx2 / 2;\n                cy = parseFloat(zoneShape.attr('cy')) + dy2 / 2;\n                rx = parseFloat(zoneShape.attr('rx')) - dx2 / 2;\n                ry = parseFloat(zoneShape.attr('ry')) - dy2 / 2;\n                path = utils.ellipticalArcToPath(cx, cy, rx, ry, 270, 0);\n            } else if(edge.edgeType == 'topRight') {\n                cx = parseFloat(zoneShape.attr('cx')) + dx2 / 2;\n                cy = parseFloat(zoneShape.attr('cy')) + dy2 / 2;\n                rx = parseFloat(zoneShape.attr('rx')) + dx2 / 2;\n                ry = parseFloat(zoneShape.attr('ry')) - dy2 / 2;\n                path = utils.ellipticalArcToPath(cx, cy, rx, ry, 0, 90);\n            } else if(edge.edgeType == 'bottomLeft') {\n                cx = parseFloat(zoneShape.attr('cx')) + dx2 / 2;\n                cy = parseFloat(zoneShape.attr('cy')) + dy2 / 2;\n                rx = parseFloat(zoneShape.attr('rx')) - dx2 / 2;\n                ry = parseFloat(zoneShape.attr('ry')) + dy2 / 2;\n                path = utils.ellipticalArcToPath(cx, cy, rx, ry, 180, 270);\n            } else if(edge.edgeType == 'bottomRight') {\n                cx = parseFloat(zoneShape.attr('cx')) + dx2 / 2;\n                cy = parseFloat(zoneShape.attr('cy')) + dy2 / 2;\n                rx = parseFloat(zoneShape.attr('rx')) + dx2 / 2;\n                ry = parseFloat(zoneShape.attr('ry')) + dy2 / 2;\n                path = utils.ellipticalArcToPath(cx, cy, rx, ry, 90, 180);\n            }\n\n            if(!!zoneShape.minSize && zoneShape.minSize.x != zoneShape.minSize.x2 && zoneShape.minSize.y != zoneShape.minSize.y2) {\n                var tPath1 = utils.rectToPath(zoneShape.minSize.x, zoneShape.minSize.y, zoneShape.minSize.x2, zoneShape.minSize.y2);\n                var tPath2 = utils.ellipseToPath(cx, cy, rx, ry);\n\n                var dots = Snap.path.intersection(tPath1, tPath2);\n                if(dots.length == 0) {\n                    change = true;\n                }\n            } else if(rx * 2 >= _self.configs.edge && ry * 2 >= _self.configs.edge) {\n                change = true;\n            }\n\n            if(change) {\n                edge.attr('path', path);\n                zoneShape.attr({cx: cx, cy: cy, rx: rx, ry: ry});\n            }\n        } else if(zoneShape.type == SHAPE_TYPES.POLYGON) {\n            var pos = edge.pos;\n            var properties = _self.getPropertiesOfPolygonPoints(zoneShape);\n            var paths = properties.paths, points = properties.points;\n            var start = paths[pos].start, end = paths[pos].end;\n\n            var startPos = _self.getIndexOfPoints(points, start);\n            var endPost = _self.getIndexOfPoints(points, end);\n\n            if(startPos > -1 && endPost > -1) {\n                points[startPos].x += dx2;\n                points[startPos].y += dy2;\n                points[endPost].x += dx2;\n                points[endPost].y += dy2;\n\n                if(!!zoneShape.minSize && zoneShape.minSize.x != zoneShape.minSize.x2 && zoneShape.minSize.y != zoneShape.minSize.y2) {\n                    var tPath1 = utils.rectToPath(zoneShape.minSize.x, zoneShape.minSize.y, zoneShape.minSize.x2, zoneShape.minSize.y2);\n                    var tPath2 = utils.pointsToPath(points);\n\n                    var dots = Snap.path.intersection(tPath1, tPath2);\n                    if(!_self.hasErrorPointsOfPolygon(points) && dots.length == 0) {\n                        change = true;\n                    }\n                } else if(!_self.hasErrorPointsOfPolygon(points)) {\n                    change = true;\n                }\n\n                if(change) {\n                    edge.attr('path', 'M' + points[startPos].x.toString() + ',' + points[startPos].y.toString() + 'L' + points[endPost].x.toString() + ',' + points[endPost].y.toString());\n\n                    var path = [];\n                    for(var i = 0; i < points.length; i++) {\n                        path.push(points[i].x.toString(), points[i].y.toString());\n                    }\n\n                    zoneShape.attr('points', path.join(' '));\n                }\n            }\n        }\n\n        edge.dx = dx;\n        edge.dy = dy;\n    },\n    getIndexOfPoints: function(points, p) {\n        for(var i = 0; i < points.length; i++) {\n            if(points[i].x == p.x && points[i].y == p.y) {\n                return i;\n            }\n        }\n\n        return -1;\n    },\n    /***\n     * Get Properties Of Polygon\n     * @param shape (polygon)\n     * @returns {{center: {x: number, y: number}, points: *, paths: Array}}\n     */\n    getPropertiesOfPolygonPoints: function(shape) {\n        var px = [], py = [];\n        var pCenter = {x: 0, y: 0};\n        var paths = [], points = shape.attr('points');\n        for(var i = 0; i < points.length; i++) {\n            if(i % 2 == 0) {\n                px.push(parseFloat(points[i]));\n            } else {\n                py.push(parseFloat(points[i]));\n            }\n        }\n\n        points = [];\n        for(var i = 0; i < px.length; i++) {\n            points.push({x: px[i], y: py[i]});\n            if(i < px.length - 1) {\n                paths.push({\n                    start: {x: px[i], y: py[i]},\n                    end: {x: px[i + 1], y: py[i + 1]}\n                });\n            } else {\n                paths.push({\n                    start: {x: px[i], y: py[i]},\n                    end: {x: px[0], y: py[0]}\n                });\n            }\n        }\n\n        pCenter.x = enyo.clone(px).sort()[Math.ceil(px.length / 2) - 1];\n        pCenter.y = enyo.clone(py).sort()[Math.ceil(py.length / 2) - 1];\n\n        return {\n            center: pCenter,\n            points: points,\n            paths: paths\n        }\n    },\n    getShapeContainer: function(options) {\n        var floor = this.floors[this.currentTagName];\n        for(var i = 0; i < floor.mObjectShapes.count; i++) {\n            var shape = floor.mObjectShapes.item(i);\n            if(shape.type === SHAPE_TYPES.ELLIPSE) {\n                var path1 = utils.ellipseToPath(parseFloat(shape.attr('cx')), parseFloat(shape.attr('cy')), parseFloat(shape.attr('rx')), parseFloat(shape.attr('ry'))),\n                    path2 = utils.ellipseToPath(options.x + options.w / 2, options.y + options.h / 2, options.w / 2, options.h / 2);\n                if(Snap.path.isPointInside(path1, options.x + options.w / 2, options.y + options.h / 2) && Snap.path.intersection(path1, path2).length == 0) {\n                    return shape;\n                }\n            } else if(shape.type == SHAPE_TYPES.POLYGON) {\n                var path1 = 'M' + shape.attr('points').toString() + 'Z',\n                    path2 = utils.ellipseToPath(options.x + options.w / 2, options.y + options.h / 2, options.w / 2, options.h / 2);\n                if(Snap.path.isPointInside(path1, options.x + options.w / 2, options.y + options.h / 2) && Snap.path.intersection(path1, path2).length == 0) {\n                    return shape;\n                }\n            } else { // rect\n                var bbox = shape.getBBox();\n                if(Snap.path.isPointInsideBBox(bbox, options.x, options.y) &&\n                    Snap.path.isPointInsideBBox(bbox, options.x, options.y + options.h) &&\n                    Snap.path.isPointInsideBBox(bbox, options.x + options.w, options.y) &&\n                    Snap.path.isPointInsideBBox(bbox, options.x + options.w, options.y + options.h)) {\n                    return shape;\n                }\n            }\n        }\n        return false;\n    },\n    getShapeByAvailableDraw: function(options) {\n        var floor = this.floors[this.currentTagName];\n        if(!!floor) {\n            for(var i = 0; i < floor.mObjectShapes.count; i++) {\n                if(floor.mObjectShapes.collection[i].vals.floorId === options.floorId &&\n                    floor.mObjectShapes.collection[i].vals.zoneId === options.zoneId) {\n                    return floor.mObjectShapes.item(i);\n                }\n            }\n        }\n        return false;\n    },\n    // Check shape exist sensor\n    isEmptyShape: function(shape) {\n        if(shape.mObjectSensors.count > 0) {\n            shape.attr({\n                'fill-opacity': this.configs.opacity\n            });\n            return true\n        } else {\n            shape.attr({\n                'fill-opacity': this.mAttributes['fill-opacity']\n            });\n            return false;\n        }\n    },\n    // Check zone created\n    isZoneCreated: function() {\n        if(this.panel.zoneExisting(this.availableDraw.floorId, this.availableDraw.zoneId)) {\n            var floor = this.floors[this.currentTagName];\n            // Check shape existing\n            for(var i = 0; i < floor.mObjectShapes.count; i++) {\n                if(floor.mObjectShapes.collection[i].vals.floorId === this.availableDraw.floorId &&\n                    floor.mObjectShapes.collection[i].vals.zoneId === this.availableDraw.zoneId) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return 0;\n    },\n    //Check error for points of pologon\n    hasErrorPointsOfPolygon: function(points) {\n        var _self = siteGraphic, prop;\n        points = enyo.cloneArray(points);\n        if(points.length >= 3) {\n            points.push(points[0]);\n            points.push(points[1]);\n            for(var i = 0; i <= points.length - 3; i++) {\n                prop = utils.getPropertiesThreePoints(points[i], points[i + 1], points[i + 2]);\n                if(\n                    prop.angle < _self.configs.angle ||\n                    prop.d12 < _self.configs.edge ||\n                    prop.d13 < _self.configs.edge ||\n                    prop.d23 < _self.configs.edge\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    },\n    // fn deselect current Sensor\n    deSelectedSensor: function() {\n        var floor = this.floors[this.currentTagName];\n        if(typeof floor.currentSensor !== \"undefined\") {\n            floor.currentSensor.selectChange(false);\n            floor.currentSensor = undefined;\n        }\n    },\n    // fn delete selected items\n    deleteSelectedItems: function() {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n\n        // Remove from mSelectedItems\n        if(floor.mSelectedItems.count != 0) {\n            floor.mSelectedItems.forEach(function(item) {\n                if(item.objType == OBJECTS.SHAPE) {\n                    // Add stack list\n                    var sensors = [];\n                    item.mObjectSensors.forEach(function(sensor) {\n                        sensors.push({\n                            item: sensor.info,\n                            x: parseFloat(sensor.attr('x')),\n                            y: parseFloat(sensor.attr('y'))\n                        });\n                    });\n\n                    STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.REMOVE, item.info, {sensors: sensors});\n\n                    _self.removeShape(item);\n                } else if(item.objType == OBJECTS.TEXT) {\n                    // Add stack list\n                    STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.REMOVE, item.info);\n\n                    floor.g.removeText(item.info);\n                    floor.textGroup.length--;\n                }\n            });\n            // Reset\n            floor.mSelectedItems = new Collection();\n        }\n\n        // Remove current sensor\n        if(floor.currentSensor !== undefined) {\n            // Add stack list\n            STACK_LIST.addStack(\n                _self.currentTagName,\n                _self.panel.name,\n                STACK_TYPES.SVG,\n                STACK_METHODS.REMOVE,\n                floor.currentSensor.info\n            );\n\n            _self.removeSensor(floor.currentSensor);\n        }\n        return false;\n    },\n    // fn get path from xml format\n    getDescriptionPath: function(url) {\n        var doc = utils.httpGetXml(url);\n        var path = doc.getElementsByTagName('path')[0];\n        var d = path.getAttribute('d');\n\n        return d;\n    },\n    // fn draw shape\n    drawShape: function(object) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName],\n            shape = false;\n        if(object.type === SHAPE_TYPES.RECTANGLE) {\n            if(object.w < _self.configs.edge || object.h < _self.configs.edge) return false; // Check condition\n            shape = floor.g.rect(object.x, object.y, object.w, object.h).attr(_self.mAttributes);\n        } else if(object.type === SHAPE_TYPES.CIRCLE) {\n            if(object.w < _self.configs.edge || object.h < _self.configs.edge) return false; // Check condition\n            shape = floor.g.ellipse(object.x + object.w / 2, object.y + object.h / 2, object.w / 2, object.h / 2).attr(_self.mAttributes);\n        } else if(object.type === SHAPE_TYPES.POLYGON) {\n            shape = floor.g.polygon(object.points).attr(_self.mAttributes);\n        }\n\n        shape.selectChange = function(flag) {\n            if(flag) {\n                this.attr({\n                    filter: \"url(#\" + _self.currentTagName + \"_hlShape)\",\n                    stroke: \"#389CFF\",\n                    'stroke-width': 1\n                })\n            } else {\n                this.attr({\n                    filter: \"none\",\n                    stroke: \"#ffffff\",\n                    'stroke-width': 0.001\n                })\n            }\n        };\n\n        object.floorId = _self.availableDraw.floorId;\n        object.zoneId = _self.availableDraw.zoneId;\n        object.color = _self.availableDraw.color;\n\n        shape.info = object;\n        shape.id = object.id;\n        shape.vals = _self.availableDraw;\n        shape.objType = OBJECTS.SHAPE;\n        shape.mObjectSensors = new Collection();\n\n        // Draw edge for resize\n        _self.drawEdge(shape);\n\n        // Select zone\n        if(IS_TOUCH) { // On Mobile\n            shape.touchstart(function() {\n                Signals.send(\"onSiteMenu\", {\n                    vals: this.vals,\n                    method: STACK_METHODS.TAP\n                });\n            });\n        } else { // On Desktop\n            shape.click(function() {\n                Signals.send(\"onSiteMenu\", {\n                    vals: this.vals,\n                    method: STACK_METHODS.TAP\n                });\n            });\n        }\n\n        if(!IS_TOUCH) {\n            shape.hover(_self.fIn, _self.fOut);\n        }\n\n        shape.drag(_self.onMove, _self.onStart, _self.onEnd);\n\n        return shape;\n    },\n    // fn draw edge for shape (selectable and draggable)\n    drawEdge: function(shape) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n\n        if(shape.type == SHAPE_TYPES.RECTANGLE) {\n            // Edge Left\n            shape.edgeLeft = floor.g.path('M0,0').attr({\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'e-resize'\n            });\n            shape.edgeLeft.parentShape = shape;\n            shape.edgeLeft.objType = OBJECTS.EDGE;\n            shape.edgeLeft.edgeType = 'left';\n            shape.edgeLeft.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeLeft);\n\n            // Edge Right\n            shape.edgeRight = floor.g.path('M0,0').attr({\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'e-resize'\n            });\n            shape.edgeRight.parentShape = shape;\n            shape.edgeRight.objType = OBJECTS.EDGE;\n            shape.edgeRight.edgeType = 'right';\n            shape.edgeRight.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeRight);\n\n            // Edge Top\n            shape.edgeTop = floor.g.path('M0,0').attr({\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'n-resize'\n            });\n            shape.edgeTop.parentShape = shape;\n            shape.edgeTop.objType = OBJECTS.EDGE;\n            shape.edgeTop.edgeType = 'top';\n            shape.edgeTop.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeTop);\n\n            // Edge Bottom\n            shape.edgeBottom = floor.g.path('M0,0').attr({\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'n-resize'\n            });\n            shape.edgeBottom.parentShape = shape;\n            shape.edgeBottom.objType = OBJECTS.EDGE;\n            shape.edgeBottom.edgeType = 'bottom';\n            shape.edgeBottom.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeBottom);\n        } else if(shape.type == SHAPE_TYPES.ELLIPSE) {\n            // Edge Top Left\n            shape.edgeTopLeft = floor.g.path('M0,0').attr({\n                fill: 'none',\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'nwse-resize'\n            });\n            shape.edgeTopLeft.parentShape = shape;\n            shape.edgeTopLeft.objType = OBJECTS.EDGE;\n            shape.edgeTopLeft.edgeType = 'topLeft';\n            shape.edgeTopLeft.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeTopLeft);\n\n            // Edge Top Right\n            shape.edgeTopRight = floor.g.path('M0,0').attr({\n                fill: 'none',\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'ne-resize'\n            });\n            shape.edgeTopRight.parentShape = shape;\n            shape.edgeTopRight.objType = OBJECTS.EDGE;\n            shape.edgeTopRight.edgeType = 'topRight';\n            shape.edgeTopRight.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeTopRight);\n\n            // Edge Bottom Left\n            shape.edgeBottomLeft = floor.g.path('M0,0').attr({\n                fill: 'none',\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'sw-resize'\n            });\n            shape.edgeBottomLeft.parentShape = shape;\n            shape.edgeBottomLeft.objType = OBJECTS.EDGE;\n            shape.edgeBottomLeft.edgeType = 'bottomLeft';\n            shape.edgeBottomLeft.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeBottomLeft);\n\n            // Edge Bottom Right\n            shape.edgeBottomRight = floor.g.path('M0,0').attr({\n                fill: 'none',\n                stroke: 'transparent',\n                'stroke-width': 5,\n                cursor: 'se-resize'\n            });\n            shape.edgeBottomRight.parentShape = shape;\n            shape.edgeBottomRight.objType = OBJECTS.EDGE;\n            shape.edgeBottomRight.edgeType = 'bottomRight';\n            shape.edgeBottomRight.drag(_self.onMove, _self.onStart, _self.onEnd);\n            floor.edgeGroup.add(shape.edgeBottomRight);\n        } else if(shape.type == SHAPE_TYPES.POLYGON) {\n            for(var i = 0; i < shape.attr('points').length / 2; i++) {\n                shape['path' + i] = floor.g.path('M0,0').attr({\n                    stroke: 'transparent',\n                    'stroke-width': 5\n                });\n                shape['path' + i].parentShape = shape;\n                shape['path' + i].objType = OBJECTS.EDGE;\n                shape['path' + i].drag(_self.onMove, _self.onStart, _self.onEnd);\n                floor.edgeGroup.add(shape['path' + i]);\n            }\n        }\n\n        _self.setEdgePosition(shape);\n    },\n    // fn draw sensor for site builder\n    drawSensor: function(object) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName],\n            pathColor = floor.g.path(_self.getDescriptionPath(object.url));\n        pathColor.transform(\"T\" + object.x + \",\" + object.y);\n\n        var sensor = floor.g.ellipse(object.x + object.w / 2, object.y + object.w / 2, object.w / 2, object.h / 2).attr({\n            opacity: 0.001,\n            fill: \"#000000\"\n        });\n        sensor.pathColor = pathColor;\n\n        // Disable sensor\n        if(!this.drawing) {\n            sensor.attr(\"display\", \"none\");\n            sensor.pathColor.attr(\"display\", \"none\");\n        }\n\n        sensor.selectChange = function(flag) {\n            if(flag) {\n                //this.pathColor.attr({filter: \"url(#\" + siteGraphic.currentTagName+\"_hlSensor)\"});\n            } else {\n                //this.attr({filter: \"none\"});\n            }\n        };\n\n        sensor.id = object.id;\n        sensor.info = object;\n        sensor.objType = OBJECTS.SENSOR;\n\n        if(!IS_TOUCH) {\n            sensor.hover(_self.fIn, _self.fOut);\n        }\n        sensor.drag(_self.onMove, _self.onStart, _self.onEnd);\n\n        // Hack to add breadcrumb percentage\n        var percent = 0;\n        percent = PROGRESS['SITE_BUILDER'];\n        percent += 5;\n        if(PROGRESS['SITE_BUILDER'] < 100) {\n            Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SITE, key: 'SITE_BUILDER', value: percent});\n        } else {\n            PROGRESS['SITE_BUILDER'] = 100;\n        }\n        // END HACK\n\n        return sensor;\n    },\n    // fn create shape (for zone)\n    createShape: function(options) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n\n        // Check shape existing\n        if(_self.isZoneCreated() === false) {\n            var shape = new Shape(options.type, options.x, options.y, options.w, options.h, options.points);\n            floor.mShapes.add(shape, true);\n            var item = _self.drawShape(shape);\n            if(item) {\n                floor.mObjectShapes.add(item);\n                floor.shapeGroup.add(item);\n                floor.shapeGroup.length++;\n\n                // Add to task list\n                STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.CREATE, item);\n\n                // Send zone created\n                Signals.send(\"onSiteZoneCreated\", {\n                    floorId: _self.availableDraw.floorId,\n                    zoneId: _self.availableDraw.zoneId,\n                    color: _self.availableDraw.color\n                });\n\n                // Check queues\n                var queues = [];\n                for(var i = 0; i < _self.queues.length; i++) {\n                    if(_self.queues[i].floorId == _self.availableDraw.floorId && _self.queues[i].zoneId == _self.availableDraw.zoneId) {\n                        _self.createSensor2(_self.queues[i]);\n                    } else {\n                        queues.push(_self.queues[i]);\n                    }\n                }\n                //_self.queues = queues;\n            } else {\n                floor.mShapes.remove(shape);\n            }\n        } else {\n            //Signals.send(\"onNotification\", {method: \"message\", message: LABELS.siteBuilder.zoneExisting});\n        }\n    },\n    // fn create sensor\n    createSensor: function(options) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n\n        options.x = options.x * floor.g.scale + floor.g.getCurrentPosition().x;\n        options.y = options.y * floor.g.scale + floor.g.getCurrentPosition().y;\n\n        var zoneShape = _self.getShapeContainer(options);\n        if(!!zoneShape) {\n            var sens = new Sensor(options.sensorId, options.name, options.url, options.x, options.y, options.w, options.h);\n            sens.floorId = zoneShape.info.floorId;\n            sens.zoneId = zoneShape.info.zoneId;\n\n            floor.mSensors.add(sens, true);\n\n            var objectSensor = this.drawSensor(sens);\n            objectSensor.parentShape = zoneShape;\n\n            zoneShape.mObjectSensors.add(objectSensor);\n\n            floor.sensorGroup.add(objectSensor.pathColor);\n            floor.sensorGroup.add(objectSensor);\n            floor.sensorGroup.length++;\n\n            objectSensor.pathColor.attr({\n                fill: utils.changeLuminosityOfHsl(zoneShape.node.getAttribute('fill'), SITE_SETTING.luminosity)\n            });\n\n            _self.isEmptyShape(zoneShape);\n            _self.minSizeForZoneShape(zoneShape);\n\n            // Add sensor to sensor list\n            Signals.send(\"onSiteMenu\", {\n                sensorId: options.sensorId,\n                name: options.name,\n                classes: options.classes,\n                kind: options.kind,\n                type: options.type,\n                url: options.url,\n                w: options.w,\n                h: options.h,\n                vals: zoneShape.vals,\n                method: STACK_METHODS.CREATE,\n                objectSensor: objectSensor\n            });\n\n            return true;\n        }\n\n        return false;\n    },\n    // fn create sensor by add list sensor\n    createSensor2: function(options) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName],\n            zoneShape;\n        if(floor) {\n            options.w = options.w * floor.g.scale;\n            options.h = options.h * floor.g.scale;\n            zoneShape = _self.getShapeByAvailableDraw(options);\n        }\n\n        if(!!zoneShape) {\n            var bb = zoneShape.getBBox();\n            //*** Get random x, y\n            //options.x = 0;\n            //options.y = 0;\n            //\n            function checkInline() {\n                if(zoneShape.type == SHAPE_TYPES.ELLIPSE) {\n                    var path1 = utils.ellipseToPath(parseFloat(zoneShape.attr('cx')), parseFloat(zoneShape.attr('cy')), parseFloat(zoneShape.attr('rx')), parseFloat(zoneShape.attr('ry'))),\n                        path2 = utils.ellipseToPath(options.x + options.w / 2, options.y + options.h / 2, options.w / 2, options.h / 2);\n                    if(Snap.path.isPointInside(path1, options.x + options.w / 2, options.y + options.h / 2) && Snap.path.intersection(path1, path2).length == 0) {\n                        return true;\n                    }\n                } else if(zoneShape.type == SHAPE_TYPES.POLYGON) {\n                    var path1 = 'M' + zoneShape.attr('points').toString() + 'Z',\n                        path2 = utils.ellipseToPath(options.x + options.w / 2, options.y + options.h / 2, options.w / 2, options.h / 2);\n                    if(Snap.path.isPointInside(path1, options.x + options.w / 2, options.y + options.h / 2) && Snap.path.intersection(path1, path2).length == 0) {\n                        return true;\n                    }\n                } else {\n                    if(Snap.path.isPointInsideBBox(bb, options.x, options.y) &&\n                        Snap.path.isPointInsideBBox(bb, options.x, options.y + options.h) &&\n                        Snap.path.isPointInsideBBox(bb, options.x + options.w, options.y) &&\n                        Snap.path.isPointInsideBBox(bb, options.x + options.w, options.y + options.h)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            //*** Get point center\n            options.x = bb.cx - options.w / 2;\n            options.y = bb.cy - options.h / 2;\n\n            if(zoneShape.type == SHAPE_TYPES.POLYGON) {\n                do {\n                    options.x = utils.getRandomInt(bb.x, bb.x2 - options.w);\n                    options.y = utils.getRandomInt(bb.y, bb.y2 - options.h);\n                } while(!checkInline());\n            }\n\n            var sens = new Sensor(options.sensorId, options.name, options.url, options.x, options.y, options.w, options.h);\n            sens.floorId = zoneShape.info.floorId;\n            sens.zoneId = zoneShape.info.zoneId;\n\n            floor.mSensors.add(sens, true);\n\n            var objectSensor = _self.drawSensor(sens);\n            objectSensor.parentShape = zoneShape;\n\n            zoneShape.mObjectSensors.add(objectSensor);\n\n            floor.sensorGroup.add(objectSensor.pathColor);\n            floor.sensorGroup.add(objectSensor);\n            floor.sensorGroup.length++;\n\n            objectSensor.pathColor.attr({\n                fill: utils.changeLuminosityOfHsl(zoneShape.node.getAttribute('fill'), SITE_SETTING.luminosity)\n            });\n\n            _self.isEmptyShape(zoneShape);\n            _self.minSizeForZoneShape(zoneShape);\n\n            return objectSensor;\n        } else {\n            options.w = options.w / _self.scaleX;\n            options.h = options.h / _self.scaleY;\n            _self.queues.push(options);\n\n            return options;\n        }\n\n        return true;\n    },\n    // fn create polygon\n    createPolygon: function() {\n        var _self = siteGraphic;\n        if(!_self.hasErrorPointsOfPolygon(GB.points)) {\n            var points = [];\n            for(var i = 0; i < GB.points.length; i++) {\n                points.push(GB.points[i].x, GB.points[i].y)\n            }\n            _self.createShape({\n                type: SHAPE_TYPES.POLYGON,\n                points: points\n            });\n        }\n        if(_self.selectedArea.shape !== undefined) {\n            GB.points = new Array();\n            _self.selectedArea.shape.remove();\n            _self.selectedArea.shape = undefined;\n        }\n    },\n    // fn remove queues\n    removeQueues: function(options) {\n        var _self = siteGraphic;\n        for(var i = 0; i < _self.queues.length; i++) {\n            if(_self.queues[i].floorId == options.floorId && _self.queues[i].zoneId == options.zoneId && _self.queues[i].type == options.type) {\n                _self.queues.splice(i, 1);\n                break;\n            }\n        }\n    },\n    // fn remove sensor\n    removeSensor: function(item, isSignal) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        // Remove info\n        floor.mSensors.remove(item);\n        // Remove object\n        item.parentShape.mObjectSensors.remove(item);\n        item.pathColor.remove();\n        item.remove();\n        floor.sensorGroup.length--;\n\n        // Remove sensor from zone (menu)\n        if(isSignal !== false) {\n            Signals.send(\"onSiteMenu\", {\n                sensorId: item.info.type,\n                vals: item.parentShape.vals,\n                method: STACK_METHODS.DELETE\n            });\n        }\n    },\n    // fn Remove Sensor From Enyo\n    removeSensorByObject: function(sensorObject) {\n        if(!!sensorObject.node) { // SVG\n            this.removeSensor(sensorObject, false);\n        } else { // Remove Queues\n            this.removeQueues(sensorObject);\n        }\n    },\n    // fn remove sensor by list sensor\n    removeSensorByOption: function(options) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName],\n            shape;\n        if(floor) {\n            shape = _self.getShapeByAvailableDraw(options);\n        }\n        if(!!shape) {\n            for(var i = 0; i < shape.mObjectSensors.count; i++) {\n                if(shape.mObjectSensors.collection[i].info.type === options.sensorId) {\n                    // Add to Stack\n                    STACK_LIST.addStack(\n                        _self.currentTagName,\n                        _self.panel.name,\n                        STACK_TYPES.SVG,\n                        STACK_METHODS.REMOVE,\n                        shape.mObjectSensors.collection[i].info\n                    );\n\n                    _self.removeSensor(shape.mObjectSensors.collection[i], false);\n                    break;\n                }\n            }\n        }\n    },\n    // fn remove shape\n    removeShape: function(item) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        // Send zone removed\n        Signals.send(\"onSiteZoneRemoved\", {\n            floorId: item.vals.floorId,\n            zoneId: item.vals.zoneId\n        });\n        // Remove info\n        floor.mShapes.remove(item);\n        // Remove object\n        floor.mObjectShapes.forEach(function(shape) {\n            if(shape === item) {\n                // Remove sensor children\n                shape.mObjectSensors.forEach(function(sensor) {\n                    sensor.pathColor.remove();\n                    sensor.remove();\n                    floor.sensorGroup.length--;\n                });\n                // Remove Edge\n                _self.removeEdge(shape);\n                // Empty\n                shape.mObjectSensors = new Collection();\n                // Remove shape parent\n                shape.remove();\n            }\n        });\n        // Remove object parent\n        floor.mObjectShapes.remove(item);\n        floor.shapeGroup.length--;\n    },\n    // fn remove edge\n    removeEdge: function(shape) {\n        if(shape.type == SHAPE_TYPES.RECTANGLE) {\n            shape.edgeLeft.remove();\n            shape.edgeRight.remove();\n            shape.edgeTop.remove();\n            shape.edgeBottom.remove();\n        } else if(shape.type == SHAPE_TYPES.ELLIPSE) {\n            shape.edgeTopLeft.remove();\n            shape.edgeTopRight.remove();\n            shape.edgeBottomLeft.remove();\n            shape.edgeBottomRight.remove();\n        } else if(shape.type == SHAPE_TYPES.POLYGON) {\n            for(var i = 0; i < shape.attr('points').length / 2; i++) {\n                shape['path' + i].remove();\n            }\n        }\n    },\n    // fn resize shape\n    resizeShape: function(shape, option) {\n        var _self = siteGraphic;\n\n        if(shape.type == SHAPE_TYPES.RECTANGLE) {\n            shape.attr({\n                x: option.x,\n                y: option.y,\n                width: option.width,\n                height: option.height\n            });\n        } else if(shape.type == SHAPE_TYPES.ELLIPSE) {\n            shape.attr({\n                cx: option.cx,\n                cy: option.cy,\n                rx: option.rx,\n                ry: option.ry\n            });\n        } else if(shape.type == SHAPE_TYPES.POLYGON) {\n            shape.attr('points', option.points);\n        }\n\n        _self.setEdgePosition(shape);\n    },\n    setEdgePosition: function(shape) {\n        var _self = siteGraphic;\n        var bb = shape.getBBox();\n\n        if(shape.type == SHAPE_TYPES.RECTANGLE) {\n            shape.edgeLeft.attr('path', 'M' + bb.x + ',' + bb.y + 'L' + bb.x + ',' + (bb.y + bb.h));\n            shape.edgeRight.attr('path', 'M' + (bb.x + bb.w) + ',' + bb.y + 'L' + (bb.x + bb.w) + ',' + (bb.y + bb.h));\n            shape.edgeTop.attr('path', 'M' + bb.x + ',' + bb.y + 'L' + (bb.x + bb.w) + ',' + bb.y);\n            shape.edgeBottom.attr('path', 'M' + bb.x + ',' + (bb.y + bb.h) + 'L' + (bb.x + bb.w) + ',' + (bb.y + bb.h));\n\n            // Update info\n            shape.info.x = parseFloat(shape.attr('x'));\n            shape.info.y = parseFloat(shape.attr('y'));\n            shape.info.setWidth(shape.attr('width'));\n            shape.info.setHeight(shape.attr('height'));\n        } else if(shape.type == SHAPE_TYPES.ELLIPSE) {\n            var cx = parseFloat(shape.attr('cx'));\n            var cy = parseFloat(shape.attr('cy'));\n            var rx = parseFloat(shape.attr('rx'));\n            var ry = parseFloat(shape.attr('ry'));\n\n            shape.edgeTopLeft.attr('path', utils.ellipticalArcToPath(cx, cy, rx, ry, 270, 0));\n            shape.edgeTopRight.attr('path', utils.ellipticalArcToPath(cx, cy, rx, ry, 0, 90));\n            shape.edgeBottomLeft.attr('path', utils.ellipticalArcToPath(cx, cy, rx, ry, 180, 270));\n            shape.edgeBottomRight.attr('path', utils.ellipticalArcToPath(cx, cy, rx, ry, 90, 180));\n\n            // Update info\n            shape.info.cx = parseFloat(shape.attr('cx'));\n            shape.info.cy = parseFloat(shape.attr('cy'));\n            shape.info.rx = parseFloat(shape.attr('rx'));\n            shape.info.ry = parseFloat(shape.attr('ry'));\n            shape.info.x = bb.x;\n            shape.info.y = bb.y;\n            shape.info.setWidth(bb.width);\n            shape.info.setHeight(bb.height);\n        } else if(shape.type == SHAPE_TYPES.POLYGON) {\n            var direction, path, pH, cursor = '', edgeType = '';\n            var properties = _self.getPropertiesOfPolygonPoints(shape);\n            var center = properties.center, paths = properties.paths, points = properties.points;\n\n            for(var i = 0; i < paths.length; i++) {\n                path = 'M' + paths[i].start.x + ',' + paths[i].start.y + 'L' + paths[i].end.x + ',' + paths[i].end.y;\n\n                // Property\n                pH = utils.getPointOfPointToVector(center, paths[i].start, paths[i].end);\n                if(pH) {\n                    direction = utils.getDirection(center, pH);\n                    if(direction == 1) {\n                        cursor = 'ne-resize';\n                        edgeType = 'edgeTopRight';\n                    } else if(direction == 2) {\n                        cursor = 'se-resize';\n                        edgeType = 'edgeBottomRight';\n                    } else if(direction == 3) {\n                        cursor = 'sw-resize';\n                        edgeType = 'edgeBottomLeft';\n                    } else if(direction == 4) {\n                        cursor = 'nwse-resize';\n                        edgeType = 'edgeTopLeft';\n                    }\n                }\n\n                shape['path' + i].attr({path: path, cursor: cursor});\n                shape['path' + i].pos = i;\n                shape['path' + i].edgeType = edgeType;\n            }\n\n            shape.center = center;\n            shape.points = points;\n            shape.paths = paths;\n\n            // Update info\n            shape.info.points = shape.attr('points');\n            shape.info.x = bb.x;\n            shape.info.y = bb.y;\n            shape.info.setWidth(bb.width);\n            shape.info.setHeight(bb.height);\n        }\n    },\n    // Set AvailableDraw\n    setAvailableDraw: function(option) {\n        this.availableDraw = {\n            color: option.color ? option.color : '#FFFFFF',\n            floorId: option.floorId,\n            zoneId: option.zoneId\n        };\n    },\n    // Resize ViewPort\n    setSizeViewPort: function(width, height, callback) {\n        var _self = siteGraphic;\n        _self.scaleX = width / this.width;\n        _self.scaleY = height / this.height;\n        _self.width = width;\n        _self.height = height;\n\n        // Resize\n        for(var key in this.floors) {\n            _self.floors[key].g.setSize(width, height, true, callback);\n        }\n    },\n    // Scale ViewPort\n    setScaleViewPort: function(width, height, panelWidth, panelHeight) {\n        var _self = siteGraphic;\n        panelWidth = panelWidth || width;\n        panelHeight = panelHeight || height;\n        for(var key in this.floors) {\n            _self.floors[key].g.setScaleViewPort(width / panelWidth, height / panelHeight);\n        }\n    },\n    // Show content\n    setShowing: function(showing) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        if(!!floor) {\n            floor.g.setShowing(true);\n            //floor.mObjectShapes.forEach(function(item) {\n            //    if(showing) {\n            //        item.attr(\"display\", \"\");\n            //    } else {\n            //        item.attr(\"display\", \"none\");\n            //    }\n            //    item.mObjectSensors.forEach(function(sensor) {\n            //        if(showing) {\n            //            sensor.attr(\"display\", \"\");\n            //            sensor.pathColor.attr(\"display\", \"\");\n            //        } else {\n            //            sensor.attr(\"display\", \"none\");\n            //            sensor.pathColor.attr(\"display\", \"none\");\n            //        }\n            //    });\n            //});\n            //floor.mObjectText.forEach(function(item) {\n            //    if(showing) {\n            //        item.attr(\"display\", \"\");\n            //    } else {\n            //        item.attr(\"display\", \"none\");\n            //    }\n            //});\n        }\n    },\n    setBackground: function(image, width, height, panelWidth, panelHeight) {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        panelWidth = panelWidth || this.width;\n        panelHeight = panelHeight || this.height;\n\n        if(!!floor && !!image) {\n            if(!!width && !!height) {\n                var t = width / height;\n                width = panelWidth;\n                height = width / t;\n            } else {\n                width = panelWidth;\n                height = panelHeight;\n            }\n            var left = (panelWidth - width) / 2;\n            var top = (panelHeight - height) / 2;\n\n            // Set image background\n            floor.image = image;\n\n            // Check existing\n            if(typeof floor.background === 'object') floor.background.remove();\n\n            // Set background\n            floor.background = floor.g.image(image, left, top, width, height);\n            floor.background.objType = 'background';\n            floor.bgGroup.add(floor.background);\n\n            // Show content\n            if(!_self.drawing) _self.setShowing(false);\n\n            return true;\n        }\n\n        return false;\n    },\n    // has background\n    hasBackground: function(tagName) {\n        var _self = siteGraphic,\n            floor = _self.floors[tagName];\n        if(!!floor && !!floor.image) {\n            return true;\n        }\n        return false;\n    },\n    // Calculate available size of all sensor (in zone)\n    minSizeForZoneShape: function(zoneShape) {\n        var minSize = {x: 0, y: 0, x2: 0, y2: 0};\n        if(zoneShape.mObjectSensors.count > 0) {\n            var x = [], x2 = [], y = [], y2 = [];\n            zoneShape.mObjectSensors.forEach(function(sensor) {\n                var bb = sensor.getBBox();\n                x.push(bb.x);\n                y.push(bb.y);\n                x2.push(bb.x2);\n                y2.push(bb.y2);\n            });\n            x.sort();\n            y.sort();\n            x2.sort();\n            y2.sort();\n            minSize.x = x[0];\n            minSize.y = y[0];\n            minSize.x2 = x2[x2.length - 1];\n            minSize.y2 = y2[y2.length - 1];\n        }\n        zoneShape.minSize = minSize;\n    },\n    // Changing fill color for shape by options\n    adjustFillColor: function(floorId, zoneId, color) {\n        var _self = siteGraphic;\n        var floor = _self.floors[_self.currentTagName];\n        if(floor) {\n            var shape = _self.getShapeByAvailableDraw({floorId: floorId, zoneId: zoneId});\n            if(!!shape) {\n                var rgba = utils.getRgbaString(color, SITE_SETTING.transparency);\n                shape.attr({\n                    fill: rgba\n                });\n\n                shape.mObjectSensors.forEach(function(sensor) {\n                    sensor.pathColor.attr({\n                        fill: utils.changeLuminosityOfHsl(rgba, SITE_SETTING.luminosity)\n                    });\n                });\n\n                // Update info\n                shape.info.color = rgba;\n                shape.vals.color = rgba;\n\n                // Signal\n                Signals.send(\"onSiteZoneColorChanged\", {floorId: floorId, zoneId: zoneId, color: color});\n            }\n        }\n    },\n    selectShape: function(floorId, zoneId) {\n        var _self = siteGraphic;\n        var floor = _self.floors[_self.currentTagName];\n        if(floor) {\n            var shape = _self.getShapeByAvailableDraw({floorId: floorId, zoneId: zoneId});\n            floor.g.deSelectedItems();\n            if(!!shape) {\n                floor.mSelectedItems.add(shape);\n                shape.selectChange(true);\n                _self.panel.activeSelector();\n            }\n        }\n    },\n    // fn zoom\n    zoomViewPort: function() {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        return floor.g.zoom();\n    },\n    zoomToFit: function() {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        var availableSize = floor.g.calculateFitSize(floor.mShapes);\n        return floor.g.zoomFit(availableSize);\n    },\n    resetInputAndZoom: function() {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        if(floor) {\n            floor.g.turnOnTextBoxToAddText(false);\n            floor.g.zoomDefault();\n        }\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        var stack = STACK_LIST.getStack(_self.currentTagName);\n        if(stack) {\n            var item = stack.object;\n            if(stack.method === STACK_METHODS.CREATE) {\n                if(item.objType === OBJECTS.SHAPE) {\n                    _self.removeShape(item);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    floor.g.removeText(item);\n                    floor.textGroup.length--;\n                } else if(item.objType === OBJECTS.SENSOR) {\n                    _self.removeSensor(item);\n                }\n            } else if(stack.method === STACK_METHODS.MOVE) {\n                if(item.objType === OBJECTS.SHAPE) {\n                    if(item.type === SHAPE_TYPES.ELLIPSE) {\n                        item.attr({\n                            cx: parseFloat(item.attr('cx')) - stack.data.dx,\n                            cy: parseFloat(item.attr('cy')) - stack.data.dy\n                        });\n                    } else if(item.type === SHAPE_TYPES.POLYGON) {\n                        var path = Snap.parsePathString('M' + item.attr('points').toString() + 'Z'),\n                            points = [];\n                        for(var i = 0; i < path.length - 1; i++) {\n                            points.push(path[i][1] - stack.data.dx, path[i][2] - stack.data.dy)\n                        }\n                        item.attr('points', points);\n                    } else { // rect\n                        item.attr({\n                            x: parseFloat(item.attr('x')) - stack.data.dx,\n                            y: parseFloat(item.attr('y')) - stack.data.dy\n                        });\n                    }\n                    item.mObjectSensors.forEach(function(sensor) {\n                        sensor.attr({\n                            cx: parseFloat(sensor.attr('cx')) - stack.data.dx,\n                            cy: parseFloat(sensor.attr('cy')) - stack.data.dy\n                        });\n                        var bb = sensor.getBBox();\n                        sensor.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n                    });\n\n                    _self.setEdgePosition(item);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    item.attr({\n                        x: parseFloat(item.attr('x')) - stack.data.dx,\n                        y: parseFloat(item.attr('y')) - stack.data.dy\n                    });\n                    item.info.x = parseFloat(item.attr('x'));\n                    item.info.y = parseFloat(item.attr('y'));\n                } else if(item.objType === OBJECTS.SENSOR) {\n                    item.attr({\n                        cx: parseFloat(item.attr('cx')) - stack.data.dx,\n                        cy: parseFloat(item.attr('cy')) - stack.data.dy\n                    });\n                    var bb = item.getBBox();\n                    item.pathColor.transform('R0T' + bb.x + ',' + bb.y);\n                    if(item.parentShape != stack.data.parentShape) {\n                        //*** Remove old parent\n                        var parent = item.parentShape;\n                        parent.mObjectSensors.remove(item);\n                        siteGraphic.isEmptyShape(parent);\n\n                        //*** Change parent shape\n                        var shape = stack.data.parentShape;\n                        item.parentShape = shape;\n                        item.parentShape.mObjectSensors.add(item);\n                        item.pathColor.attr({\n                            fill: utils.changeLuminosityOfHsl(shape.node.getAttribute('fill'), SITE_SETTING.luminosity)\n                        });\n                        siteGraphic.isEmptyShape(shape);\n\n                        // Change zone parent for sensor in floor\n                        Signals.send(\"onSiteMenu\", {\n                            sensorId: item.info.type,\n                            from: parent.vals,\n                            to: shape.vals,\n                            method: STACK_METHODS.MOVE\n                        });\n                    }\n                }\n            } else if(stack.method === STACK_METHODS.REMOVE) {\n                if(item.objType === OBJECTS.SHAPE) {\n                    this.createShape(item);\n                    for(var i = 0; i < stack.data.sensors.length; i++) {\n                        this.createSensor(stack.data.sensors[i].item);\n                    }\n                } else if(item.objType === OBJECTS.TEXT) {\n                    floor.g.createText(item);\n                } else if(item.objType === OBJECTS.SENSOR) {\n                    this.createSensor(item);\n                }\n            } else if(stack.method === STACK_METHODS.RESIZE) {\n                if(item.objType === OBJECTS.SHAPE) {\n                    _self.resizeShape(item, stack.data);\n                }\n            }\n\n            STACK_LIST.removeStack(stack);\n        }\n    },\n    // Check inside draw panel\n    isInside: function() {\n        var _self = siteGraphic;\n        if(_self.drawing !== true) {\n            return false;\n        }\n        var floor = _self.floors[_self.currentTagName];\n        if(floor) {\n            return floor.g.isInside();\n        }\n        return false;\n    },\n    // active icons\n    activeIcons: function(keyOn, valOn, keyOff, valOff) {\n        if(keyOn === undefined) {\n            keyOn = 'isSelector';\n        }\n        if(valOn === undefined) {\n            valOn = true;\n        }\n        if(keyOff === undefined) {\n            keyOff = '';\n        }\n        if(valOff === undefined) {\n            valOff = false;\n        }\n        for(var key in toolIcons) {\n            if(key === keyOn) {\n                toolIcons[key] = valOn;\n            } else if(key === keyOff) {\n                toolIcons[key] = valOff;\n            } else {\n                toolIcons[key] = false;\n            }\n        }\n        var _self = siteGraphic,\n            floor = _self.floors[_self.currentTagName];\n        if(!!floor) {\n            // Disable selector and remove selected item\n            if(!toolIcons.isSelector && !toolIcons.isZoom && !toolIcons.isZoomToFit && !toolIcons.isMoving) {\n                floor.g.deSelectedItems();\n            }\n            // Disable sensor\n            _self.deSelectedSensor();\n            if(!toolIcons.isAddText) {\n                // Add Text and Off textBox\n                var input = floor.g.input;\n                if(!!input) {\n                    if(input.value.trim() != \"\") {\n                        floor.g.createText({\n                            x: input.x,\n                            y: input.y,\n                            text: input.value\n                        });\n                    } else {\n                        // Off input\n                        floor.g.turnOnTextBoxToAddText(false);\n                        // Reset input value\n                        input.value = \"\";\n                    }\n                }\n            }\n            // If zoom active\n            //floor.g.panZoom.enable(toolIcons.isZoom);\n            // if move active\n            //floor.g.panZoom.move(toolIcons.isMoving);\n\n            // Reset variable\n            GB.points = new Array();\n            if(_self.selectedArea.shape !== undefined) {\n                _self.selectedArea.shape.remove();\n                _self.selectedArea.shape = undefined;\n            }\n        }\n    }\n};\n","//\n\nvar utils = require('../../../common/services/utils.js');\nvar Graphic = require('../../../common/services/graphic.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar IS_TOUCH = require('enyo/platform').touch;\n\nvar eCloneArray = require('enyo/utils').cloneArray;\n\nvar systemGraphic = module.exports = {\n    configs: {\n        zoomStep: 0.2,\n        rotateSpeed: 100,\n        rotateDelay: 120,\n        offsetSpace: 3,\n        offsetHolder: 2,\n        holderSize: 20,\n        holderDistance: IS_TOUCH ? 30 : 20,\n        badgeRadius: 8,\n        badgeTextSize: 10,\n        badgeTextTop: 3,\n        badgeTotal: 1000,\n        layerTotal: 4,\n        connectorColor: '#0000ff'\n    },\n    panel: null,\n    width: 0,\n    height: 0,\n    isHolder: false, // when drag-drop on holder for create connection\n    isMulti: false,\n    isDrawArea: false,\n    // Size of available items.\n    availableSize: {x: 0, x2: 0, y: 0, y2: 0, height: 0, width: 0},\n    // kind of available items.\n    availableKind: {},\n    selectedArea: {\n        shape: undefined,\n        areaNormal: {fill: 'none', stroke: 'none'},\n        areaSelect: {fill: '#9CFFFD', 'fill-opacity': 0.1, stroke: '#389CFF'},\n        lineSelect: {stroke: '#389CFF'}\n    },\n    dummy: undefined,\n    currentTagName: null,\n    currentItem: undefined,\n    mEquipments: new Collection(),\n    mText: new Collection(),\n    mConnections: new Collection(),\n    mCurrentConnection: new Connection(),\n    mObjectEquipments: new Collection(),\n    mObjectText: new Collection(),\n    mObjectConnections: new Collection(),\n    mSelectedItems: new Collection(),\n    mAttributes: {fill: '#ffffff', stroke: '#389CFF', 'stroke-width': 1},\n    holderHighlight: [],\n    // Initiation\n    init: function(svg, input) {\n        this.currentTagName = svg.getId();\n        this.g = new Graphic(\n            svg.getId(),\n            input.getId(),\n            this,\n            this.width,\n            this.height,\n            this.configs,\n            this.onMouseDown,\n            this.onMouseMove,\n            this.onMouseUp,\n            this.onStart,\n            this.onMove,\n            this.onEnd,\n            this.fIn,\n            this.fOut\n        );\n        // Add highlight\n        this.g.appendChild(utils.makeHighlight(this.currentTagName + '_highlight'));\n        // Draw dummy\n        this.dummy = this.g.rect(0, 0, 4, 4).attr({fill: 'red', stroke: 'none', 'fill-opacity': .001});\n        this.dummy.id = -1000;\n        // Ready\n        this.loaded = true;\n    },\n    //=== Mouse events management on graphic panel ===\n    onMouseDown: function(e) {\n        var _self = systemGraphic;\n        _self.g.mMouse.start = _self.g.getPosition();\n        //_self.dummy.attr({x: _self.g.mMouse.start.x, y: _self.g.mMouse.start.y, 'stroke-width': 0.1});\n        //_self.g.mMouse.start = _self.g.mMouse.position;\n        if(!_self.currentItem && toolIcons.isSelector) {\n            _self.isDrawArea = true;\n            if(PL.keyCode != 16 && PL.keyCode != 17) { // shift or ctrl key\n                _self.g.deSelectedItems();\n            }\n        } else {\n            _self.isDrawArea = false;\n        }\n        // Set variables\n        _self.g.turnOnTextBoxToAddText(false);\n    },\n    onMouseMove: function(e) {\n        var _self = systemGraphic;\n        _self.g.mMouse.position = _self.g.getPosition();\n\n        if(_self.isDrawArea) {\n            var x = _self.g.mMouse.start.x > _self.g.mMouse.position.x ? _self.g.mMouse.position.x : _self.g.mMouse.start.x,\n                y = _self.g.mMouse.start.y > _self.g.mMouse.position.y ? _self.g.mMouse.position.y : _self.g.mMouse.start.y,\n                w = Math.abs(_self.g.mMouse.start.x - _self.g.mMouse.position.x),\n                h = Math.abs(_self.g.mMouse.start.y - _self.g.mMouse.position.y);\n            if(!_self.isHolder) {\n                if(_self.selectedArea.shape === undefined) { // draw multi select element area\n                    _self.selectedArea.shape = _self.g.rect(x, y, w, h).attr(_self.selectedArea.areaSelect);\n                } else {\n                    _self.selectedArea.shape.attr({\n                        x: x,\n                        y: y,\n                        width: w,\n                        height: h\n                    }).attr(_self.selectedArea.areaSelect);\n                }\n            }\n        }\n    },\n    onMouseUp: function(e) {\n        var _self = systemGraphic;\n        _self.g.mMouse.position = _self.g.getPosition();\n        // Reset variables\n        _self.isDrawArea = false;\n        if(_self.selectedArea.shape !== undefined) {\n            // Add equipment\n            _self.mObjectEquipments.forEach(function(item) {\n                if(PL.keyCode == 17) {\n                    if(_self.g.contain(_self.selectedArea.shape, item)) {\n                        if(_self.g.isSelectedItem(item)) {\n                            _self.g.deSelectedItem(item);\n                            item.selectChange(false);\n                        } else {\n                            _self.mSelectedItems.add(item);\n                            item.selectChange(true);\n                        }\n                    }\n                } else {\n                    if(_self.g.contain(_self.selectedArea.shape, item)) {\n                        if(!_self.g.isSelectedItem(item)) {\n                            _self.mSelectedItems.add(item);\n                            item.selectChange(true);\n                        }\n                    }\n                }\n            });\n            // Add text\n            _self.mObjectText.forEach(function(item) {\n                if(PL.keyCode == 17) {\n                    if(_self.g.contain(_self.selectedArea.shape, item)) {\n                        if(_self.g.isSelectedItem(item)) {\n                            _self.g.deSelectedItem(item);\n                            item.selectChange(false);\n                        } else {\n                            _self.mSelectedItems.add(item);\n                            item.selectChange(true);\n                        }\n                    }\n                } else {\n                    if(_self.g.contain(_self.selectedArea.shape, item)) {\n                        if(!_self.g.isSelectedItem(item)) {\n                            _self.mSelectedItems.add(item);\n                            item.selectChange(true);\n                        }\n                    }\n                }\n            });\n            // Remove select area\n            _self.selectedArea.shape.remove();\n            _self.selectedArea.shape = undefined;\n        }\n        // Disable Pullout\n        if(!_self.currentItem) {\n            _self.panel.$.TankSettingsPullout.toggle(false);\n            _self.panel.$.ZoneSettingsPullout.toggle(false);\n        }\n        // Enable textBox\n        if(toolIcons.isAddText) {\n            // Add Text and Off textBox\n            if(!!_self.g.input) {\n                if(_self.g.input.value.trim() != '') {\n                    _self.g.createText({\n                        x: _self.g.input.x,\n                        y: _self.g.input.y,\n                        text: _self.g.input.value\n                    });\n                }\n            }\n            // Edit Text\n            if(!!_self.currentItem) {\n                if(_self.currentItem.info.objType == OBJECTS.TEXT) {\n                    var pan = _self.g.getCurrentPosition();\n\n                    var left = (parseFloat(_self.currentItem.attr('x')) - pan.x) / _self.g.scale - parseInt(_self.g.input.getAttribute('width')) / 2;\n                    var top = (parseFloat(_self.currentItem.attr('y')) - pan.y) / _self.g.scale - parseInt(_self.g.input.getAttribute('height')) / 2;\n\n                    _self.g.input.x = parseFloat(_self.currentItem.attr('x'));\n                    _self.g.input.y = parseFloat(_self.currentItem.attr('y'));\n\n                    _self.g.input.style.left = left + 'px';\n                    _self.g.input.style.top = top + 'px';\n                    _self.g.input.style.display = 'block';\n                    _self.g.input.value = _self.currentItem.attr('text');\n                    _self.g.input.focus();\n\n                    _self.g.removeText(_self.currentItem);\n                    _self.currentItem = undefined;\n                }\n            } else {\n                _self.g.turnOnTextBoxToAddText(true);\n            }\n        }\n    },\n    //=== Graphics element mouse events ===\n    // fn fin\n    fIn: function(e) {\n        var _self = systemGraphic;\n        if(this.info !== null && this.info.objType === OBJECTS.EQUIPMENT) {\n            if(_self.g.isSelectedItem(this)) { // item is selecting\n                return;\n            }\n        }\n        _self.currentItem = this;\n    },\n    // fn fout\n    fOut: function() {\n        var _self = systemGraphic;\n        if(this.info !== null && this.info.objType === OBJECTS.EQUIPMENT) {\n            if(_self.g.isSelectedItem(this)) { // item is selecting\n                return;\n            }\n        }\n        _self.currentItem = undefined;\n    },\n    // fn onstart\n    onStart: function(x, y) {\n        var _self = systemGraphic;\n        if(!_self.g || (_self.g && !_self.g.verify(this))) {\n            return false;\n        }\n        if(IS_TOUCH) { // If mobile\n            var offset = _self.g.getOffset();\n            _self.g.mMouse.position = {x: x - offset.left, y: y - offset.top};\n        }\n\n        // object equipment and text\n        if(this.objType === OBJECTS.EQUIPMENT || this.objType === OBJECTS.TEXT) {\n            // Select entities on touch\n            if(toolIcons.isSelector) {\n                if(PL.keyCode == 16) { // shift key\n                    if(!_self.g.isSelectedItem(this)) {\n                        _self.mSelectedItems.add(this);\n                        this.selectChange(true);\n                    }\n\n                    // Move mSelectedItems\n                } else if(PL.keyCode == 17) { //  ctrl key\n                    if(!_self.g.isSelectedItem(this)) {\n                        _self.mSelectedItems.add(this);\n                        this.selectChange(true);\n                    } else {\n                        _self.g.deSelectedItem(this);\n                        this.selectChange(false);\n                    }\n\n                    // Not Move mSelectedItems\n                } else { // Not holding key\n                    if(!_self.g.isSelectedItem(this)) {\n                        _self.g.deSelectedItems();\n                        _self.mSelectedItems.add(this);\n                        this.selectChange(true);\n                    }\n\n                    // Move mSelectedItems\n                }\n            } else {\n                _self.g.deSelectedItems();\n            }\n            _self.mSelectedItems.forEach(function(item) {\n                item.dx = 0;\n                item.dy = 0;\n            });\n        }\n\n        if(toolIcons.isSelector && this.objType === OBJECTS.CONNECTION) {\n            // Select and highlight connector\n            if(!(PL.keyCode == 16 || PL.keyCode == 17)) {\n                if(!_self.g.isSelectedItem(this)) {\n                    _self.g.deSelectedItems();\n                    _self.mSelectedItems.add(this);\n                    this.selectChange(true);\n                }\n            }\n\n            // Wire handles\n            if(this.points.length >= 4) {\n                var pCheck = eCloneArray(this.points);\n                pCheck.splice(pCheck.length - 1, 1); // End Point\n                pCheck.splice(0, 1); // Start Point\n\n                var point = utils.projectionPointOnPath(this.attr('path'), _self.g.mMouse.position);\n                if(point) {\n                    var direction = 0,\n                        duplicateX = 0, duplicateY = 0,\n                        pStart = null, pEnd = null,\n                        posMin = 0, posMax = 0;\n\n                    for(var i = 0; i < pCheck.length; i++) {\n                        if(parseFloat(pCheck[i].x.toFixed(2)) === point.x) {\n                            duplicateX++;\n                            if(pStart == null) {\n                                pStart = pCheck[i];\n                                posMin = i + 1;\n                            } else {\n                                pEnd = pCheck[i];\n                                posMax = i + 1;\n                                break;\n                            }\n                        }\n                        if(parseFloat(pCheck[i].y.toFixed(2)) === point.y) {\n                            duplicateY++;\n                            if(pStart == null) {\n                                pStart = pCheck[i];\n                                posMin = i + 1;\n                            } else {\n                                pEnd = pCheck[i];\n                                posMax = i + 1;\n                                break;\n                            }\n                        }\n                    }\n\n                    if(duplicateX == 2) { // Move x\n                        direction = 1;\n                    } else if(duplicateY == 2) { // Move y\n                        direction = 2;\n                    }\n\n                    if(direction > 0) {\n                        _self.wireHandles = {};\n                        if(direction == 1) {\n                            _self.wireHandles = _self.g.rect(point.x - 3, point.y - 5, 6, 10).attr({\n                                fill: '#6098eb',\n                                stroke: '#033e99',\n                                'stroke-width': 1,\n                                cursor: 'w-resize'\n                            });\n                        } else {\n                            _self.wireHandles = _self.g.rect(point.x - 5, point.y - 3, 10, 6).attr({\n                                fill: '#6098eb',\n                                stroke: '#033e99',\n                                'stroke-width': 1,\n                                cursor: 'w-resize'\n                            });\n                        }\n                        _self.wireHandles.x = parseFloat(_self.wireHandles.attr('x'));\n                        _self.wireHandles.y = parseFloat(_self.wireHandles.attr('y'));\n                        _self.wireHandles.point = point;\n                        _self.wireHandles.posMin = posMin;\n                        _self.wireHandles.posMax = posMax;\n                        _self.wireHandles.start = {\n                            x: this.points[posMin].x,\n                            y: this.points[posMin].y\n                        };\n                        _self.wireHandles.end = {\n                            x: this.points[posMax].x,\n                            y: this.points[posMax].y\n                        };\n                        _self.wireHandles.direction = direction;\n                    }\n                }\n            }\n        }\n\n        // Set position\n        if(toolIcons.isConnector) {\n            _self.dummy.attr({x: _self.g.mMouse.position.x, y: _self.g.mMouse.position.y});\n            _self.dummy.x = parseFloat(_self.dummy.attr('x'));\n            _self.dummy.y = parseFloat(_self.dummy.attr('y'));\n        }\n\n        // Check change connection\n        if(toolIcons.isConnector && this.objType === OBJECTS.CONNECTION) {\n            var objFrom = this.info.objFrom,\n                objTo = this.info.objTo,\n                holderFrom = _self.getHolderByType(objFrom.holders, CONNECTION_TYPES.OUTPUT),\n                holderTo = _self.getHolderByType(objTo.holders, CONNECTION_TYPES.INPUT);\n            _self.isMulti = true;\n\n            _self.mTempFromConnection = new Connection();\n            _self.mTempFromConnection.color = _self.configs.connectorColor;\n            _self.mTempFromConnection.from = objFrom.info.id;\n            _self.mTempFromConnection.fromHolder = holderFrom.info.id;\n            _self.mTempFromConnection.objFrom = objFrom;\n            _self.mTempFromConnection.to = _self.dummy.id;\n            _self.mTempFromConnection.toHolder = -1;\n            _self.mTempFromConnection.objTo = _self.dummy;\n\n            _self.mTempToConnection = new Connection();\n            _self.mTempToConnection.color = _self.configs.connectorColor;\n            _self.mTempToConnection.from = _self.dummy.id;\n            _self.mTempToConnection.fromHolder = -1;\n            _self.mTempToConnection.objFrom = _self.dummy;\n            _self.mTempToConnection.to = objTo.info.id;\n            _self.mTempToConnection.toHolder = holderTo.info.id;\n            _self.mTempToConnection.objTo = objTo;\n\n            _self.mObjectConnections.add(_self.createConnection(_self.mTempFromConnection));\n            _self.mObjectConnections.add(_self.createConnection(_self.mTempToConnection));\n        }\n\n        // Start draw connection\n        if(toolIcons.isConnector && this.objType === OBJECTS.HOLDER && this.port === CONNECTION_TYPES.OUTPUT) { // object holder\n            _self.isHolder = true;\n            _self.mCurrentConnection = new Connection();\n            _self.mCurrentConnection.color = _self.configs.connectorColor;\n            _self.mCurrentConnection.from = this.info.parent.id;\n            _self.mCurrentConnection.objFrom = this.parentNode;\n            _self.mCurrentConnection.fromHolder = this.info.id;\n            _self.mCurrentConnection.to = _self.dummy.id;\n            _self.mCurrentConnection.toHolder = -1;\n\n            _self.mObjectConnections.add(_self.createConnection(_self.mCurrentConnection));\n        }\n\n        // Set variables\n        _self.currentItem = this;\n    },\n    // fn onmove\n    onMove: function(dx, dy) {\n        var _self = systemGraphic;\n        if(!_self.g || (_self.g && !_self.g.verify(this))) {\n            return false;\n        }\n\n        dx = dx * _self.g.scale;\n        dy = dy * _self.g.scale;\n\n        if(toolIcons.isConnector) {\n            _self.dummy.attr({x: _self.dummy.x + dx, y: _self.dummy.y + dy});\n\n            if(IS_TOUCH) {// check position on touch\n                _self.g.mMouse.position = {x: _self.dummy.x + dx, y: _self.dummy.y + dy};\n            }\n        }\n\n        if(!_self.isHolder && !_self.isMulti) {\n            if(toolIcons.isSelector && PL.keyCode != 17) { // != crl key\n                _self.mSelectedItems.forEach(function(item) {\n                    // Transform item\n                    if(item.objType === OBJECTS.EQUIPMENT) {\n                        item.transform('T' + dx + ',' + dy);\n                        for(var i = 0; i < item.length; i++) {\n                            item.paperSet[i].transform('R' + item.angle + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T' + dx + ',' + dy);\n                        }\n                        item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T' + dx + ',' + dy);\n                        if(item.badge) {\n                            item.badge.transform('T' + dx + ',' + dy);\n                        }\n                        _self.handlePositionHolder(item);\n                        _self.invalidateConnections(item);\n                    } else if(item.objType === OBJECTS.TEXT) {\n                        item.transform('R' + item.angle + 'T' + dx + ',' + dy);\n                    }\n                    item.dx = dx;\n                    item.dy = dy;\n                });\n            }\n        } else {\n            _self.invalidateConnections();\n        }\n\n        // When selecting a connector between equipment icons, make moveable handles visible, allow user to move connector segments\n        if(toolIcons.isSelector && this.objType === OBJECTS.CONNECTION) {\n            if(_self.wireHandles) {\n                var start = {\n                    x: this.points[_self.wireHandles.posMin - 1].x,\n                    y: this.points[_self.wireHandles.posMin - 1].y\n                };\n                var end = {\n                    x: this.points[_self.wireHandles.posMax + 1].x,\n                    y: this.points[_self.wireHandles.posMax + 1].y\n                };\n\n                if(_self.wireHandles.direction == 1) { // Move x\n                    if(start.x > end.x) {\n                        var temp = {\n                            x: start.x,\n                            y: start.y\n                        };\n\n                        start.x = end.x;\n                        start.y = end.y;\n\n                        end.x = temp.x;\n                        end.y = temp.y;\n                    }\n\n\n                    var path = _self.g.paper.cornerRadius(this.points, 5);\n                    this.parentNode.line1.attr('path', path);\n                    this.parentNode.line2.attr('path', path);\n                    this.parentNode.mask.attr('path', path);\n\n                    _self.wireHandles.attr({\n                        x: _self.wireHandles.x + dx\n                    });\n                } else if(_self.wireHandles.direction == 2) { // Move y\n                    if(start.y > end.y) {\n                        var temp = {\n                            x: start.x,\n                            y: start.y\n                        };\n\n                        start.x = end.x;\n                        start.y = end.y;\n\n                        end.x = temp.x;\n                        end.y = temp.y;\n                    }\n\n                    this.points[_self.wireHandles.posMin].y = _self.wireHandles.start.y + dy;\n                    this.points[_self.wireHandles.posMax].y = _self.wireHandles.start.y + dy;\n\n                    var path = _self.g.paper.cornerRadius(this.points, 5);\n                    this.parentNode.line1.attr('path', path);\n                    this.parentNode.line2.attr('path', path);\n                    this.parentNode.mask.attr('path', path);\n\n                    _self.wireHandles.attr({\n                        y: _self.wireHandles.y + dy\n                    });\n                }\n            }\n        }\n\n        // Check focus holder\n        if(toolIcons.isConnector) {\n            _self.focusHolderConnection();\n        }\n    },\n    // fn onend\n    onEnd: function(e) {\n        var _self = systemGraphic;\n\n        if(!_self.g || (_self.g && !_self.g.verify(this))) {\n            return false;\n        }\n\n        if(toolIcons.isSelector && (this.objType === OBJECTS.EQUIPMENT || this.objType === OBJECTS.TEXT)) {\n            _self.mSelectedItems.forEach(function(item) {\n                if(item.objType === OBJECTS.EQUIPMENT) {\n                    // Handle image\n                    for(var i = 0; i < item.length; i++) {\n                        item.paperSet[i].attr({\n                            x: parseFloat(item.paperSet[i].attr('x')) + item.dx,\n                            y: parseFloat(item.paperSet[i].attr('y')) + item.dy\n                        });\n                    }\n                    for(var i = 0; i < item.length; i++) {\n                        item.paperSet[i].transform('R' + item.angle + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                    }\n                    // Handle holder\n                    var bb = item.paperSet[item.length - 1].getBBox();\n                    item.cx = bb.cx;\n                    item.cy = bb.cy;\n                    for(var i = 0; i < item.holders.length; i++) {\n                        item.holders[i].attr({\n                            x: parseFloat(item.holders[i].attr('x')) + item.dx,\n                            y: parseFloat(item.holders[i].attr('y')) + item.dy\n                        });\n                    }\n\n                    item.holders.transform('T0,0');\n                    item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n\n                    _self.handlePositionMask(item);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    item.attr({\n                        x: parseFloat(item.attr('x')) + item.dx,\n                        y: parseFloat(item.attr('y')) + item.dy\n                    });\n                    item.transform('R' + item.angle + 'T0,0');\n                    item.info.x = parseFloat(item.attr('x'));\n                    item.info.y = parseFloat(item.attr('y'));\n                }\n\n                // Add stack list\n                STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, item, {\n                    dx: item.dx,\n                    dy: item.dy\n                });\n            });\n            _self.g.calculateFitSize(_self.mEquipments, _self.availableSize, _self.g.behindNode);\n        }\n\n        // End draw connection\n        if(toolIcons.isConnector && (this.objType === OBJECTS.HOLDER && this.port === CONNECTION_TYPES.OUTPUT) || (_self.isMulti && this.objType === OBJECTS.CONNECTION)) {\n            _self.deleteConnectionDummy();\n            if(IS_TOUCH) {\n                var offset = _self.g.getOffset();\n                _self.g.mMouse.position = {\n                    x: e.changedTouches[0].pageX - offset.left,\n                    y: e.changedTouches[0].pageY - offset.top\n                };\n            }\n            _self.activeConnection();\n        }\n\n        // Reset variables\n        if(toolIcons.isSelector && this.objType === OBJECTS.CONNECTION) {\n            if(_self.wireHandles) {\n                _self.wireHandles.remove();\n                _self.wireHandles = undefined;\n            }\n        }\n        _self.currentItem = undefined;\n\n        // Remove holder highlight\n        for(var i = 0; i < _self.holderHighlight.length; i++) {\n            _self.holderHighlight[i].attr({\n                filter: 'none'\n            });\n        }\n        _self.holderHighlight = [];\n    },\n    // fn doubleClick\n    onDblClick: function() {\n        var _self = systemGraphic;\n        if(this.objType === OBJECTS.EQUIPMENT) {\n            if(toolIcons.isSelector && PL.keyCode != 16 && PL.keyCode != 17) {\n                switch(this.info.type) {\n                    case EQUIPMENT_TYPES.ZONE:\n                    {\n                        _self.panel.$.TankSettingsPullout.toggle(false);\n                        _self.panel.$.ZoneSettingsPullout.toggle(true);\n                        break;\n                    }\n                    default:\n                    {\n                        _self.panel.$.ZoneSettingsPullout.toggle(false);\n                        _self.panel.$.TankSettingsPullout.toggle(true);\n                        break;\n                    }\n                }\n            }\n        }\n    },\n    // Select equipments by object\n    selectEquipmentsByObject: function(object) {\n        var _self = systemGraphic;\n        this.g.deSelectedItems();\n        this.mObjectEquipments.forEach(function(item) {\n            if(item.info.svg === object.svg) {\n                _self.mSelectedItems.add(item);\n                item.selectChange(true);\n            }\n        });\n    },\n    // fn delete selected items\n    deleteSelectedItems: function() {\n        var _self = systemGraphic;\n        if(this.mSelectedItems.count != 0) {\n            this.mSelectedItems.forEach(function(item) {\n                switch(item.objType) {\n                    case OBJECTS.EQUIPMENT:\n                    {\n                        // Add stack list\n                        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.REMOVE, item, {\n                            total: item.total,\n                            angle: item.angle\n                        });\n                        _self.removeEquipment(item);\n                        break;\n                    }\n                    case OBJECTS.CONNECTION:\n                    {\n                        // Add stack list\n                        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.REMOVE, item.info);\n                        _self.removeConnection(item);\n                        break;\n                    }\n                    case OBJECTS.TEXT:\n                    {\n                        // Add stack list\n                        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.REMOVE, item.info);\n                        _self.g.removeText(item);\n                        break;\n                    }\n                }\n            });\n            // Reset\n            this.mSelectedItems = new Collection();\n            // Off setting\n            this.panel.$.TankSettingsPullout.toggle(false);\n            this.panel.$.ZoneSettingsPullout.toggle(false);\n        }\n        return false;\n    },\n    // fn draw entity\n    drawEquipment: function(object) {\n        var _self = systemGraphic;\n        var paperSet = _self.g.group();\n        var image = _self.g.image(object.svg, object.x, object.y, object.width, object.height);\n        paperSet.add(image);\n\n        // Fix scale for chrome browser\n        image.node.style.zoom = 2;\n\n        var path = 'M' + object.x + ',' + object.y +\n            'L' + object.x + ',' + object.y + // R translate\n            'L' + (object.x + object.width) + ',' + object.y + // R translate\n            'L' + (object.x + object.width) + ',' + (object.y + object.height) + // R translate\n            'L' + (object.x + object.width) + ',' + (object.y + object.height) +\n            'L' + (object.x) + ',' + (object.y + object.height) +\n            'Z';\n\n        var shape = _self.g.path(path).attr({\n            'fill-opacity': 0.001,\n            fill: '#ffffff',\n            stroke: '#ffffff',\n            'stroke-width': 0.001\n        });\n        shape.id = object.id;\n        shape.info = object;\n        shape.objType = OBJECTS.EQUIPMENT;\n        shape.paperSet = paperSet;\n        shape.length = 1;\n        shape.total = 1;\n        shape.angle = 0;\n        shape.cx = shape.getBBox().cx;\n        shape.cy = shape.getBBox().cy;\n\n        var holders = _self.g.group();\n\n        // Add holder\n        var holderArray = object.holders;\n        for(var i = 0; i < holderArray.length; i++) {\n            var hd = holderArray[i];\n            var x = 0, y = 0;\n\n            if(hd.direct == 1 || hd.direct == 11) {\n                x = object.x + hd.offset;\n                y = object.y - _self.configs.holderSize + _self.configs.offsetHolder;\n            } else if(hd.direct == 12) {\n                x = (object.x + object.width - _self.configs.holderSize) - hd.offset;\n                y = object.y - _self.configs.holderSize + _self.configs.offsetHolder;\n            } else if(hd.direct == 2 || hd.direct == 21) {\n                x = object.x + object.width - _self.configs.offsetHolder;\n                y = object.y + hd.offset;\n            } else if(hd.direct == 22) {\n                x = object.x + object.width - _self.configs.offsetHolder;\n                y = (object.y + object.height - _self.configs.holderSize) - hd.offset;\n            } else if(hd.direct == 3 || hd.direct == 31) {\n                x = (object.x + object.width - _self.configs.holderSize) - hd.offset;\n                y = object.y + object.height - _self.configs.offsetHolder;\n            } else if(hd.direct == 32) {\n                x = object.x + hd.offset;\n                y = object.y + object.height - _self.configs.offsetHolder;\n            } else if(hd.direct == 4 || hd.direct == 41) {\n                x = (object.x - _self.configs.holderSize) + _self.configs.offsetHolder;\n                y = object.y + hd.offset;\n            } else if(hd.direct == 42) {\n                x = (object.x - _self.configs.holderSize) + _self.configs.offsetHolder;\n                y = (object.y + object.height - _self.configs.holderSize) - hd.offset;\n            }\n            \n            // Hack fix for solar opposite routing issue\n            if (hd.method === \"in-bottom-top\" && object.svg === \"assets/images/equipments/solar-thermal/solar-thermal-panel.svg\") {\n                hd.type = \"output\";   \n            }\n            \n            if (hd.method === \"out-bottom-top\" && object.svg === \"assets/images/equipments/solar-thermal/solar-thermal-panel.svg\") {\n                hd.type = \"input\";   \n            }\n\n            holders.add(\n                _self.drawHolder({\n                    id: hd.id,\n                    direct: hd.direct,\n                    x: x,\n                    y: y,\n                    method: hd.method,\n                    type: hd.type,\n                    parent: object,\n                    shape: shape\n                }));\n        }\n        holders.length = holderArray.length;\n        // End add\n\n        shape.holders = holders;\n        shape.selectChange = function(flag) {\n            if(flag) {\n                this.paperSet.attr({\n                    filter: 'url(#' + _self.currentTagName + '_highlight)'\n                });\n                //this.paperSet.node.setAttribute('filter', 'url(#' + _self.currentTagName + '_highlight)');\n            } else {\n                this.paperSet.attr({\n                    filter: 'none'\n                });\n                //this.paperSet.node.removeAttribute('filter');\n            }\n        };\n\n        if(IS_TOUCH) { // On Mobile\n            shape.touchstart(_self.onDblClick);\n        } else { // On Desktop\n            shape.dblclick(_self.onDblClick);\n        }\n\n        if(!IS_TOUCH) {\n            shape.hover(_self.fIn, _self.fOut);\n        }\n\n        shape.drag(_self.onMove, _self.onStart, _self.onEnd);\n\n        // All item related\n        var contains = _self.g.group();\n        contains.attr({\n            id: 'svg-system-group-equipment-' + object.id,\n            classes: 'svg-system-group-equipment'\n        });\n        contains.add(paperSet, shape, holders);\n\n        shape.contains = contains;\n\n        return shape;\n    },\n    // Draw Flip Equipment\n    drawFlip: function() {\n        var _self = systemGraphic;\n        this.mSelectedItems.forEach(function(item) {\n            if(item.info.objType === OBJECTS.EQUIPMENT) {\n                for(var i = 0; i < item.length; i++) {\n                    item.paperSet[i].transform('R' + item.angle + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                }\n\n                // Fix zone manifold flip\n                //if(item.info.kind === 'zone-manifold') {\n                //    if(item.info.animation.rotate === 0) {\n                //        if(!item.info.animation.flip) {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T75,0');\n                //        } else {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                //        }\n                //    } else if(item.info.animation.rotate === 1) {\n                //        if(!item.info.animation.flip) {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,-75');\n                //        } else {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                //        }\n                //    } else if(item.info.animation.rotate === 2) {\n                //        if(!item.info.animation.flip) {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T-75,0');\n                //        } else {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                //        }\n                //\n                //    } else if(item.info.animation.rotate === 3) {\n                //        if(!item.info.animation.flip) {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,75');\n                //        } else {\n                //            item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                //        }\n                //    } else {\n                //        item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                //    }\n                //} else {\n                //    item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                //}\n\n                item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n\n                item.info.animation.flip = !item.info.animation.flip;\n                _self.handlePositionMask(item);\n                _self.invalidateConnections(item);\n                // Add stack list\n                STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.FLIP, item);\n            }\n        });\n    },\n    // fn draw holder\n    drawHolder: function(options) {\n        var holder = this.g.image('assets/images/connectors/' + options.method + '.svg', options.x, options.y, this.configs.holderSize, this.configs.holderSize).attr({\n            opacity: .001\n        });\n        holder.id = options.id;\n        holder.info = {\n            id: options.id,\n            direct: options.direct,\n            parent: options.parent,\n            pos: options.pos,\n            type: options.type || 'none', // in/out\n            objType: OBJECTS.HOLDER\n        };\n        holder.direct = options.direct;\n        holder.objType = OBJECTS.HOLDER;\n        holder.parentNode = options.shape;\n        holder.port = options.type;\n        var bb = holder.getBBox();\n        holder.bb = {\n            x: bb.x,\n            x2: bb.x2,\n            y: bb.y,\n            y2: bb.y2,\n            cx: bb.cx,\n            cy: bb.cy,\n            width: bb.width,\n            height: bb.height\n        };\n        holder.drag(this.onMove, this.onStart, this.onEnd);\n\n        return holder;\n    },\n    // fn draw parallel\n    drawParallel: function(shape) {\n        var _self = systemGraphic;\n\n        if(shape.total < this.configs.layerTotal) {\n            var childSet = shape.paperSet[shape.length - 1].clone();\n            childSet.attr({\n                x: parseFloat(childSet.attr('x')) + this.configs.offsetSpace * shape.length,\n                y: parseFloat(childSet.attr('y')) + this.configs.offsetSpace * shape.length,\n                opacity: (1 - 0.25 * shape.length)\n            });\n            childSet.transform('R' + shape.angle + (!shape.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n\n            shape.paperSet.prepend(childSet);\n            shape.length++;\n            shape.selectChange(true);\n\n            // Reset mask\n            _self.handlePositionMask(shape);\n            _self.invalidateConnections(shape);\n\n            _self.g.calculateFitSize(_self.mEquipments, _self.availableSize, _self.g.behindNode);\n            _self.calculateKind();\n        }\n\n        // Create badge\n        if(shape.total < this.configs.layerTotal || shape.total < this.configs.badgeTotal) {\n            shape.total++;\n\n            var bb = shape.getBBox();\n            if(!shape.badge) {\n                var circle = this.g.circle(bb.x, bb.y, this.configs.badgeRadius).attr({\n                    stroke: 'none',\n                    fill: '#E53944'\n                });\n                var text = this.g.text(bb.x, bb.y, shape.total).attr({\n                    fill: '#FFFFFF',\n                    'font-size': this.configs.badgeTextSize,\n                    'font-weight': 'bold'\n                });\n                text.attr({\n                    x: bb.x - text.getBBox().width / 2,\n                    y: bb.y + this.configs.badgeTextTop\n                });\n                shape.badge = this.g.group();\n                shape.badge.add(circle, text);\n            } else {\n                var text = shape.badge[1];\n                text.node.innerHTML = shape.total;\n                text.attr({\n                    x: bb.x - text.getBBox().width / 2,\n                    y: bb.y + this.configs.badgeTextTop\n                })\n            }\n\n            // Add stack\n            STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.PARALLEL, shape);\n        }\n\n        // Save To Info\n        shape.info.parallel = shape.total - 1;\n    },\n    // fn create entity\n    createEquipment: function(options, undo) {\n        var _self = systemGraphic;\n\n        if(undo !== true) {\n            options.x = options.x * _self.g.scale + _self.g.getCurrentPosition().x;\n            options.y = options.y * _self.g.scale + _self.g.getCurrentPosition().y;\n        }\n\n        var equip = new Equipment(options);\n        _self.mEquipments.add(equip, true);\n\n        var shape = _self.drawEquipment(equip);\n        _self.mObjectEquipments.add(shape);\n\n        // Add stack item\n        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.CREATE, shape);\n\n        _self.g.calculateFitSize(_self.mEquipments, _self.availableSize, _self.g.behindNode);\n        _self.calculateKind();\n\n        return shape;\n    },\n    // fn create a new connection between entities\n    createConnection: function(info) {\n        var _self = systemGraphic,\n            start, end;\n\n        if(info.from != _self.dummy.id && info.to != _self.dummy.id) {\n            // draw: 2 entities\n            start = _self.mObjectEquipments.itemByID(info.from);\n            end = _self.mObjectEquipments.itemByID(info.to);\n        } else if(info.to == _self.dummy.id) {\n            // draw from dummy\n            start = _self.mObjectEquipments.itemByID(info.from);\n            end = _self.dummy;\n            // get start: dummy, end: entity\n        } else if(info.from == _self.dummy.id) {\n            // draw to dummy\n            start = _self.dummy;\n            end = _self.mObjectEquipments.itemByID(info.to);\n            // get start: entity, end: dummy\n        } else if(!!info.from && !!info.to) {\n            start = _self.mObjectEquipments.itemByID(info.from);\n            end = _self.mObjectEquipments.itemByID(info.to);\n        }\n\n        var conn = _self.g.connection(start, end, info);\n        if(!conn) return false;\n\n        conn.objType = OBJECTS.CONNECTION;\n        conn.id = info.id;\n        conn.mask.id = info.id;\n        conn.mask.info = info;\n        conn.mask.objType = OBJECTS.CONNECTION;\n\n        if(!IS_TOUCH) {\n            conn.mask.hover(_self.fIn, _self.fOut);\n        }\n        conn.mask.drag(_self.onMove, _self.onStart, _self.onEnd);\n\n        // Add stack list\n        STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.CREATE, conn);\n\n        return conn;\n    },\n    // check connection is exiting\n    checkConnectionExiting: function(connect) {\n        for(var i = 0; i < this.mConnections.count; i++) {\n            if(this.mConnections.item(i).from === connect.from && this.mConnections.item(i).to === connect.to) {\n                return true;\n            }\n        }\n        return false;\n    },\n    // fn delete connection dummy\n    deleteConnectionDummy: function() {\n        var _self = systemGraphic;\n        this.mObjectConnections.forEach(function(conn) {\n            if(conn.info.to == _self.dummy.id || conn.info.from == _self.dummy.id) {\n                _self.removeConnection(conn);\n            }\n        });\n    },\n    // fn invalidate connections when drag-drop entity\n    invalidateConnections: function(entity) {\n        var _self = systemGraphic;\n        this.mObjectConnections.forEach(function(conn) {\n            if(entity) {\n                if(conn.info.from === entity.info.id || conn.info.to === entity.info.id) {\n                    _self.g.connection(conn);\n                }\n            } else {\n                if(conn.info.from === -1000 || conn.info.to === -1000) {\n                    _self.g.connection(conn);\n                }\n            }\n        });\n    },\n    // create or change connection-line\n    activeConnection: function() {\n        var _self = systemGraphic;\n        for(var index = 0; index < _self.mObjectEquipments.count; index++) {\n            var item = _self.mObjectEquipments.collection[index];\n            // isHolder create connection\n            if(_self.isHolder && _self.mCurrentConnection.from != item.info.id) {\n                for(var i = 0; i < item.holders.length; i++) {\n                    if(item.holders[i].port === CONNECTION_TYPES.INPUT) {\n                        var bb = item.holders[i].bb;\n                        var min = {x: bb.x, y: bb.y},\n                            max = {x: bb.x + bb.width, y: bb.y + bb.height};\n                        if(\n                            (min.x - _self.configs.holderDistance < _self.g.mMouse.position.x && _self.g.mMouse.position.x < max.x + _self.configs.holderDistance)\n                            &&\n                            (min.y - _self.configs.holderDistance < _self.g.mMouse.position.y && _self.g.mMouse.position.y < max.y + _self.configs.holderDistance)\n                        ) {\n                            _self.mCurrentConnection.to = item.info.id;\n                            _self.mCurrentConnection.toHolder = item.holders[i].info.id;\n                            _self.mCurrentConnection.objTo = item;\n                            if(!_self.checkConnectionExiting(_self.mCurrentConnection)) {\n                                _self.mConnections.add(_self.mCurrentConnection, true);\n                                _self.mObjectConnections.add(_self.createConnection(_self.mCurrentConnection));\n                            }\n                        break;\n                        }\n                    }\n                }\n            }\n            // Create two connection\n            if(_self.isMulti) {\n                // Create from equipment to drag\n                if(_self.mTempFromConnection.from != item.info.id) {\n                    for(var i = 0; i < item.holders.length; i++) {\n                        if(item.holders[i].port === CONNECTION_TYPES.INPUT) {\n                            var bb = item.holders[i].bb;\n                            var min = {x: bb.x, y: bb.y},\n                                max = {x: bb.x + bb.width, y: bb.y + bb.height};\n                            if(\n                                (min.x - _self.configs.holderDistance < _self.g.mMouse.position.x && _self.g.mMouse.position.x < max.x + _self.configs.holderDistance)\n                                &&\n                                (min.y - _self.configs.holderDistance < _self.g.mMouse.position.y && _self.g.mMouse.position.y < max.y + _self.configs.holderDistance)\n                            ) {\n                                _self.mTempFromConnection.to = item.info.id;\n                                _self.mTempFromConnection.toHolder = item.holders[i].info.id;\n                                _self.mTempFromConnection.objTo = item;\n                                if(!_self.checkConnectionExiting(_self.mTempFromConnection)) {\n                                    _self.mConnections.add(_self.mTempFromConnection, true);\n                                    _self.mObjectConnections.add(_self.createConnection(_self.mTempFromConnection));\n                                }\n                            break;\n                            }\n                        }\n                    }\n                }\n                // Create from drag to equipment\n                if(_self.mTempToConnection.from != item.info.id) {\n                    for(var i = 0; i < item.holders.length; i++) {\n                        if(item.holders[i].port === CONNECTION_TYPES.INPUT) {\n                            var bb = item.holders[i].bb,\n                                min = {x: bb.x, y: bb.y},\n                                max = {x: bb.x + bb.width, y: bb.y + bb.height},\n                                holder = _self.getHolderByType(item.holders, CONNECTION_TYPES.OUTPUT);\n                            if(\n                                (min.x - _self.configs.holderDistance < _self.g.mMouse.position.x && _self.g.mMouse.position.x < max.x + _self.configs.holderDistance)\n                                &&\n                                (min.y - _self.configs.holderDistance < _self.g.mMouse.position.y && _self.g.mMouse.position.y < max.y + _self.configs.holderDistance)\n                            ) {\n                                _self.mTempToConnection.from = item.info.id;\n                                _self.mTempToConnection.fromHolder = holder.info.id;\n                                _self.mTempToConnection.objFrom = item;\n                                if(!_self.checkConnectionExiting(_self.mTempToConnection)) {\n                                    _self.mConnections.add(_self.mTempToConnection, true);\n                                    _self.mObjectConnections.add(_self.createConnection(_self.mTempToConnection));\n                                }\n                            break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        _self.isHolder = _self.isMulti = false;\n    },\n    // fn focus holder connection if mouse in area\n    focusHolderConnection: function() {\n        var _self = systemGraphic;\n        for(var index = 0; index < _self.mObjectEquipments.count; index++) {\n            var item = _self.mObjectEquipments.collection[index];\n            if(_self.mCurrentConnection.from != item.info.id) { // Check node root\n                for(var i = 0; i < item.holders.length; i++) {\n                    if(item.holders[i].port === CONNECTION_TYPES.INPUT) {\n                        var bb = item.holders[i].bb;\n                        var min = {x: bb.x, y: bb.y},\n                            max = {x: bb.x + bb.width, y: bb.y + bb.height};\n                        if(\n                            (min.x - _self.configs.holderDistance < _self.g.mMouse.position.x && _self.g.mMouse.position.x < max.x + _self.configs.holderDistance)\n                            &&\n                            (min.y - _self.configs.holderDistance < _self.g.mMouse.position.y && _self.g.mMouse.position.y < max.y + _self.configs.holderDistance)\n                        ) {\n                            // Not check existing\n                            item.holders[i].attr({\n                                filter: 'url(#' + _self.currentTagName + '_highlight)'\n                            });\n                            _self.holderHighlight.push(item.holders[i]);\n                        } else {\n                            item.holders[i].attr({\n                                filter: 'none'\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    },\n    // fn create parallel\n    createParallel: function() {\n        for(var i = 0; i < this.mSelectedItems.count; i++) {\n            if(this.mSelectedItems.item(i).objType === OBJECTS.EQUIPMENT) {\n                this.drawParallel(this.mSelectedItems.item(i));\n            }\n        }\n    },\n    // Remove connection\n    removeConnection: function(item) {\n        this.mConnections.remove(item);\n\n        this.mObjectConnections.forEach(function(conn) {\n            if(conn.id === item.id) {\n                conn.line1.remove();\n                conn.line2.remove();\n                conn.mask.remove();\n                if(!!conn.lineStart) {\n                    conn.lineStart.line1.remove();\n                    conn.lineStart.line2.remove();\n                    conn.lineStart.mask.remove();\n                }\n                if(!!conn.lineEnd) {\n                    conn.lineEnd.line1.remove();\n                    conn.lineEnd.line2.remove();\n                    conn.lineEnd.mask.remove();\n                }\n            }\n        });\n        this.mObjectConnections.remove(item);\n    },\n    // Remove Equipment\n    removeEquipment: function(item) {\n        var _self = systemGraphic;\n\n        _self.mEquipments.remove(item);\n        _self.mObjectEquipments.forEach(function(shape) {\n            if(shape === item) {\n                // Remove connections\n                for(var i = _self.mConnections.count - 1; i >= 0; i--) {\n                    var conn = _self.mConnections.item(i);\n                    if(conn.from == item.id || conn.to == item.id) {\n                        // Remove connection\n                        _self.mConnections.remove(conn);\n                        _self.removeConnection(conn);\n                    }\n                }\n                // Remove holders\n                shape.holders.remove();\n                shape.paperSet.remove();\n                if(shape.badge) shape.badge.remove();\n                shape.remove();\n            }\n        });\n        _self.mObjectEquipments.remove(item);\n\n        _self.g.calculateFitSize(_self.mEquipments, _self.availableSize, _self.g.behindNode);\n        _self.calculateKind();\n    },\n    // Recovery Equipment after remove\n    recoveryEquipment: function(shape) {\n        var _self = systemGraphic;\n\n        _self.g.add(shape.paperSet);\n        _self.g.add(shape);\n        _self.g.add(shape.holders);\n        _self.mEquipments.add(shape.info);\n        _self.mObjectEquipments.add(shape);\n        shape.removed = false;\n\n        _self.g.calculateFitSize(_self.mEquipments, _self.availableSize, _self.g.behindNode);\n        _self.calculateKind();\n    },\n    // Total number of each equipment kind\n    calculateKind: function() {\n        //// Clear data\n        //for(var key in this.availableKind) {\n        //    this.availableKind[key] = 0;\n        //}\n        //// Set data\n        //for(var i = 0; i < this.mObjectEquipments.count; i++) {\n        //    if(this.availableKind[this.mObjectEquipments.item(i).info.kind] == undefined) {\n        //        this.availableKind[this.mObjectEquipments.item(i).info.kind] = this.mObjectEquipments.item(i).length;\n        //    } else {\n        //        this.availableKind[this.mObjectEquipments.item(i).info.kind] += this.mObjectEquipments.item(i).length;\n        //    }\n        //}\n        //// Transmission\n        //for(var key in this.availableKind) {\n        //    Signals.send('onBadge', {kind: key, value: this.availableKind[key]});\n        //}\n    },\n    // Calculator cx, cy for holder\n    handlePositionHolder: function(item) {\n        for(var i = 0; i < item.holders.length; i++) {\n            item.holders[i].transform(item.holders.matrix);\n            var bb = item.holders[i].getBBox();\n            item.holders[i].bb = {\n                x: bb.x,\n                x2: bb.x2,\n                y: bb.y,\n                y2: bb.y2,\n                cx: bb.cx,\n                cy: bb.cy,\n                width: bb.width,\n                height: bb.height\n            };\n            item.holders[i].transform('R0S1,1T0,0');\n        }\n    },\n    // fn fix mask for equipment and update info\n    handlePositionMask: function(item) {\n        var start = item.paperSet[item.length - 1],\n            bb = item.paperSet.getBBox(),\n            bbItem = start.getBBox();\n\n        // Position\n        var path = 'M' + bb.x + ',' + (bb.y2 - bbItem.height) +\n            'L' + bb.x + ',' + bb.y2 +\n            'L' + (bb.x + bbItem.width) + ',' + bb.y2 +\n            'L' + bb.x2 + ',' + (bb.y + bbItem.height) +\n            'L' + bb.x2 + ',' + bb.y +\n            'L' + (bb.x2 - bbItem.width) + ',' + bb.y +\n            'Z';\n        item.attr({path: path});\n        item.transform('R0T0,0');\n\n        var bb = item.getBBox();\n        item.info.x = parseFloat(start.attr('x'));\n        item.info.y = parseFloat(start.attr('y'));\n        item.info.width = parseFloat(start.attr('width'));\n        item.info.height = parseFloat(start.attr('height'));\n\n        if(item.badge) {\n            var circle = item.badge[0],\n                text = item.badge[1];\n            circle.attr({\n                cx: bb.x,\n                cy: bb.y\n            });\n            text.attr({\n                x: bb.x - text.getBBox().width / 2,\n                y: bb.y + this.configs.badgeTextTop\n            });\n            item.badge.transform('T0,0');\n        }\n\n        this.handlePositionHolder(item);\n    },\n    // turn on active create and change connection-lines\n    turnOnHolderOfEntity: function(turnOn) {\n        this.mObjectEquipments.forEach(function(item) {\n            for(var i = 0; i < item.holders.length; i++) {\n                var holder = item.holders[i];\n                if(turnOn) {\n                    holder.attr({\n                        opacity: 1\n                    });\n                } else {\n                    holder.attr({\n                        opacity: .001\n                    });\n                }\n            }\n        });\n    },\n    getHolderByType: function(holders, type) {\n        for(var i = 0; i < holders.length; i++) {\n            if(holders[i].info.type === type) {\n                return holders[i];\n            }\n        }\n        return false;\n    },\n    setSize: function(width, height) {\n        this.width = width;\n        this.height = height;\n        if(this.loaded) {\n            this.g.setSize(width, height);\n        }\n    },\n    // Align\n    alignObjects: function(align) {\n        var _self = systemGraphic;\n\n        // Check count object\n        if(this.mSelectedItems.count <= 1) return;\n\n        // Position\n        var start = this.mSelectedItems.item(0).getBBox();\n        for(var i = 1; i < this.mSelectedItems.count; i++) {\n            var item = this.mSelectedItems.item(i);\n            var end = item.getBBox();\n            var dx = 0, dy = 0;\n            if(align == ALIGN.HL) {\n                dx = end.x - start.x;\n            } else if(align == ALIGN.HC) {\n                dx = end.x - (start.cx - end.width / 2);\n            } else if(align == ALIGN.HR) {\n                dx = end.x - (start.x2 - end.width);\n            } else if(align == ALIGN.VT) {\n                dy = end.y - start.y;\n            } else if(align == ALIGN.VC) {\n                dy = end.y - (start.cy - end.height / 2);\n            } else if(align == ALIGN.VB) {\n                dy = end.y - (start.y2 - end.height);\n            }\n            if(item.objType == OBJECTS.EQUIPMENT) {\n                // Handle image\n                for(var j = 0; j < item.length; j++) {\n                    item.paperSet[j].attr({\n                        x: parseFloat(item.paperSet[j].attr('x')) - dx,\n                        y: parseFloat(item.paperSet[j].attr('y')) - dy\n                    });\n                    item.paperSet[j].transform('R' + item.angle + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                }\n                // Handle holder\n                var bb = item.paperSet[item.length - 1].getBBox();\n                item.cx = bb.cx;\n                item.cy = bb.cy;\n                for(var j = 0; j < item.holders.length; j++) {\n                    item.holders[j].attr({\n                        x: parseFloat(item.holders[j].attr('x')) - dx,\n                        y: parseFloat(item.holders[j].attr('y')) - dy\n                    });\n                }\n                item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                // Update Holder And Line\n                this.handlePositionMask(item);\n                this.invalidateConnections(item);\n                // Update info\n                item.info.x = parseFloat(item.attr('x'));\n                item.info.y = parseFloat(item.attr('y'));\n            } else if(item.objType == OBJECTS.TEXT) {\n                item.attr({\n                    x: parseFloat(item.attr('x')) - dx,\n                    y: parseFloat(item.attr('y')) - dy\n                });\n            }\n            // Add stack list\n            STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, item, {\n                dx: -dx,\n                dy: -dy\n            });\n        }\n    },\n    // fn rotate item\n    rotate: function() {\n        var _self = systemGraphic;\n        this.mSelectedItems.forEach(function(item) {\n            if(item.objType != OBJECTS.CONNECTION) {\n                item.info.animation.rotate = (item.info.animation.rotate + 1) % 4; // set position when active rotate\n                // change position of holder when rotate\n                item.angle -= 90;\n                if(item.objType === OBJECTS.EQUIPMENT) {\n                    for(var i = 0; i < item.length; i++) {\n                        item.paperSet[i].animate({transform: 'R' + item.angle + (!item.info.animation.flip ? 'S1,1' : 'S-1,1')}, _self.configs.rotateSpeed);\n                    }\n                    item.holders.animate({transform: 'R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S1,1' : 'S-1,1')}, _self.configs.rotateSpeed);\n                    setTimeout(function() {\n                        _self.handlePositionMask(item);\n                        _self.invalidateConnections(item);\n                    }, _self.configs.rotateDelay + 100);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    item.animate({transform: 'R' + item.angle + 'S1,1T0,0'}, _self.configs.rotateSpeed);\n                }\n                // Add stack list\n                STACK_LIST.addStack(_self.currentTagName, _self.panel.name, STACK_TYPES.SVG, STACK_METHODS.ROTATE, item);\n            }\n        });\n    },\n    // fn zoom view port\n    zoomViewPort: function() {\n        return this.g.zoom();\n    },\n    zoomToFit: function() {\n        return this.g.zoomFit(this.availableSize);\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var _self = systemGraphic;\n        var stack = STACK_LIST.getStack(_self.currentTagName);\n        if(stack) {\n            var item = stack.object;\n            if(stack.method === STACK_METHODS.CREATE) {\n                if(item.objType === OBJECTS.EQUIPMENT) {\n                    this.removeEquipment(item);\n                } else if(item.objType === OBJECTS.CONNECTION) {\n                    this.removeConnection(item);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    this.g.removeText(item);\n                }\n            } else if(stack.method === STACK_METHODS.PARALLEL) {\n                if(item.total <= this.configs.layerTotal) {\n                    item.paperSet[0].remove();\n                    item.length--;\n                    item.total--;\n\n                    // Reset mask\n                    _self.handlePositionMask(item);\n                    _self.invalidateConnections(item);\n\n                    _self.g.calculateFitSize(_self.mEquipments, _self.availableSize, _self.g.behindNode);\n                    _self.calculateKind();\n                } else {\n                    item.total--;\n                }\n\n                // Remove badge\n                if(item.badge && !item.badge.removed) {\n                    if(item.total === 1) {\n                        item.badge.remove();\n                        item.badge = undefined;\n                    } else {\n                        var bb = item.getBBox();\n                        var text = item.badge[1];\n                        text.node.innerHTML = item.total;\n                        text.attr({\n                            x: bb.x - text.getBBox().width / 2,\n                            y: bb.y + this.configs.badgeTextTop\n                        });\n                    }\n                }\n\n                // Save To Info\n                item.info.parallel = item.total - 1;\n            } else if(stack.method === STACK_METHODS.MOVE) {\n                if(item.objType === OBJECTS.EQUIPMENT) {\n                    // Handle image\n                    for(var i = 0; i < item.length; i++) {\n                        item.paperSet[i].attr({\n                            x: parseFloat(item.paperSet[i].attr('x')) - stack.data.dx,\n                            y: parseFloat(item.paperSet[i].attr('y')) - stack.data.dy\n                        });\n                        item.paperSet[i].transform('R' + item.angle + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                    }\n                    // Handle holder\n                    var bb = item.paperSet[item.length - 1].getBBox();\n                    item.cx = bb.cx;\n                    item.cy = bb.cy;\n                    for(var i = 0; i < item.holders.length; i++) {\n                        item.holders[i].attr({\n                            x: parseFloat(item.holders[i].attr('x')) - stack.data.dx,\n                            y: parseFloat(item.holders[i].attr('y')) - stack.data.dy\n                        });\n                    }\n                    item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                    // Reset mask\n                    this.handlePositionMask(item);\n                    this.invalidateConnections(item);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    item.attr({\n                        x: parseFloat(item.attr('x')) - stack.data.dx,\n                        y: parseFloat(item.attr('y')) - stack.data.dy\n                    });\n                    item.info.x = parseFloat(item.attr('x'));\n                    item.info.y = parseFloat(item.attr('y'));\n                    item.transform('R' + item.angle + 'T0,0');\n                }\n            } else if(stack.method === STACK_METHODS.REMOVE) {\n                if(item.objType === OBJECTS.EQUIPMENT) {\n                    var shape = this.createEquipment(item.info, true);\n                    shape.angle = stack.data.angle;\n                    shape.paperSet[0].transform('R' + shape.angle + (!shape.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                    shape.holders.transform('R' + shape.angle + ',' + shape.cx + ',' + shape.cy + (!shape.info.animation.flip ? 'S1,1' : 'S-1,1') + 'T0,0');\n                    while(stack.data.total-- > 1) {\n                        this.drawParallel(shape);\n                    }\n                    shape.selectChange(false);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    this.g.createText(item);\n                } else if(item.objType === OBJECTS.CONNECTION) {\n                    this.mCurrentConnection = new Connection();\n                    this.mCurrentConnection.id = item.id;\n                    this.mCurrentConnection.from = item.from;\n                    this.mCurrentConnection.fromHolder = item.fromHolder;\n                    this.mCurrentConnection.to = item.to;\n                    this.mCurrentConnection.toHolder = item.toHolder;\n                    this.mCurrentConnection.color = item.color;\n                    this.mCurrentConnection.objType = item.objType;\n                    this.mConnections.add(this.mCurrentConnection);\n                    var conn = this.createConnection(this.mCurrentConnection);\n                    this.mObjectConnections.add(conn);\n                    this.activeConnection();\n                }\n            } else if(stack.method === STACK_METHODS.ROTATE) {\n                if(item.info.animation.rotate == 0) {\n                    item.info.animation.rotate = 3;\n                } else {\n                    item.info.animation.rotate--;\n                }\n                item.angle += 90;\n                if(item.objType === OBJECTS.EQUIPMENT) {\n                    for(var i = 0; i < item.length; i++) {\n                        item.paperSet[i].animate({transform: 'R' + item.angle + (!item.info.animation.flip ? 'S1,1' : 'S-1,1')}, this.configs.rotateSpeed);\n                    }\n                    // Handle holder\n                    var bb = item.paperSet[item.length - 1].getBBox();\n                    item.cx = bb.cx;\n                    item.cy = bb.cy;\n                    item.holders.animate({transform: 'R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S1,1' : 'S-1,1')}, this.configs.rotateSpeed);\n                    setTimeout(function() {\n                        _self.handlePositionMask(item);\n                        _self.invalidateConnections(item);\n                    }, _self.configs.rotateDelay + 100);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    item.animate({transform: 'R' + item.angle}, this.configs.rotateSpeed);\n                }\n            } else if(stack.method === STACK_METHODS.FLIP) {\n                for(var i = 0; i < item.length; i++) {\n                    item.paperSet[i].transform('R' + item.angle + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                }\n                item.holders.transform('R' + item.angle + ',' + item.cx + ',' + item.cy + (!item.info.animation.flip ? 'S-1,1' : 'S1,1') + 'T0,0');\n                item.info.animation.flip = !item.info.animation.flip;\n                this.handlePositionMask(item);\n                this.invalidateConnections(item);\n            }\n\n            STACK_LIST.removeStack(stack);\n        }\n    },\n    // Active icons\n    activeIcons: function(keyOn, valOn, keyOff, valOff) {\n        if(keyOn === undefined) {\n            keyOn = 'isSelector';\n        }\n        if(valOn === undefined) {\n            valOn = true;\n        }\n        if(keyOff === undefined) {\n            keyOff = '';\n        }\n        if(valOff === undefined) {\n            valOff = false;\n        }\n        for(var key in toolIcons) {\n            if(key === keyOn) {\n                toolIcons[key] = valOn;\n            } else if(key === keyOff) {\n                toolIcons[key] = valOff;\n            } else {\n                toolIcons[key] = false;\n            }\n        }\n        // Disable selector and remove selected item\n        if(!toolIcons.isSelector) {\n            // Remove selected\n            this.g.deSelectedItems();\n            // Reset pullout\n            this.panel.$.TankSettingsPullout.toggle(false);\n            this.panel.$.ZoneSettingsPullout.toggle(false);\n        }\n        if(!toolIcons.isAddText) {\n            // Add Text and Off textBox\n            if(!!this.g.input) {\n                if(this.g.input.value.trim() != '') {\n                    this.g.createText({\n                        x: this.g.input.x,\n                        y: this.g.input.y,\n                        text: this.g.input.value\n                    });\n                } else {\n                    // Off input\n                    this.g.turnOnTextBoxToAddText(false);\n                    // Reset input value\n                    this.g.input.value = '';\n                }\n            }\n        }\n        this.turnOnHolderOfEntity(toolIcons.isConnector);\n        // If zoom active\n        //this.g.panZoom.enable(toolIcons.isZoom);\n        // if move active\n        //this.g.panZoom.move(toolIcons.isMoving);\n    }\n};\n","//\n\nvar Signals = require('enyo/Signals');\nvar IS_TOUCH = require('enyo/platform').touch;\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\nvar Graphic = require('../../../common/services/graphic.js');\nvar utils = require('../../../common/services/utils.js');\n\nvar interfaceGraphic = module.exports = {\n    configs: {\n        zoomStep: 0.2,\n        containerSpace: 5,\n        strokeColor: '#414141',\n        roundedCorners: 6,\n        pointerAngle: 270\n    },\n    panel: null,\n    width: 0,\n    height: 0,\n    isCollapsed: false,\n    isPullout: false,\n    currentTagName: null,\n    defaultWidth: undefined,\n    defaultHeight: undefined,\n    currentItem: undefined,\n    selectedItem: undefined,\n    selectedArea: {\n        shape: undefined,\n        areaSelect: {fill: '#9CFFFD', 'fill-opacity': 0.1, stroke: '#389CFF'},\n        stroke: '#389CFF',\n        strokeWidth: 1\n    },\n    viewTabs: {},\n    init: function(svg, input) {\n        this.currentTagName = svg.getId();\n        // Init available\n        this.viewTabs[this.currentTagName] = {\n            currentTagName: this.currentTagName,\n            panel: this.panel,\n            bgTop: null,\n            bgBottom: null,\n            mText: new Collection(),\n            mObjectText: new Collection(),\n            mShapes: new Collection(),\n            mObjectShapes: new Collection(),\n            mControls: new Collection(),\n            mObjectControls: new Collection(),\n            mSelectedItems: new Collection()\n        };\n        this.viewTabs[this.currentTagName].g = new Graphic(\n            svg.getId(),\n            input.getId(),\n            this.viewTabs[this.currentTagName],\n            this.width,\n            this.height,\n            this.configs,\n            this.onMouseDown,\n            this.onMouseMove,\n            this.onMouseUp,\n            this.onStart,\n            this.onMove,\n            this.onEnd,\n            this.fIn,\n            this.fOut\n        );\n        var paper = this.viewTabs[this.currentTagName].g.paper;\n        // Add clipPath\n        this.viewTabs[this.currentTagName].clipPath = paper.el(\"clippath\");\n        this.viewTabs[this.currentTagName].clipPathHtml = utils.makeSVG('clipPath', {id: \"svgPath_\" + this.currentTagName});\n        this.viewTabs[this.currentTagName].g.appendChild(this.viewTabs[this.currentTagName].clipPathHtml);\n\n        // Add highlight\n        this.viewTabs[this.currentTagName].g.appendChild(utils.makeHighlight(this.currentTagName + \"_hlShape\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0\"));\n        this.viewTabs[this.currentTagName].g.appendChild(utils.makeHighlight(this.currentTagName + \"_highlight\"));\n        // Add background group\n        this.viewTabs[this.currentTagName].bgGroup = this.viewTabs[this.currentTagName].g.group();\n        // Add border group\n        this.viewTabs[this.currentTagName].borderGroup = this.viewTabs[this.currentTagName].g.group();\n        // Add container group\n        this.viewTabs[this.currentTagName].containerGroup = this.viewTabs[this.currentTagName].g.group();\n        this.viewTabs[this.currentTagName].containerGroup.count = 0;\n        // Add control group\n        this.viewTabs[this.currentTagName].controlGroup = this.viewTabs[this.currentTagName].g.group();\n        this.viewTabs[this.currentTagName].controlGroup.count = 0;\n\n        // Set size default\n        if(!this.defaultWidth || !this.defaultHeight) {\n            this.defaultWidth = this.width;\n            this.defaultHeight = this.height;\n        }\n\n        // Add ImportEventListener\n        function dragover(e) {\n            e.stopPropagation();\n            e.preventDefault();\n        }\n\n        function drop(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            var dt = e.dataTransfer;\n            var files = dt.files;\n            // Set background\n            interfaceGraphic.setBackgroundByBase64(files, \"\");\n        }\n\n        var dropbox = document.getElementById(this.currentTagName);\n        dropbox.addEventListener('dragover', dragover, false);\n        dropbox.addEventListener('drop', drop, false);\n\n        // Add default\n        //this.setBackgroundByBase64(\"assets/images/temps/interface/temp.png\", \"bgTop\");\n        //this.setBackgroundByBase64(\"assets/images/temps/interface/temp2.png\", \"bgBottom\");\n\n        // Set zoom\n        this.setZoom(this.width, this.height);\n    },\n    onMouseDown: function(e) {\n        var me = interfaceGraphic;\n        var viewTab = me.viewTabs[me.currentTagName];\n        viewTab.g.mMouse.start = viewTab.g.getPosition();\n\n        // Check Pullout\n        //if(!(!!me.currentItem && ((me.currentItem.objType === OBJECTS.CONTROL && me.currentItem.info.objKind !== INTERFACE_ITEM_TYPE.CONTAINER)\n        //    || me.currentItem.objType === OBJECTS.POINTER\n        //    || me.currentItem.objType === OBJECTS.TIMER))) {\n        //    me.panel.toggleSetting(false);\n        //} else {\n        //    if(me.currentItem.objType === OBJECTS.POINTER || me.currentItem.objType === OBJECTS.TIMER) {\n        //        me.panel.toggleSetting(me.currentItem.parentControl);\n        //    } else {\n        //        me.panel.toggleSetting(me.currentItem);\n        //    }\n        //}\n        if(!(!!me.currentItem && (me.currentItem == me.currentSelect || (!!me.currentItem.parentControl && me.currentItem.parentControl == me.currentSelect)))) {\n            me.panel.toggleSetting(false);\n        }\n\n        // Check Selected Item\n        if(!me.currentItem && !!me.selectedItem) {\n            if(me.selectedItem.objType === OBJECTS.POINTER || me.selectedItem.objType === OBJECTS.TIMER) {\n                me.selectedItem.parentControl.selectChange(false);\n            }\n            if(typeof me.selectedItem.selectChange === 'function') {\n                me.selectedItem.selectChange(false);\n            }\n            me.selectedItem = undefined;\n        }\n        // Set variables\n        GB.isStart = true;\n        viewTab.g.turnOnTextBoxToAddText(false);\n    },\n    // fn draw shape mouse move\n    onMouseMove: function(e) {\n        var viewTab = interfaceGraphic.viewTabs[interfaceGraphic.currentTagName];\n        viewTab.g.mMouse.position = viewTab.g.getPosition();\n        var x = viewTab.g.mMouse.start.x > viewTab.g.mMouse.position.x ? viewTab.g.mMouse.position.x : viewTab.g.mMouse.start.x,\n            y = viewTab.g.mMouse.start.y > viewTab.g.mMouse.position.y ? viewTab.g.mMouse.position.y : viewTab.g.mMouse.start.y,\n            w = Math.abs(viewTab.g.mMouse.start.x - viewTab.g.mMouse.position.x),\n            h = Math.abs(viewTab.g.mMouse.start.y - viewTab.g.mMouse.position.y);\n        if(toolIcons.isAddRectangle && GB.isStart) {\n            if(interfaceGraphic.selectedArea.shape === undefined) {\n                interfaceGraphic.selectedArea.shape = viewTab.g.rect(x, y, w, h).attr(interfaceGraphic.selectedArea.areaSelect);\n            } else {\n                interfaceGraphic.selectedArea.shape.attr({\n                    x: x,\n                    y: y,\n                    width: w,\n                    height: h\n                }).attr(interfaceGraphic.selectedArea.areaSelect);\n            }\n        } else if(toolIcons.isAddCircle && GB.isStart) {\n            if(interfaceGraphic.selectedArea.shape === undefined) {\n                interfaceGraphic.selectedArea.shape = viewTab.g.ellipse(x + w / 2, y + h / 2, w / 2, h / 2).attr(interfaceGraphic.selectedArea.areaSelect);\n            } else {\n                interfaceGraphic.selectedArea.shape.attr({\n                    cx: x + w / 2,\n                    cy: y + h / 2,\n                    rx: w / 2,\n                    ry: h / 2\n                }).attr(interfaceGraphic.selectedArea.areaSelect);\n            }\n        }\n    },\n    // fn draw shape mouse up\n    onMouseUp: function(e) {\n        var viewTab = interfaceGraphic.viewTabs[interfaceGraphic.currentTagName];\n        viewTab.g.mMouse.position = viewTab.g.getPosition();\n        //if(toolIcons.isAddRectangle || toolIcons.isAddCircle) {\n        if(toolIcons.isAddRectangle || toolIcons.isAddCircle) {\n            if(interfaceGraphic.selectedArea.shape) {\n                var bb = interfaceGraphic.selectedArea.shape.getBBox();\n                interfaceGraphic.createShape({\n                    type: toolIcons.isAddRectangle ? SHAPE_TYPES.RECTANGLE : SHAPE_TYPES.CIRCLE,\n                    x: bb.x,\n                    y: bb.y,\n                    w: bb.width,\n                    h: bb.height\n                });\n            }\n            if(interfaceGraphic.selectedArea.shape !== undefined) {\n                interfaceGraphic.selectedArea.shape.remove();\n                interfaceGraphic.selectedArea.shape = undefined;\n            }\n        } else if(toolIcons.isAddPolyline) {\n            var isFinish = false;\n            if(GB.points.length >= 3) { // Check create polyLine\n                var nodeRoot = GB.points[0];\n                if((nodeRoot.x - 10 < viewTab.g.mMouse.position.x && viewTab.g.mMouse.position.x < nodeRoot.x + 10) &&\n                    (nodeRoot.y - 10 < viewTab.g.mMouse.position.y && viewTab.g.mMouse.position.y < nodeRoot.y + 10)) {\n                    interfaceGraphic.createPolyLine();\n                    isFinish = true;\n                }\n            }\n            if(!isFinish) {\n                GB.points.push({x: viewTab.g.mMouse.position.x, y: viewTab.g.mMouse.position.y});\n                if(interfaceGraphic.selectedArea.shape === undefined) {\n                    interfaceGraphic.selectedArea.shape = viewTab.g.path(utils.getPoints(GB.points)).attr({\n                        stroke: interfaceGraphic.selectedArea.stroke,\n                        'stroke-width': interfaceGraphic.selectedArea.strokeWidth,\n                        fill: \"none\"\n                    });\n                }\n                else {\n                    interfaceGraphic.selectedArea.shape.attr({\n                        path: utils.getPoints(GB.points)\n                    });\n                }\n            }\n        } else if(toolIcons.isAddText) { // Add Text and Off textBox\n            var input = viewTab.g.input;\n            if(!!input) {\n                if(input.value.trim() != \"\") {\n                    var text = viewTab.g.createText({\n                        x: input.x,\n                        y: input.y,\n                        text: input.value\n                    });\n                }\n            }\n            // Edit Text\n            if(!!interfaceGraphic.currentItem) {\n                if(interfaceGraphic.currentItem.objType == OBJECTS.TEXT) {\n                    var pan = viewTab.g.panZoom.getCurrentPosition();\n\n                    var left = (parseFloat(interfaceGraphic.currentItem.attr('x')) - pan.x) / viewTab.g.scale - parseInt(input.getAttribute('width')) / 2;\n                    var top = (parseFloat(interfaceGraphic.currentItem.attr('y')) - pan.y) / viewTab.g.scale - parseInt(input.getAttribute('height')) / 2;\n\n                    input.x = parseFloat(interfaceGraphic.currentItem.attr('x'));\n                    input.y = parseFloat(interfaceGraphic.currentItem.attr('y'));\n\n                    input.style.left = left + 'px';\n                    input.style.top = top + 'px';\n                    input.style.display = 'block';\n                    input.value = interfaceGraphic.currentItem.attr('text');\n                    input.focus();\n\n                    interfaceGraphic.g.removeText(interfaceGraphic.currentItem);\n                    interfaceGraphic.currentItem = undefined;\n                }\n            }\n            else {\n                viewTab.g.turnOnTextBoxToAddText(true);\n            }\n        }\n        // Reset variables\n        GB.isStart = false;\n    },\n    // fn fin\n    fIn: function() {\n        interfaceGraphic.currentItem = this;\n    },\n    // fn fout\n    fOut: function() {\n        interfaceGraphic.currentItem = undefined;\n    },\n    // fn onstart\n    onStart: function(x, y) {\n        var viewTab = interfaceGraphic.viewTabs[interfaceGraphic.currentTagName];\n        if(!viewTab.g || (viewTab.g && !viewTab.g.verify(this))) {\n            return false;\n        }\n\n        interfaceGraphic.panel.activeReset();\n\n        if(IS_TOUCH) {\n            var offset = viewTab.g.getOffset();\n            viewTab.g.mMouse.position = {\n                x: x - offset.left,\n                y: y - offset.top\n            };\n        }\n\n        if(this.objType === OBJECTS.CONTROL) {\n            if(!!this.pointer) {\n                this.pointer.attrX = parseFloat(this.pointer.attr('x'));\n                this.pointer.attrY = parseFloat(this.pointer.attr('y'));\n            }\n            if(!!this.timer) {\n                this.timer.attrX = parseFloat(this.timer.attr('x'));\n                this.timer.attrY = parseFloat(this.timer.attr('y'));\n            }\n            if(this.info.objKind === INTERFACE_ITEM_TYPE.CONTAINER) {\n                for(var i = 0; i < this.children.count; i++) {\n                    var item = this.children.item(i);\n                    if(!!item.pointer) {\n                        item.pointer.attrX = parseFloat(item.pointer.attr('x'));\n                        item.pointer.attrY = parseFloat(item.pointer.attr('y'));\n                    }\n                    if(!!item.timer) {\n                        item.timer.attrX = parseFloat(item.timer.attr('x'));\n                        item.timer.attrY = parseFloat(item.timer.attr('y'));\n                    }\n                }\n            }\n        } else if(this.objType === OBJECTS.POINTER || this.objType === OBJECTS.TIMER) {\n            this.attrX = parseFloat(this.attr('x'));\n            this.attrY = parseFloat(this.attr('y'));\n        } else if(this.objType === OBJECTS.TEXT) {\n            this.attr({stroke: '#B8C8E6', 'stroke-opacity': .5});\n        }\n        this.dx = 0;\n        this.dy = 0;\n\n        // Disable selected\n        if(!!interfaceGraphic.selectedItem) {\n            if(interfaceGraphic.selectedItem.objType === OBJECTS.POINTER || interfaceGraphic.selectedItem.objType === OBJECTS.TIMER) {\n                if(this.objType === OBJECTS.POINTER || this.objType === OBJECTS.TIMER) {\n                    if(interfaceGraphic.selectedItem.parentControl !== this.parentControl) {\n                        interfaceGraphic.selectedItem.parentControl.selectChange(false);\n                    }\n                } else if(this.objType === OBJECTS.CONTROL) {\n                    if(interfaceGraphic.selectedItem.parentControl !== this) {\n                        interfaceGraphic.selectedItem.parentControl.selectChange(false);\n                    }\n                }\n            } else if(interfaceGraphic.selectedItem.objType === OBJECTS.CONTROL && interfaceGraphic.selectedItem.info.objKind !== INTERFACE_ITEM_TYPE.CONTAINER) {\n                if(this.objType === OBJECTS.POINTER || this.objType === OBJECTS.TIMER) {\n                    if(interfaceGraphic.selectedItem !== this.parentControl) {\n                        interfaceGraphic.selectedItem.selectChange(false);\n                    }\n                } else if(this.objType === OBJECTS.CONTROL) {\n                    if(interfaceGraphic.selectedItem !== this) {\n                        interfaceGraphic.selectedItem.selectChange(false);\n                    }\n                }\n            }\n        }\n        if(this.objType === OBJECTS.POINTER || this.objType === OBJECTS.TIMER) {\n            this.parentControl.selectChange(true);\n        }\n        if(typeof this.selectChange === 'function') {\n            this.selectChange(true);\n        }\n\n        interfaceGraphic.selectedItem = this;\n        interfaceGraphic.currentItem = this;\n    },\n    // fn onmove\n    onMove: function(dx, dy) {\n        var viewTab = interfaceGraphic.viewTabs[interfaceGraphic.currentTagName];\n        if(!viewTab.g || (viewTab.g && !viewTab.g.verify(this))) {\n            return false;\n        }\n\n        dx = dx * viewTab.g.scale;\n        dy = dy * viewTab.g.scale;\n        if(this.objType === OBJECTS.CONTROL) {\n            if(this.info.objKind === INTERFACE_ITEM_TYPE.CONTAINER) {\n                for(var i = 0; i < this.children.count; i++) {\n                    var item = this.children.item(i);\n                    item.label.transform(\"R0T\" + dx + ',' + dy);\n                    item.contains.transform(\"R0T\" + dx + ',' + dy);\n                }\n                this.transform(\"R0T\" + dx + ',' + dy);\n            } else {\n                this.transform(\"R0T\" + dx + ',' + dy);\n                this.label.transform(\"R0T\" + dx + ',' + dy);\n                // Check move tail\n                if(!!this.pointer) {\n                    this.pointer.attr({\n                        x: this.pointer.attrX + dx,\n                        y: this.pointer.attrY + dy\n                    });\n                    this.pointer.transform('R' + this.pointer.angle + \",\" + this.getBBox().cx + \",\" + this.getBBox().cy + 'T0,0');\n                }\n                // Check move timer\n                if(!!this.timer) {\n                    this.timer.attr({\n                        x: this.timer.attrX + dx,\n                        y: this.timer.attrY + dy\n                    });\n                    this.timer.transform('R' + this.timer.angle + \",\" + this.getBBox().cx + \",\" + this.getBBox().cy + 'T0,0');\n                }\n            }\n        } else if(this.objType === OBJECTS.POINTER) {\n            var position = viewTab.g.getPosition();\n            var bb = this.parentControl.getBBox();\n            // Calculate angle\n            this.angle = Math.atan2(position.x - bb.cx, -(position.y - bb.cy)) * (180 / Math.PI) + 90;\n            if(this.angle < 0) {\n                this.angle = 360 + this.angle;\n            }\n            this.transform('R' + this.angle + \",\" + this.parentControl.getBBox().cx + \",\" + this.parentControl.getBBox().cy + 'T0,0');\n            // Send update\n            var angle = interfaceGraphic.configs.pointerAngle - this.angle;\n            if(angle < 0) {\n                angle = 360 + angle;\n            }\n            // Save input\n            this.parentControl.info.pointerAngle = angle;\n            // Send angle\n            Signals.send('onPointAngleUpdate', {pointerAngle: Math.round(angle)});\n        } else if(this.objType === OBJECTS.TIMER) {\n            var position = viewTab.g.getPosition();\n            var bb = this.parentControl.getBBox();\n            // Calculate angle\n            this.angle = Math.atan2(position.x - bb.cx, -(position.y - bb.cy)) * (180 / Math.PI);\n            this.transform('R' + this.angle + \",\" + this.parentControl.getBBox().cx + \",\" + this.parentControl.getBBox().cy + 'T0,0');\n        } else if(this.objType === OBJECTS.TEXT) {\n            this.transform(\"R0T\" + dx + ',' + dy);\n        }\n        this.dx = dx;\n        this.dy = dy;\n    },\n    // fn onend\n    onEnd: function(e) {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n        if(!viewTab.g || (viewTab.g && !viewTab.g.verify(this))) {\n            return false;\n        }\n\n        if(this.objType === OBJECTS.CONTROL) {\n            this.transform(\"R0T0,0\");\n            this.attr({\n                x: parseFloat(this.attr('x')) + this.dx,\n                y: parseFloat(this.attr('y')) + this.dy\n            });\n            if(this.info.objKind === INTERFACE_ITEM_TYPE.CONTAINER) {\n                for(var i = 0; i < this.children.count; i++) {\n                    var item = this.children.item(i);\n                    item.attr({\n                        x: parseFloat(item.attr('x')) + this.dx,\n                        y: parseFloat(item.attr('y')) + this.dy\n                    });\n                    item.contains.transform('R0T0,0');\n                    item.label.transform(\"R0T0,0\");\n                    item.label.attr({\n                        x: parseFloat(item.label.attr('x')) + this.dx,\n                        y: parseFloat(item.label.attr('y')) + this.dy\n                    });\n                    if(!!item.pointer) {\n                        item.pointer.attr({\n                            x: parseFloat(item.pointer.attr('x')) + this.dx,\n                            y: parseFloat(item.pointer.attr('y')) + this.dy\n                        });\n                        item.pointer.transform('R' + item.pointer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                    if(!!item.timer) {\n                        item.timer.attr({\n                            x: parseFloat(item.timer.attr('x')) + this.dx,\n                            y: parseFloat(item.timer.attr('y')) + this.dy\n                        });\n                        item.timer.transform('R' + item.timer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                }\n            } else {\n                this.label.transform(\"R0T0,0\");\n                this.label.attr({\n                    x: parseFloat(this.label.attr('x')) + this.dx,\n                    y: parseFloat(this.label.attr('y')) + this.dy\n                });\n                // Check move tail\n                if(!!this.pointer) {\n                    this.pointer.transform('R' + this.pointer.angle + \",\" + this.getBBox().cx + \",\" + this.getBBox().cy + 'T0,0');\n                    this.pointer.attr({\n                        x: this.pointer.attrX + this.dx,\n                        y: this.pointer.attrY + this.dy\n                    });\n                }\n                // Check move timer\n                if(!!this.timer) {\n                    this.timer.transform('R' + this.timer.angle + \",\" + this.getBBox().cx + \",\" + this.getBBox().cy + 'T0,0');\n                    this.timer.attr({\n                        x: this.timer.attrX + this.dx,\n                        y: this.timer.attrY + this.dy\n                    });\n                }\n                // Check resize container\n                interfaceGraphic.validateContainer(this);\n            }\n        } else if(this.objType === OBJECTS.TEXT) {\n            this.transform(\"R0T0,0\");\n            this.attr({stroke: 'none'});\n            this.attr({\n                x: parseFloat(this.attr('x')) + this.dx,\n                y: parseFloat(this.attr('y')) + this.dy\n            });\n        }\n\n        // Add stack list\n        STACK_LIST.addStack(me.currentTagName, me.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, this, {\n            dx: this.dx,\n            dy: this.dy\n        });\n\n        this.dx = 0;\n        this.dy = 0;\n\n        interfaceGraphic.currentItem = undefined;\n    },\n    // fn draw shape\n    drawShape: function(panel, object) {\n        var viewTab = this.viewTabs[this.currentTagName];\n        var shape = new Object();\n        if(object.type === SHAPE_TYPES.RECTANGLE) {\n            shape = panel.rect(object.x, object.y, object.w, object.h).attr({\n                rx: 6,\n                ry: 6\n            });\n            shape.outline = panel.rect(object.x, object.y, object.w, object.h).attr({\n                fill: 'transparent',\n                rx: 6,\n                ry: 6,\n                stroke: this.configs.strokeColor,\n                'stroke-width': 6\n            });\n        } else if(object.type === SHAPE_TYPES.CIRCLE) {\n            shape = panel.ellipse(object.x + object.w / 2, object.y + object.h / 2, object.w / 2, object.h / 2);\n            shape.outline = panel.ellipse(object.x + object.w / 2, object.y + object.h / 2, object.w / 2, object.h / 2).attr({\n                fill: 'transparent',\n                stroke: this.configs.strokeColor,\n                'stroke-width': 6\n            });\n        } else if(object.type === SHAPE_TYPES.POLYLINE) {\n            object.path = roundPathCorners(object.path, 6, false);\n            shape = panel.path(object.path);\n            shape.outline = panel.path(object.path).attr({\n                fill: 'transparent',\n                stroke: this.configs.strokeColor,\n                'stroke-width': 6\n            });\n        }\n        // Add to layer\n        viewTab.borderGroup.add(shape.outline);\n\n        shape.selectChange = function(flag) {\n            if(flag) {\n                this.attr({filter: \"url(#\" + interfaceGraphic.currentTagName + \"_hlShape)\"})\n            } else {\n                this.attr({filter: \"none\"})\n            }\n        };\n        shape.info = object;\n        shape.id = object.id;\n        shape.objType = OBJECTS.SHAPE;\n        //shape.drag(this.onMove, this.onStart, this.onEnd);\n\n        return shape;\n    },\n    // fn draw control\n    drawControl: function(object) {\n        var me = interfaceGraphic;\n        var viewTab = me.viewTabs[me.currentTagName];\n        var control = new Object();\n        if(object.objKind === INTERFACE_ITEM_TYPE.CONTAINER) {\n            control = viewTab.g.rect(object.x, object.y, object.width, object.height).attr({\n                rx: 8,\n                ry: 8,\n                fill: \"#d9d9d9\",\n                stroke: \"#3e3e3e\",\n                'stroke-width': 3,\n                opacity: 0.8\n            });\n            control.children = new Collection();\n            control.availableSize = false;\n            control.defaultSize = {width: object.width, height: object.height};\n            viewTab.containerGroup.add(control);\n            viewTab.containerGroup.count++;\n\n            control.info = object;\n            control.id = object.id;\n            control.objType = OBJECTS.CONTROL;\n\n            control.drag(this.onMove, this.onStart, this.onEnd);\n        } else {\n            control = viewTab.g.image(object.url, object.x, object.y, object.width, object.height);\n            control.parentContainer = undefined;\n\n            var contains = viewTab.g.group();\n            contains.add(control);\n\n            viewTab.controlGroup.add(contains);\n            viewTab.controlGroup.count++;\n\n            control.info = object;\n            control.id = object.id;\n            control.objType = OBJECTS.CONTROL;\n\n            var bb = control.getBBox();\n\n            if(control.info.objKind === INTERFACE_ITEM_TYPE.USER_INPUT) {\n                // Create pointer for user inputs - position left\n                control.pointer = viewTab.g.image(\"assets/images/interfaces/userinputs/off/tail.svg\", bb.x - 22, bb.y + 13, 27, 19).attr('cursor', 'pointer');\n                control.pointer.angle = me.configs.pointerAngle;\n                control.pointer.parentControl = control;\n                control.pointer.objType = OBJECTS.POINTER;\n\n                if(IS_TOUCH) { // On Mobile\n                    control.pointer.touchstart(function() {\n                        this.parentControl.selectChange(true);\n                        me.panel.toggleSetting(this.parentControl);\n                        me.currentSelect = this.parentControl;\n                    });\n                } else { // On Desktop\n                    control.pointer.dblclick(function() {\n                        this.parentControl.selectChange(true);\n                        me.panel.toggleSetting(this.parentControl);\n                        me.currentSelect = this.parentControl;\n                    });\n                }\n                control.pointer.drag(this.onMove, this.onStart, this.onEnd);\n                contains.add(control.pointer);\n                // Update position to bottom\n                control.pointer.transform('R' + control.pointer.angle + \",\" + control.pointer.parentControl.getBBox().cx + \",\" + control.pointer.parentControl.getBBox().cy + 'T0,0');\n\n                // Create timer\n                control.timer = viewTab.g.image(\"assets/images/interfaces/userinputs/off/timer.svg\", bb.cx - 4, bb.y - 1, 8, 8).attr('cursor', 'pointer');\n                control.timer.angle = 0;\n                control.timer.parentControl = control;\n                control.timer.objType = OBJECTS.TIMER;\n\n                if(IS_TOUCH) { // On Mobile\n                    control.timer.touchstart(function() {\n                        this.parentControl.selectChange(true);\n                        me.panel.toggleSetting(this.parentControl);\n                        me.currentSelect = this.parentControl;\n                    });\n                } else { // On Desktop\n                    control.timer.dblclick(function() {\n                        this.parentControl.selectChange(true);\n                        me.panel.toggleSetting(this.parentControl);\n                        me.currentSelect = this.parentControl;\n                    });\n                }\n                control.timer.drag(this.onMove, this.onStart, this.onEnd);\n                contains.add(control.timer);\n            }\n\n            // Create label\n            control.label = viewTab.g.drawText({\n                x: bb.cx,\n                y: bb.y2 + 12,\n                text: object.name.toUpperCase()\n            }, true).attr({\n                fontSize: 9,\n                fontWeight: 'bold',\n                opacity: 0.001,\n                display: 'none',\n                fill: '#444'\n            });\n            //contains.add(control.label);\n            control.contains = contains;\n\n            control.selectChange = function(flag) {\n                if(flag) {\n                    this.contains.attr({filter: \"url(#\" + me.currentTagName + \"_highlight)\"})\n                } else {\n                    this.contains.attr({filter: \"none\"})\n                }\n            };\n\n            // Change info\n            control.changeInfo = function(type) {\n                if(type === 'pointerStyle') {\n                    if(!this.info.pointerStyle) {\n                        this.pointer.attr('opacity', .001);\n                    } else {\n                        this.pointer.attr('opacity', 1);\n                    }\n                } else if(type === 'timerStyle') {\n                    if(!this.info.timerStyle) {\n                        this.timer.attr('opacity', .001);\n                    } else {\n                        this.timer.attr('opacity', 1);\n                    }\n                }\n            };\n\n            // Event click\n            if(IS_TOUCH) { // On Mobile\n                control.touchstart(function() {\n                    me.panel.toggleSetting(this);\n                    me.currentSelect = this;\n                });\n            } else { // On Desktop\n                control.dblclick(function() {\n                    me.panel.toggleSetting(this);\n                    me.currentSelect = this;\n                });\n            }\n\n            control.drag(this.onMove, this.onStart, this.onEnd);\n\n            function init() {\n                if(control.info.objKind === INTERFACE_ITEM_TYPE.USER_INPUT) {\n                    control.info.pointerStyle = true;\n                    control.changeInfo('pointerStyle');\n\n                    control.info.timerStyle = false;\n                    control.changeInfo('timerStyle');\n                }\n\n                // Check Selected Item\n                if(!!me.selectedItem) {\n                    if(me.selectedItem.objType === OBJECTS.POINTER || me.selectedItem.objType === OBJECTS.TIMER) {\n                        me.selectedItem.parentControl.selectChange(false);\n                    }\n                    if(typeof me.selectedItem.selectChange === 'function') {\n                        me.selectedItem.selectChange(false);\n                    }\n                }\n                control.selectChange(true);\n                me.selectedItem = control;\n                me.currentSelect = control;\n                // Open setting panel\n                me.panel.toggleSetting(control);\n            }\n\n            init();\n        }\n\n        return control;\n    },\n    // fn create shape\n    createShape: function(options) {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n        var shape = new Shape(options.type, options.x, options.y, options.w, options.h, options.path);\n        var item = this.drawShape(viewTab.g, shape);\n        viewTab.mShapes.add(shape, true);\n        viewTab.mObjectShapes.add(item);\n        viewTab.clipPath.add(item);\n        // Add clip path\n        var node = viewTab.clipPath.node.childNodes[0];\n        viewTab.clipPathHtml.appendChild(node);\n        // Add task list\n        node.outline = item.outline;\n        STACK_LIST.addStack(me.currentTagName, me.panel.name, STACK_TYPES.SVG, STACK_METHODS.CREATE, node);\n    },\n    // fn create polyline\n    createPolyLine: function() {\n        var path = utils.mergingPoints(GB.points);\n        path += ' Z';\n        this.createShape({\n            type: SHAPE_TYPES.POLYLINE,\n            path: path\n        });\n        if(this.selectedArea.shape !== undefined) {\n            GB.points = new Array();\n            this.selectedArea.shape.remove();\n            this.selectedArea.shape = undefined;\n        }\n    },\n    // fn create control\n    createControl: function(options) {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n        options.x = options.x * viewTab.g.scale + viewTab.g.panZoom.getCurrentPosition().x;\n        options.y = options.y * viewTab.g.scale + viewTab.g.panZoom.getCurrentPosition().y;\n        var control = new Control(options.type, options.kind, options.name, options.url, options.x, options.y, options.width, options.height, options.data);\n        viewTab.mControls.add(control, true);\n        var objectControl = this.drawControl(control);\n        viewTab.mObjectControls.add(objectControl);\n        // Check if exist container\n        if(objectControl.info.objKind !== INTERFACE_ITEM_TYPE.CONTAINER) {\n            this.validateContainer(objectControl);\n        } else { // Container\n            objectControl.objCon = options.data.containerType;\n        }\n\n        // Add task list\n        STACK_LIST.addStack(me.currentTagName, me.panel.name, STACK_TYPES.SVG, STACK_METHODS.CREATE, objectControl);\n\n        return true;\n    },\n    // fn remove control\n    removeControl: function(item) {\n        var viewTab = this.viewTabs[this.currentTagName];\n        if(item.info.objKind === INTERFACE_ITEM_TYPE.CONTAINER) {\n            viewTab.containerGroup.count--;\n        } else {\n            viewTab.controlGroup.count--;\n        }\n        // Remove info\n        viewTab.mControls.remove(item);\n        // Remove object\n        viewTab.mObjectControls.remove(item);\n        item.remove();\n    },\n    // Delete item selected\n    deleteSelectedItems: function() {\n        if(!!this.selectedItem) {\n            var me = interfaceGraphic,\n                viewTab = me.viewTabs[me.currentTagName];\n            // Remove info\n            viewTab.mControls.remove(me.selectedItem);\n            // Remove object\n            viewTab.mObjectControls.forEach(function(control) {\n                if(control === me.selectedItem) {\n                    if(control.info.objKind === INTERFACE_ITEM_TYPE.CONTAINER) {\n                        for(var i = 0; i < control.children.count; i++) {\n                            var item = control.children.item(i);\n                            viewTab.mControls.remove(item);\n                            if(!!item.pointer) {\n                                item.pointer.remove();\n                            }\n                            if(!!item.timer) {\n                                item.timer.remove();\n                            }\n                            if(!!item.label) {\n                                item.label.remove();\n                            }\n                            item.remove();\n                        }\n                    }\n                    if(!!control.pointer) {\n                        control.pointer.remove();\n                    }\n                    if(!!control.timer) {\n                        control.timer.remove();\n                    }\n                    if(!!control.label) {\n                        control.label.remove();\n                    }\n                    control.remove();\n                }\n            });\n            me.panel.toggleSetting(false);\n        }\n    },\n    // Import to background\n    setBackgroundByBase64: function(files, position) {\n        var _self = interfaceGraphic,\n            viewTab = _self.viewTabs[_self.currentTagName],\n            tagName = _self.currentTagName;\n\n        // Show loading\n        Signals.send('onLoading', {method: 'show'});\n\n        utils.getImageUrl(files).then(function(result) {\n            if(result) {\n                var t = result.width / result.height;\n                var width, height;\n                //var sw = result.width / _self.defaultWidth;\n                //var sh = result.height / _self.defaultHeight;\n                //if(sw > sh) {\n                //    height = _self.defaultHeight;\n                //    width = height * t;\n                //} else {\n                //    width = _self.defaultWidth;\n                //    height = width / t;\n                //}\n\n                // Fix width size\n                width = _self.defaultWidth;\n                height = width / t;\n\n                utils.convertImgToBase64(result.url, function(base64Img) {\n                    if(position != 'bgTop' && position != 'bgBottom') {\n                        if(viewTab['bgBottom'] == null) {\n                            position = 'bgBottom';\n                        } else if(viewTab['bgTop'] == null) {\n                            position = 'bgTop';\n                        } else {\n                            position = 'bgBottom';\n                        }\n                    }\n                    if(viewTab[position] != null) {\n                        viewTab[position].remove();\n                        viewTab[position] = null;\n                    }\n                    viewTab[position] = viewTab.g.image(base64Img, 0, 0, width, height);\n                    if(position == 'bgTop') {\n                        viewTab.bgGroup.prepend(viewTab[position]);\n                    } else {\n                        viewTab.bgGroup.append(viewTab[position]);\n                    }\n                    if(viewTab['bgTop'] != null && viewTab['bgBottom'] != null) {\n                        viewTab['bgBottom'].node.setAttribute('clip-path', 'url(#svgPath_' + tagName + ')');\n                    }\n\n                    // Close loading\n                    Signals.send('onLoading', {method: 'hide'});\n                })\n\n            } else {\n                Signals.send('onLoading', {method: 'hide'});\n            }\n        });\n    },\n    setSize: function(width, height) {\n        var _self = interfaceGraphic,\n            viewTab = _self.viewTabs[_self.currentTagName];\n        _self.width = width;\n        _self.height = height;\n\n        // Resize\n        if(!!viewTab) {\n            viewTab.g.setSize(width, height, false);\n        }\n\n        // Zoom\n        _self.setZoom(width, height);\n\n        //var viewTab = this.viewTabs[this.currentTagName];\n        //if(!!viewTab) {\n        //    // Resize background\n        //    if(!!viewTab[\"bgTop\"]) {\n        //        viewTab[\"bgTop\"].attr({\n        //            width: this.width,\n        //            height: this.height\n        //        });\n        //    }\n        //    if(!!viewTab[\"bgBottom\"]) {\n        //        viewTab[\"bgBottom\"].attr({\n        //            width: this.width,\n        //            height: this.height\n        //        });\n        //    }\n        //}\n    },\n    setZoom: function(width, height) {\n        var _self = interfaceGraphic,\n            viewTab = _self.viewTabs[_self.currentTagName];\n\n        if(!!viewTab) {\n            //viewTab.g.scaleViewPort(width / _self.defaultWidth, height / _self.defaultHeight);\n\n            // Zoom width size\n            viewTab.g.zoomByRoot(width / _self.defaultWidth);\n        }\n    },\n    // Redaw user input\n    setPointerAngle: function(mControl) {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n\n        for(var i = 0; i < viewTab.mObjectControls.count; i++) {\n            var item = viewTab.mObjectControls.item(i);\n            if(item.info == mControl) {\n                if(!!item.pointer) {\n                    var angle = interfaceGraphic.configs.pointerAngle - mControl.pointerAngle;\n                    if(angle < 0) {\n                        angle = 360 + angle;\n                    }\n                    item.pointer.angle = angle;\n                    item.pointer.transform('R' + item.pointer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                }\n                break;\n            }\n        }\n    },\n    // Calculate contains size for item control\n    calculateItemControlSize: function(item) {\n        var bb = item.getBBox(),\n            lbb = item.label.getBBox(),\n            x = bb.x, x2 = bb.x2, y = bb.y, y2 = bb.y2,\n            lx = lbb.x, lx2 = lbb.x2, ly = lbb.y, ly2 = lbb.y2;\n\n        if(lx > 0 && lx < x) x = lx;\n        if(lx2 > 0 && lx2 > x2) x2 = lx2;\n        if(ly2 > 0 && ly2 > y2) y2 = ly2;\n\n        return {x: x, x2: x2, y: y, y2: y2, cx: (x + x2) / 2, cy: (y + y2) / 2, width: x2 - x, height: y2 - y};\n    },\n    // Check and set control to container\n    validateContainer: function(item) {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName],\n            container = false;\n        var bbItem = me.calculateItemControlSize(item);\n        for(var i = 0; i < viewTab.containerGroup.count; i++) {\n            var bbContainer = viewTab.containerGroup[i].getBBox();\n            if(bbContainer.x < bbItem.cx && bbItem.cx < bbContainer.x2 && bbContainer.y < bbItem.cy && bbItem.cy < bbContainer.y2) {\n                container = viewTab.containerGroup[i];\n                break;\n            }\n        }\n        if(container) {\n            if(container !== item.parentContainer) {\n                if(item.parentContainer != undefined) {\n                    var parentContainer = item.parentContainer;\n                    if(!parentContainer.children.remove(item)) {\n                        console.log(\"error\");\n                    }\n                    me.resizeContainer(parentContainer);\n                }\n                container.children.add(item);\n                item.parentContainer = container;\n                item.label.attr({\n                    opacity: 1,\n                    display: ''\n                });\n                if(!!item.pointer) {\n                    item.pointer.attr('display', 'none');\n                }\n            }\n            me.resizeContainer(container);\n        } else {\n            if(item.parentContainer != undefined) {\n                var parentContainer = item.parentContainer;\n                if(!parentContainer.children.remove(item)) {\n                    console.log(\"error\");\n                }\n                item.parentContainer = undefined;\n                item.label.attr({\n                    opacity: 0.001,\n                    display: 'none'\n                });\n                if(!!item.pointer) {\n                    item.pointer.attr('display', '');\n                }\n                me.resizeContainer(parentContainer);\n            }\n        }\n\n        return container;\n    },\n    // Resize container\n    resizeContainer: function(container) {\n        var me = interfaceGraphic;\n        if(container.children.count > 0) {\n            var x, x2, y, y2;\n\n            if(container.objCon === CONTAINER_TYPE.HORIZONTAL) {\n                var minHeight = 0, maxHeight = 0,\n                    isSmall = false, isControl = false;\n                var bb = container.getBBox();\n                var minX = bb.x;\n                var maxX = bb.x + container.defaultSize.width;\n                var minY = bb.y;\n                var d = {x: 0, x2: 0};\n\n                for(var i = 0; i < container.children.count; i++) {\n                    var item = container.children.item(i);\n                    var bb = me.calculateItemControlSize(item);\n                    if(item.info.objKind === INTERFACE_ITEM_TYPE.INDICATOR) {\n                        isSmall = true;\n                        minHeight = (minHeight == 0 ? bb.height : (minHeight < bb.height ? bb.height : minHeight));\n                    } else {\n                        isControl = true;\n                        maxHeight = (maxHeight == 0 ? bb.height : (maxHeight < bb.height ? bb.height : maxHeight));\n                    }\n                    if(d.x == 0) {\n                        d.x = bb.x;\n                    } else {\n                        if(d.x > bb.x) d.x = bb.x;\n                    }\n                    if(d.x2 == 0) {\n                        d.x2 = bb.x2;\n                    } else {\n                        if(d.x2 < bb.x2) d.x2 = bb.x2;\n                    }\n                }\n                y = minY;\n                if(d.x2 - d.x > container.defaultSize.width) {\n                    x = d.x - me.configs.containerSpace;\n                    x2 = d.x2 + me.configs.containerSpace;\n                } else {\n                    x = minX;\n                    x2 = maxX;\n                }\n                if(isSmall && isControl) {\n                    y2 = (minY + minHeight * 2) > (minY + maxHeight) ? (minY + minHeight * 2) : (minY + maxHeight) + me.configs.containerSpace * 2;\n                } else if(isSmall) {\n                    y2 = minY + minHeight * 2 + me.configs.containerSpace * 2;\n                } else if(isControl) {\n                    y2 = minY + maxHeight + me.configs.containerSpace * 2;\n                }\n            } else { //CONTAINER_TYPE.VERTICAL\n                var minWidth = 0, maxWidth = 0,\n                    isSmall = false, isControl = false;\n                var bb = container.getBBox();\n                var minX = bb.x;\n                var minY = bb.y;\n                var maxY = bb.y + container.defaultSize.height;\n                var d = {y: 0, y2: 0};\n\n                for(var i = 0; i < container.children.count; i++) {\n                    var item = container.children.item(i);\n                    var bb = me.calculateItemControlSize(item);\n                    if(item.info.objKind === INTERFACE_ITEM_TYPE.INDICATOR) {\n                        isSmall = true;\n                        minWidth = (minWidth == 0 ? bb.width : (minWidth < bb.width ? bb.width : minWidth));\n                    } else {\n                        isControl = true;\n                        maxWidth = (maxWidth == 0 ? bb.width : (maxWidth < bb.width ? bb.width : maxWidth));\n                    }\n                    if(d.y == 0) {\n                        d.y = bb.y;\n                    } else {\n                        if(d.y > bb.y) d.y = bb.y;\n                    }\n                    if(d.y2 == 0) {\n                        d.y2 = bb.y2;\n                    } else {\n                        if(d.y2 < bb.y2) d.y2 = bb.y2;\n                    }\n                }\n                x = minX;\n                if(d.y2 - d.y > container.defaultSize.height) {\n                    y = d.y - me.configs.containerSpace;\n                    y2 = d.y2 + me.configs.containerSpace;\n                } else {\n                    y = minY;\n                    y2 = maxY;\n                }\n                if(isSmall && isControl) {\n                    x2 = (minX + minWidth * 2) > (minX + maxWidth) ? (minX + minWidth * 2) : (minX + maxWidth) + me.configs.containerSpace * 2;\n                } else if(isSmall) {\n                    x2 = minX + minWidth * 2 + me.configs.containerSpace * 2;\n                } else if(isControl) {\n                    x2 = minX + maxWidth + me.configs.containerSpace * 2;\n                }\n            }\n\n            container.attr({\n                x: x,\n                y: y,\n                width: x2 - x,\n                height: y2 - y\n            });\n\n            // Move item in container\n            for(var i = 0; i < container.children.count; i++) {\n                var item = container.children.item(i);\n                var bb = me.calculateItemControlSize(item);\n\n                if(bb.x - me.configs.containerSpace < x) {\n                    var dx = x - bb.x + me.configs.containerSpace;\n                    item.attr('x', parseFloat(item.attr('x')) + dx);\n                    item.label.attr('x', parseFloat(item.label.attr('x')) + dx);\n                    if(!!item.pointer) {\n                        item.pointer.attr('x', parseFloat(item.pointer.attr('x')) + dx);\n                        item.pointer.transform('R' + item.pointer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                    if(!!item.timer) {\n                        item.timer.attr('x', parseFloat(item.timer.attr('x')) + dx);\n                        item.timer.transform('R' + item.timer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                }\n\n                if(bb.x2 + me.configs.containerSpace > x2) {\n                    var dx = bb.x2 + me.configs.containerSpace - x2;\n                    item.attr('x', parseFloat(item.attr('x')) - dx);\n                    item.label.attr('x', parseFloat(item.label.attr('x')) - dx);\n                    if(!!item.pointer) {\n                        item.pointer.attr('x', parseFloat(item.pointer.attr('x')) - dx);\n                        item.pointer.transform('R' + item.pointer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                    if(!!item.timer) {\n                        item.timer.attr('x', parseFloat(item.timer.attr('x')) - dx);\n                        item.timer.transform('R' + item.timer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                }\n\n                if(bb.y - me.configs.containerSpace < y) {\n                    var dy = y - bb.y + me.configs.containerSpace;\n                    item.attr('y', parseFloat(item.attr('y')) + dy);\n                    item.label.attr('y', parseFloat(item.label.attr('y')) + dy);\n                    if(!!item.pointer) {\n                        item.pointer.attr('y', parseFloat(item.pointer.attr('y')) + dy);\n                        item.pointer.transform('R' + item.pointer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                    if(!!item.timer) {\n                        item.timer.attr('y', parseFloat(item.timer.attr('y')) + dy);\n                        item.timer.transform('R' + item.timer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                }\n\n                if(bb.y2 + me.configs.containerSpace > y2) {\n                    var dy = bb.y2 + me.configs.containerSpace - y2;\n                    item.attr('y', parseFloat(item.attr('y')) - dy);\n                    item.label.attr('y', parseFloat(item.label.attr('y')) - dy);\n                    if(!!item.pointer) {\n                        item.pointer.attr('y', parseFloat(item.pointer.attr('y')) - dy);\n                        item.pointer.transform('R' + item.pointer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                    if(!!item.timer) {\n                        item.timer.attr('y', parseFloat(item.timer.attr('y')) - dy);\n                        item.timer.transform('R' + item.timer.angle + \",\" + item.getBBox().cx + \",\" + item.getBBox().cy + 'T0,0');\n                    }\n                }\n\n                item.contains.transform('T0,0');\n            }\n        } else {\n            container.attr({\n                width: container.defaultSize.width,\n                height: container.defaultSize.height\n            });\n        }\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n        var stack = STACK_LIST.getStack(me.currentTagName);\n        if(stack) {\n            var item = stack.object;\n            if(stack.method === STACK_METHODS.CREATE) {\n                if(item.objType === OBJECTS.CONTROL) {\n                    this.removeControl(item);\n                } else if(item.objType === OBJECTS.TEXT) {\n                    viewTab.g.removeText(item);\n                } else { // if shape\n                    if(!!item.outline) {\n                        item.outline.remove();\n                    }\n                    item.remove();\n                }\n            } else if(stack.method === STACK_METHODS.MOVE) {\n                if(item.objType === OBJECTS.CONTROL || item.objType === OBJECTS.TEXT) {\n                    item.attr({\n                        x: parseFloat(item.attr('x')) - stack.data.dx,\n                        y: parseFloat(item.attr('y')) - stack.data.dy\n                    });\n                    item.info.x = parseFloat(item.attr('x'));\n                    item.info.y = parseFloat(item.attr('y'));\n                }\n            } else if(stack.method === STACK_METHODS.REMOVE) {\n                // Action\n            }\n\n            STACK_LIST.removeStack(stack);\n        }\n    },\n    // Check inside draw panel\n    isInside: function() {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n        if(viewTab) {\n            return viewTab.g.isInside();\n        }\n        return false;\n    },\n    // active icons\n    activeIcons: function(keyOn, valOn, keyOff, valOff) {\n        var me = interfaceGraphic,\n            viewTab = me.viewTabs[me.currentTagName];\n        if(!!viewTab && !!viewTab[\"bgTop\"] && !!viewTab[\"bgBottom\"]) {\n            if(keyOn === undefined) {\n                keyOn = 'isSelector';\n            }\n            if(valOn === undefined) {\n                valOn = true;\n            }\n            if(keyOff === undefined) {\n                keyOff = '';\n            }\n            if(valOff === undefined) {\n                valOff = false;\n            }\n            for(var key in toolIcons) {\n                if(key === keyOn) {\n                    toolIcons[key] = valOn;\n                } else if(key === keyOff) {\n                    toolIcons[key] = valOff;\n                } else {\n                    toolIcons[key] = false;\n                }\n            }\n            if(!toolIcons.isAddText) {\n                // Add Text and Off textBox\n                var input = viewTab.g.input;\n                if(!!input) {\n                    if(input.value.trim() != \"\") {\n                        var text = viewTab.g.createText({\n                            x: input.x,\n                            y: input.y,\n                            text: input.value\n                        });\n                    } else {\n                        // Off input\n                        viewTab.g.turnOnTextBoxToAddText(false);\n                        // Reset input value\n                        input.value = \"\";\n                    }\n                }\n            }\n            // If zoom active\n            viewTab.g.panZoom.enable(toolIcons.isZoom);\n            // if move active\n            viewTab.g.panZoom.move(toolIcons.isMoving);\n\n            return true;\n        } else if(keyOn === false) {\n            for(var key in toolIcons) {\n                toolIcons[key] = false;\n            }\n        } else {\n            for(var key in toolIcons) {\n                toolIcons[key] = false;\n            }\n            if(!viewTab) {\n                Signals.send(\"onNotification\", {method: \"message\", message: \"Please add a root view!\"});\n            } else {\n                Signals.send(\"onNotification\", {\n                    method: \"message\",\n                    message: \"Please import top/bottom view image!\"\n                });\n            }\n        }\n        // Reset variable\n        GB.points = new Array();\n        if(this.selectedArea.shape !== undefined) {\n            this.selectedArea.shape.remove();\n            this.selectedArea.shape = undefined;\n        }\n\n        return false;\n    }\n};\n","//\n\nvar Signals = require('enyo/Signals');\nvar IS_TOUCH = require('enyo/platform').touch;\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\nvar Graphic = require('../../../common/services/graphic.js');\nvar utils = require('../../../common/services/utils.js');\n\nvar wiringGraphic = module.exports = {\n    configs: {\n        zoomStep: 0.2,\n        distanceY: 80,\n        distanceAdaptor: 30,\n        distanceSensor: 10\n    },\n    panel: null,\n    width: 0,\n    height: 0,\n    isCollapsed: false,\n    queues: {},\n    currentTagName: null,\n    currentItem: undefined,\n    currentController: undefined,\n    mController: new Collection(),\n    mAdaptor: new Collection(),\n    mSensor: new Collection(),\n    mObjectController: new Collection(),\n    mObjectAdaptor: new Collection(),\n    mObjectSensor: new Collection(),\n    reset: function() {\n        if(this.g) {\n            $('#' + this.g.svgName).remove();\n            $('#' + this.g.inputName).remove();\n            delete this.g;\n        }\n        this.queues = {};\n        this.currentTagName = null;\n        this.currentItem = undefined;\n        this.currentController = undefined;\n        this.mController = new Collection();\n        this.mAdaptor = new Collection();\n        this.mSensor = new Collection();\n        this.mObjectController = new Collection();\n        this.mObjectAdaptor = new Collection();\n        this.mObjectSensor = new Collection();\n        this.loaded = false;\n    },\n    init: function(svg, input) {\n        this.currentTagName = svg.getId();\n        this.g = new Graphic(\n            svg.getId(),\n            input.getId(),\n            this,\n            this.width,\n            this.height,\n            this.configs,\n            this.onMouseDown,\n            this.onMouseMove,\n            this.onMouseUp,\n            this.onStart,\n            this.onMove,\n            this.onEnd,\n            this.fIn,\n            this.fOut\n        );\n        // Add highlight\n        this.g.appendChild(utils.makeHighlight(this.currentTagName + \"_highlight\"));\n        this.g.rootNode.attr('class', 'svg-root');\n\n        if(!!this.deviceList) {\n            for(var i = 0; i < this.deviceList.length; i++) {\n                // Master (Tree root)\n                var controller = this.createController({\n                    id: this.deviceList[i].id,\n                    name: this.deviceList[i].name,\n                    url: \"assets/images/temps/wiring/master-controller.png\",\n                    x: 0,\n                    y: 0,\n                    w: 130,\n                    h: 90\n                });\n                // Adaptor\n                for(var j = 0; j < this.deviceList[i].adaptors.length; j++) {\n                    this.createAdaptor(controller, {\n                        id: this.deviceList[i].adaptors[j].id,\n                        name: this.deviceList[i].adaptors[j].title.split(\" \")[0],\n                        url: \"assets/images/temps/wiring/equipment.png\",\n                        w: 79,\n                        h: 117\n                    });\n                }\n            }\n\n            // Move to center\n            this.moveToCenter();\n            // TurnOn\n            this.turnOnEntity(1);\n        }\n\n        this.loaded = true;\n\n        // Run queues\n        for(var command in this.queues) {\n            var values = this.queues[command];\n            this[command](values[0], values[1]);\n        }\n        this.queues = {};\n    },\n    onMouseDown: function(e) {\n        //wiringGraphic.deSelectedItems();\n    },\n    // fn draw shape mouse move\n    onMouseMove: function(e) {\n    },\n    // fn draw shape mouse up\n    onMouseUp: function(e) {\n    },\n    // fn fin\n    fIn: function(e) {\n    },\n    // fn fout\n    fOut: function() {\n    },\n    // fn onstart\n    onStart: function(x, y) {\n        var me = wiringGraphic;\n        if(!me.g || (me.g && !me.g.verify(this))) {\n            return false;\n        }\n\n        this.dx = 0;\n        this.dy = 0;\n        // Set available\n        me.currentItem = this;\n    },\n    // fn onmove\n    onMove: function(dx, dy) {\n        var me = wiringGraphic;\n        if(!me.g || (me.g && !me.g.verify(this))) {\n            return false;\n        }\n\n        dx = dx * wiringGraphic.g.scale;\n        dy = dy * wiringGraphic.g.scale;\n        this.transform(\"T\" + dx + \",\" + dy);\n        if(this.objType === OBJECTS.CONTROLLER) {\n            var controllerId = this.info.id;\n            wiringGraphic.mObjectAdaptor.forEach(function(adaptor) {\n                if(adaptor.info.controllerId === controllerId) {\n                    adaptor.transform('T' + dx + ',' + dy);\n                    adaptor.connectPath.transform('T' + dx + ',' + dy);\n                    wiringGraphic.mObjectSensor.forEach(function(sensor) {\n                        if(sensor.info.controllerId == controllerId && sensor.info.adaptorId === adaptor.id) {\n                            sensor.transform('T' + dx + ',' + dy);\n                            sensor.connectPath.transform('T' + dx + ',' + dy);\n                        }\n                    });\n                }\n            });\n        } else if(this.objType == OBJECTS.ADAPTOR) {\n            var bb = this.getBBox();\n            var path = Snap.parsePathString(this.connectPath.attr('path'));\n            path[1][1] = bb.cx;\n            path[1][2] = bb.y;\n            this.connectPath.attr(\"path\", path.toString());\n            var controllerId = this.info.controllerId;\n            var adaptorId = this.info.id;\n            wiringGraphic.mObjectSensor.forEach(function(sensor) {\n                if(sensor.info.controllerId == controllerId && sensor.info.adaptorId === adaptorId) {\n                    sensor.transform('T' + dx + ',' + dy);\n                    sensor.connectPath.transform('T' + dx + ',' + dy);\n                }\n            });\n        } else if(this.objType == OBJECTS.SENSOR) {\n            var bb = this.getBBox();\n            var path = Snap.parsePathString(this.connectPath.attr('path'));\n            path[1][1] = bb.cx;\n            path[1][2] = bb.y;\n            this.connectPath.attr(\"path\", path.toString());\n        }\n        this.dx = dx;\n        this.dy = dy;\n        GB.isStart = true;\n    },\n    // fn onend\n    onEnd: function(e) {\n        var me = wiringGraphic;\n        if(!me.g || (me.g && !me.g.verify(this))) {\n            return false;\n        }\n        var dx = this.dx,\n            dy = this.dy;\n        if(GB.isStart) {\n            if(this.objType == OBJECTS.CONTROLLER) {\n                // Image\n                this[0].attr({\n                    x: parseFloat(this[0].attr('x')) + dx,\n                    y: parseFloat(this[0].attr('y')) + dy\n                });\n                // Label\n                this[1].attr({\n                    x: parseFloat(this[1].attr('x')) + dx,\n                    y: parseFloat(this[1].attr('y')) + dy\n                });\n                for(var i = 1; i <= this[1].length; i++) {\n                    this[1].select('tspan:nth-of-type(' + i + ')').attr({\n                        x: parseFloat(this[1].attr('x'))\n                    });\n                }\n                var controllerId = this.info.id;\n                me.mObjectAdaptor.forEach(function(adaptor) {\n                    if(adaptor.info.controllerId === controllerId) {\n                        adaptor[0].attr({\n                            x: parseFloat(adaptor[0].attr('x')) + dx,\n                            y: parseFloat(adaptor[0].attr('y')) + dy\n                        });\n                        adaptor[1].attr({\n                            x: parseFloat(adaptor[1].attr('x')) + dx,\n                            y: parseFloat(adaptor[1].attr('y')) + dy\n                        });\n                        adaptor.transform('T0,0');\n                        var path = Snap.parsePathString(adaptor.connectPath.attr('path'));\n                        for(var i = 0; i < path.length; i++) {\n                            path[i][1] += dx;\n                            path[i][2] += dy;\n                        }\n                        adaptor.connectPath.attr(\"path\", path.toString());\n                        adaptor.connectPath.transform('T0,0');\n                        me.mObjectSensor.forEach(function(sensor) {\n                            if(sensor.info.controllerId == controllerId && sensor.info.adaptorId === adaptor.id) {\n                                sensor.attr({\n                                    x: parseFloat(sensor.attr('x')) + dx,\n                                    y: parseFloat(sensor.attr('y')) + dy\n                                });\n                                sensor.transform('T0,0');\n                                var path = Snap.parsePathString(sensor.connectPath.attr('path'));\n                                for(var i = 0; i < path.length; i++) {\n                                    path[i][1] += dx;\n                                    path[i][2] += dy;\n                                }\n                                sensor.connectPath.attr(\"path\", path.toString());\n                                sensor.connectPath.transform('T0,0');\n                            }\n                        });\n                    }\n                });\n            } else if(this.objType == OBJECTS.ADAPTOR) {\n                this[0].attr({\n                    x: parseFloat(this[0].attr('x')) + dx,\n                    y: parseFloat(this[0].attr('y')) + dy\n                });\n                this[1].attr({\n                    x: parseFloat(this[1].attr('x')) + dx,\n                    y: parseFloat(this[1].attr('y')) + dy\n                });\n                var controllerId = this.info.controllerId;\n                var adaptorId = this.info.id;\n                me.mObjectSensor.forEach(function(sensor) {\n                    if(sensor.info.controllerId == controllerId && sensor.info.adaptorId === adaptorId) {\n                        sensor.attr({\n                            x: parseFloat(sensor.attr('x')) + dx,\n                            y: parseFloat(sensor.attr('y')) + dy\n                        });\n                        sensor.transform('T0,0');\n                        var path = Snap.parsePathString(sensor.connectPath.attr('path'));\n                        for(var i = 0; i < path.length; i++) {\n                            path[i][1] += dx;\n                            path[i][2] += dy;\n                        }\n                        sensor.connectPath.attr(\"path\", path.toString());\n                        sensor.connectPath.transform('T0,0');\n                    }\n                });\n\n                // Add stack list\n                STACK_LIST.addStack(me.currentTagName, me.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, this, {\n                    dx: dx,\n                    dy: dy\n                });\n            } else if(this.objType == OBJECTS.SENSOR) {\n                this.attr({\n                    x: parseFloat(this.attr('x')) + dx,\n                    y: parseFloat(this.attr('y')) + dy\n                });\n\n                // Add stack list\n                STACK_LIST.addStack(me.currentTagName, me.panel.name, STACK_TYPES.SVG, STACK_METHODS.MOVE, this, {\n                    dx: dx,\n                    dy: dy\n                });\n            }\n            this.transform('T0,0');\n        }\n\n        // Reset\n        me.currentItem = undefined;\n        GB.isStart = false;\n    },\n    // select item by controllerId and adaptorId\n    selectItem: function(controllerId, adaptorId) {\n        if(this.loaded) {\n            if(controllerId != undefined && adaptorId != undefined) {\n                this.mObjectAdaptor.forEach(function(item) {\n                    if(item.info.controllerId === controllerId) {\n                        if(item.info.id === adaptorId) {\n                            item.selectChange(true);\n                        } else {\n                            item.selectChange(false);\n                        }\n                    }\n                });\n            } else if(controllerId != undefined) {\n                this.turnOnEntity(controllerId);\n            }\n        } else {\n            this.addQueue(\"selectItem\", controllerId, adaptorId)\n        }\n    },\n    // Add queue if not ready\n    addQueue: function(command, value1, value2) {\n        this.queues[command] = [value1, value2];\n    },\n    // deselect items in array selecteditems\n    deSelectedItems: function(controllerId) {\n        this.mObjectAdaptor.forEach(function(item) {\n            if(item.info.controllerId === controllerId) {\n                item.selectChange(false);\n            }\n        });\n    },\n    drawController: function(object) {\n        var me = wiringGraphic,\n            controller = me.g.group();\n        var img = me.g.image(object.url, object.x, object.y, object.w, object.h).attr({\n            class: 'svg-controller',\n            controllerId: object.id\n        });\n        controller.add(img);\n\n        var text = object.name.split(' ');\n        // Create label\n        var label = me.g.drawText({x: controller.getBBox().cx, y: controller.getBBox().cy - 5, text: text}, true);\n        label.attr({\n            fill: \"#FFF\",\n            fontSize: 12,\n            fontWeight: 'bold',\n            class: 'svg-controller',\n            controllerId: object.id\n        });\n        label.length = text.length;\n        if(text.length == 1) {\n            label.select('tspan:nth-of-type(1)').attr({x: parseFloat(label.attr('x')), dy: 10});\n        } else if(text.length == 2) {\n            label.select('tspan:first-of-type').attr({x: parseFloat(label.attr('x')), dy: 0});\n            label.select('tspan:last-of-type').attr({x: parseFloat(label.attr('x')), dy: 15});\n        } else {\n            label.select('tspan:first-of-type').attr({x: parseFloat(label.attr('x')), dy: 0});\n            label.select('tspan:last-of-type').attr({x: parseFloat(label.attr('x')), dy: 15});\n        }\n        controller.add(label);\n\n        controller.id = object.id;\n        controller.info = object;\n        controller.objType = OBJECTS.CONTROLLER;\n\n        controller.selectChange = function(flag) {\n\n        };\n\n        controller.click(function() {\n            this.selectChange(true);\n            Signals.send(\"onWiringSelectItem\", {controllerId: object.id});\n        });\n\n        controller.drag(me.onMove, me.onStart, me.onEnd);\n\n        controller.attr({\n            class: 'svg-controller',\n            controllerId: object.id\n        });\n\n        return controller;\n    },\n    drawAdaptor: function(object) {\n        var me = wiringGraphic,\n            adaptor = me.g.group();\n        var img = me.g.image(object.url, object.x, object.y, object.w, object.h).attr({\n            class: 'svg-adaptor',\n            controllerId: object.controllerId,\n            adaptorId: object.id\n        });\n\n        adaptor.add(img);\n\n        // Create label\n        var label = me.g.drawText({\n            x: (object.x * 2 + object.w) / 2,\n            y: object.y + 35,\n            text: object.name\n        }, true);\n        label.attr({\n            fill: \"#FFFFFF\",\n            fontSize: 11,\n            fontWeight: 'bold',\n            class: 'svg-adaptor',\n            controllerId: object.controllerId,\n            adaptorId: object.id\n        });\n        adaptor.add(label);\n\n        adaptor.id = object.id;\n        adaptor.controllerId = object.controllerId;\n        adaptor.info = object;\n        adaptor.objType = OBJECTS.ADAPTOR;\n\n        adaptor.selectChange = function(flag) {\n            if(flag) {\n                this.attr({filter: \"url(#\" + me.currentTagName + \"_highlight)\"});\n            } else {\n                this.attr({filter: \"none\"});\n            }\n            // Highlight sensor children\n            me.mObjectSensor.forEach(function(sensor) {\n                if(sensor.info.controllerId == adaptor.info.controllerId && sensor.info.adaptorId === adaptor.info.id) {\n                    sensor.selectChange(flag);\n                } else {\n                    sensor.selectChange(!flag);\n                }\n            });\n        };\n\n        if(IS_TOUCH) { // On Mobile\n            adaptor.touchstart(function() {\n                this.selectChange(true);\n                Signals.send(\"onWiringSelectItem\", {\n                    controllerId: object.controllerId,\n                    adaptorId: object.id,\n                    isStack: true\n                });\n            });\n        } else { // On Desktop\n            adaptor.click(function() {\n                this.selectChange(true);\n                Signals.send(\"onWiringSelectItem\", {\n                    controllerId: object.controllerId,\n                    adaptorId: object.id,\n                    isStack: true\n                });\n            });\n        }\n\n        adaptor.drag(me.onMove, me.onStart, me.onEnd);\n\n        adaptor.attr({\n            class: 'svg-adaptor',\n            controllerId: object.controllerId,\n            adaptorId: object.id\n        });\n\n        return adaptor;\n    },\n    drawSensor: function(object) {\n        var me = wiringGraphic,\n            sensor = me.g.image(object.url, object.x, object.y, object.w, object.h);\n        sensor.controllerId = object.controllerId;\n        sensor.adaptorId = object.adaptorId;\n        sensor.floorId = object.floorId;\n        sensor.zoneId = object.zoneId;\n        sensor.sensorId = object.sensorId;\n        sensor.info = object;\n        sensor.objType = OBJECTS.SENSOR;\n\n        sensor.selectChange = function(flag) {\n            if(flag) {\n                this.attr({filter: \"url(#\" + me.currentTagName + \"_highlight)\"});\n            } else {\n                this.attr({filter: \"none\"});\n            }\n        };\n\n        sensor.drag(me.onMove, me.onStart, me.onEnd);\n\n        sensor.attr({\n            class: 'svg-sensor',\n            controllerId: object.controllerId,\n            adaptorId: object.adaptorId,\n            floorId: sensor.floorId,\n            zoneId: sensor.zoneId,\n            sensorId: sensor.sensorId\n        });\n\n        return sensor;\n    },\n    createController: function(options) {\n        options.x = options.x * this.g.scale + this.g.panZoom.getCurrentPosition().x;\n        options.y = options.y * this.g.scale + this.g.panZoom.getCurrentPosition().y;\n\n        var con = new Controller(options.id, options.name, options.url, options.x, options.y, options.w, options.h);\n        this.mController.add(con);\n        var controller = this.drawController(con);\n        this.mObjectController.add(controller);\n\n        return controller;\n    },\n    createAdaptor: function(controller, options) {\n        var ad = new Adaptor(options.id, options.name, controller.id, options.url, 0, 0, options.w, options.h);\n        this.mAdaptor.add(ad);\n        controller.info.adaptors.add(ad);\n        var adaptor = this.drawAdaptor(ad);\n        this.mObjectAdaptor.add(adaptor);\n        adaptor.parentControler = controller;\n\n        // Get Position\n        var distanceAdaptor = this.configs.distanceAdaptor;\n        var bb = controller.getBBox();\n        var x = bb.cx - (options.w * (controller.info.adaptors.count) + distanceAdaptor * (controller.info.adaptors.count - 1)) / 2;\n        var y = bb.y2 + this.configs.distanceY;\n\n        // Rearrange position\n        this.mObjectAdaptor.forEach(function(item) {\n            if(item.parentControler === controller) {\n                item[0].attr({\n                    x: x,\n                    y: y\n                });\n                var bbItem = item[0].getBBox();\n                if(item[1]) {\n                    item[1].attr({\n                        x: bbItem.cx,\n                        y: y + 35\n                    });\n                }\n                // Draw connection\n                if(item.connectPath != undefined) item.connectPath.remove();\n                item.connectPath = wiringGraphic.g.path(\"M\" + bb.cx + \" \" + bb.y2 + \"L\" + bbItem.cx + \" \" + bbItem.y).attr({\n                    stroke: \"#525380\",\n                    'stroke-width': 3,\n                    class: 'svg-path-adaptor',\n                    controllerId: controller.id,\n                    adaptorId: adaptor.info.id\n                });\n                x += options.w + distanceAdaptor;\n            }\n        });\n\n        return adaptor;\n    },\n    createSensor: function(adaptor, quantity, options) {\n        for(var i = 0; i < quantity; i++) {\n            var sen = new SensorForAdaptor(\n                options.controllerId,\n                options.adaptorId,\n                options.floorId,\n                options.zoneId,\n                options.sensorId,\n                options.url,\n                0,\n                0,\n                options.w,\n                options.h,\n                options.sender\n            );\n            this.mSensor.add(sen, true);\n\n            var sensor = this.drawSensor(sen);\n            this.mObjectSensor.add(sensor, true);\n            sensor.parentAdaptor = adaptor;\n\n            // Save to store\n            adaptor.info.sensors.add(sensor);\n\n            // Highlight sensor\n            sensor.selectChange(true);\n        }\n\n        // Check item on folderBar\n        Signals.send(\"onWiringFolderBarItem\", {sender: options.sender, check: true});\n\n        // Rearrange position\n        this.rearrangeSensor(adaptor, options.w);\n\n        wiringGraphic.g.rootNode.transform('T0,0');\n    },\n    createSensorByAdaptor: function(data, cb) {\n        var adaptor = false;\n        for(var i = 0; i < this.mObjectAdaptor.count; i++) {\n            if(this.mObjectAdaptor.collection[i].info.controllerId === data.controllerId && this.mObjectAdaptor.collection[i].info.id === data.adaptorId) {\n                adaptor = this.mObjectAdaptor.collection[i];\n                break;\n            }\n        }\n        if(adaptor) {\n            this.createSensor(\n                adaptor,\n                1,\n                {\n                    controllerId: data.controllerId,\n                    adaptorId: data.adaptorId,\n                    floorId: data.sensor.floorId,\n                    zoneId: data.sensor.zoneId,\n                    sensorId: data.sensor.sensorId,\n                    url: data.sensor.url,\n                    sender: data.sender,\n                    w: 30,\n                    h: 30\n                }\n            );\n        }\n\n        // Callback\n        if(typeof cb === 'function') {\n            cb();\n        }\n    },\n    removeSensorByOption: function(options) {\n        var sensor, adaptor, sensors = [];\n        for(var i = 0; i < this.mObjectSensor.count; i++) {\n            sensor = this.mObjectSensor.collection[i];\n            if(\n                sensor.controllerId === options.controllerId &&\n                sensor.adaptorId === options.adaptorId &&\n                sensor.floorId === options.floorId &&\n                sensor.zoneId === options.zoneId &&\n                sensor.sensorId === options.sensorId &&\n                sensor.info.sender === options.sender\n            ) {\n                sensors.push(sensor);\n            }\n        }\n\n        if(sensors.length > 0) {\n            for(var i = 0; i < sensors.length; i++) {\n                sensor = sensors[i];\n                adaptor = sensor.parentAdaptor;\n\n                // Remove Sensor\n                this.mSensor.remove(sensor);\n                sensor.parentAdaptor.info.sensors.remove(sensor);\n                if(sensor.connectPath) {\n                    sensor.connectPath.remove();\n                }\n                this.mObjectSensor.remove(sensor);\n                sensor.remove();\n            }\n\n            // UnCheck item on folderBar\n            Signals.send(\"onWiringFolderBarItem\", {sender: options.sender, check: false});\n\n            // Rearrange position\n            this.rearrangeSensor(sensor.parentAdaptor, sensor.info.w);\n        }\n    },\n    // Rearrange Position For Sensor\n    rearrangeSensor: function(adaptor, width) {\n        // Get Position\n        var distanceAdaptor = this.configs.distanceSensor;\n        var bb = adaptor.getBBox();\n        var x = bb.cx - (width * (adaptor.info.sensors.count) + distanceAdaptor * (adaptor.info.sensors.count - 1)) / 2;\n        var y = bb.y2 + this.configs.distanceY;\n\n        // Rearrange position\n        this.mObjectSensor.forEach(function(sensor) {\n            if(sensor.parentAdaptor === adaptor) {\n                sensor.attr({\n                    x: x,\n                    y: y\n                });\n                x += width + distanceAdaptor;\n                // Draw connection\n                if(sensor.connectPath != undefined) {\n                    sensor.connectPath.remove();\n                }\n                var bbItem = sensor.getBBox();\n                sensor.connectPath = wiringGraphic.g.path(\"M\" + bb.cx + \" \" + bb.y2 + \"L\" + bbItem.cx + \" \" + bbItem.y).attr({\n                    stroke: \"#525380\",\n                    'stroke-width': 3,\n                    class: 'svg-path-sensor',\n                    controllerId: sensor.controllerId,\n                    adaptorId: sensor.adaptorId,\n                    floorId: sensor.floorId,\n                    zoneId: sensor.zoneId,\n                    sensorId: sensor.sensorId\n                });\n            }\n        });\n    },\n    setSize: function(width, height) {\n        var me = wiringGraphic;\n        me.width = width;\n        me.height = height;\n        if(!!me.loaded) {\n            me.g.setSize(width, height);\n            me.moveToCenter();\n        }\n    },\n    moveToCenter: function() {\n        var me = wiringGraphic,\n            cx = me.width / 2,\n            cy = me.height / 2,\n            bb = me.g.rootNode.getBBox(),\n            dx = cx - bb.cx,\n            dy = cy - bb.cy;\n\n        me.mObjectController.forEach(function(controller) {\n            // Image\n            controller[0].attr({\n                x: parseFloat(controller[0].attr('x')) + dx,\n                y: parseFloat(controller[0].attr('y')) + dy\n            });\n            // Label\n            controller[1].attr({\n                x: parseFloat(controller[1].attr('x')) + dx,\n                y: parseFloat(controller[1].attr('y')) + dy\n            });\n            for(var i = 1; i <= controller[1].length; i++) {\n                controller[1].select('tspan:nth-of-type(' + i + ')').attr({\n                    x: parseFloat(controller[1].attr('x'))\n                });\n            }\n            var controllerId = controller.info.id;\n            me.mObjectAdaptor.forEach(function(adaptor) {\n                if(adaptor.info.controllerId === controllerId) {\n                    adaptor[0].attr({\n                        x: parseFloat(adaptor[0].attr('x')) + dx,\n                        y: parseFloat(adaptor[0].attr('y')) + dy\n                    });\n                    adaptor[1].attr({\n                        x: parseFloat(adaptor[1].attr('x')) + dx,\n                        y: parseFloat(adaptor[1].attr('y')) + dy\n                    });\n                    adaptor.transform('T0,0');\n                    var path = Snap.parsePathString(adaptor.connectPath.attr('path'));\n                    for(var i = 0; i < path.length; i++) {\n                        path[i][1] += dx;\n                        path[i][2] += dy;\n                    }\n                    adaptor.connectPath.attr(\"path\", path.toString());\n                    adaptor.connectPath.transform('T0,0');\n                    me.mObjectSensor.forEach(function(sensor) {\n                        if(sensor.info.controllerId == controllerId && sensor.info.adaptorId === adaptor.id) {\n                            sensor.attr({\n                                x: parseFloat(sensor.attr('x')) + dx,\n                                y: parseFloat(sensor.attr('y')) + dy\n                            });\n                            sensor.transform('T0,0');\n                            var path = Snap.parsePathString(sensor.connectPath.attr('path'));\n                            for(var i = 0; i < path.length; i++) {\n                                path[i][1] += dx;\n                                path[i][2] += dy;\n                            }\n                            sensor.connectPath.attr(\"path\", path.toString());\n                            sensor.connectPath.transform('T0,0');\n                        }\n                    });\n                }\n            });\n        });\n        me.g.rootNode.transform(\"T0,0\");\n    },\n    // Turn on by controllerId\n    turnOnEntity: function(controllerId) {\n        this.mObjectController.forEach(function(controller) {\n            if(controller.id === controllerId) {\n                controller.attr({\n                    display: \"\"\n                });\n                wiringGraphic.currentController = controller;\n            } else {\n                controller.attr({\n                    display: \"none\"\n                });\n            }\n        });\n        var ad = false;\n        this.mObjectAdaptor.forEach(function(adaptor) {\n            if(adaptor.controllerId === controllerId) {\n                adaptor.attr({\n                    display: \"\"\n                });\n                if(adaptor.connectPath != undefined) {\n                    adaptor.connectPath.attr({\n                        display: \"\"\n                    });\n                }\n                ad = adaptor;\n            } else {\n                adaptor.attr({\n                    display: \"none\"\n                });\n                if(adaptor.connectPath != undefined) {\n                    adaptor.connectPath.attr({\n                        display: \"none\"\n                    });\n                }\n                adaptor.selectChange(false);\n            }\n        });\n\n        if(ad) Signals.send(\"onWiringSelectItem\", {controllerId: ad.controllerId, adaptorId: ad.id});\n\n        this.mObjectSensor.forEach(function(sensor) {\n            if(sensor.controllerId === controllerId) {\n                sensor.attr({\n                    display: \"\"\n                });\n                if(sensor.connectPath != undefined) {\n                    sensor.connectPath.attr({\n                        display: \"\"\n                    });\n                }\n            } else {\n                sensor.attr({\n                    display: \"none\"\n                });\n                if(sensor.connectPath != undefined) {\n                    sensor.connectPath.attr({\n                        display: \"none\"\n                    });\n                }\n            }\n        });\n\n        this.moveToCenter();\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var me = wiringGraphic;\n        var stack = STACK_LIST.getStack(me.currentTagName);\n        if(stack) {\n            var item = stack.object;\n            if(stack.method === STACK_METHODS.MOVE) {\n                if(item.objType == OBJECTS.ADAPTOR) {\n                    item[0].attr({\n                        x: parseFloat(item[0].attr('x')) - stack.data.dx,\n                        y: parseFloat(item[0].attr('y')) - stack.data.dy\n                    });\n                    item[1].attr({\n                        x: parseFloat(item[1].attr('x')) - stack.data.dx,\n                        y: parseFloat(item[1].attr('y')) - stack.data.dy\n                    });\n\n                    // Connection\n                    var bb = item.getBBox();\n                    var path = Snap.parsePathString(item.connectPath.attr('path'));\n                    path[1][1] = bb.cx;\n                    path[1][2] = bb.y;\n                    item.connectPath.attr(\"path\", path.toString());\n\n                    var controllerId = item.info.controllerId;\n                    var adaptorId = item.info.id;\n                    me.mObjectSensor.forEach(function(sensor) {\n                        if(sensor.info.controllerId == controllerId && sensor.info.adaptorId === adaptorId) {\n                            sensor.attr({\n                                x: parseFloat(sensor.attr('x')) - stack.data.dx,\n                                y: parseFloat(sensor.attr('y')) - stack.data.dy\n                            });\n                            sensor.transform('T0,0');\n\n                            // Connection\n                            var path = Snap.parsePathString(sensor.connectPath.attr('path'));\n                            for(var i = 0; i < path.length; i++) {\n                                path[i][1] -= stack.data.dx;\n                                path[i][2] -= stack.data.dy;\n                            }\n                            sensor.connectPath.attr(\"path\", path.toString());\n                            sensor.connectPath.transform('T0,0');\n                        }\n                    });\n                } else if(item.objType === OBJECTS.SENSOR) {\n                    item.attr({\n                        x: parseFloat(item.attr('x')) - stack.data.dx,\n                        y: parseFloat(item.attr('y')) - stack.data.dy\n                    });\n\n                    // Connection\n                    var bb = item.getBBox();\n                    var path = Snap.parsePathString(item.connectPath.attr('path'));\n                    path[1][1] = bb.cx;\n                    path[1][2] = bb.y;\n                    item.connectPath.attr(\"path\", path.toString());\n                }\n            }\n            STACK_LIST.removeStack(stack);\n        }\n    }\n};\n","// Generated by DDL Code Generator\n// on 2017-01-30 18:00:51 UTC\n// from /home/jfilling/work/hcontroller_0/Database/current/current-schema.sql.\n\nvar kind = require('enyo/kind');\nvar RelationalModel = require('enyo/RelationalModel');\n\nconst tablesDefinitionsDDLMD5Hash = \"940fb9a242d1806bb528481856450a1f\"\n\n// AirInfiltrationLoad\nvar AirInfiltrationLoad = exports.AirInfiltrationLoad = kind({\n\tname: \"AirInfiltrationLoad\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tInfiltration: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tzone: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'zone',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// AllowedRange\nvar AllowedRange = exports.AllowedRange = kind({\n\tname: \"AllowedRange\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\trangeLow: null,\n\t\trangeHigh: null,\n\t\tprobabilityMatrix: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tvariable: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Analog\nvar Analog = exports.Analog = kind({\n\tname: \"Analog\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tnominal: null,\n\t\trangeMax: null,\n\t\trangeMin: null,\n\t\tlastModified: null,\n\t\t// Primary Attributes\n\t\tinterfaceTypes: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'interfaceTypes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Animation\nvar Animation = exports.Animation = kind({\n\tname: \"Animation\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tanimationType: null,\n\t\tanimationTag: null,\n\t\tanimationMethod: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tvariable: null,\n\t\timage: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// AutoPreference\nvar AutoPreference = exports.AutoPreference = kind({\n\tname: \"AutoPreference\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tsummerCLO: null,\n\t\twinterCLO: null,\n\t\tsummerNightCLO: null,\n\t\tlocked: null,\n\t\twinterNightCLO: null,\n\t\tlastModified: null,\n\t\t// Primary Attributes\n\t\tcomforts: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'comforts',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Branch\nvar Branch = exports.Branch = kind({\n\tname: \"Branch\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teqMassFlow: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eqMassFlow',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// BuildingModel\nvar BuildingModel = exports.BuildingModel = kind({\n\tname: \"BuildingModel\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tfileName: null,\n\t\tfile: null,\n\t\theatLossUA: null,\n\t\tdesignDayHeating: null,\n\t\tdesignDayCooling: null,\n\t\tdesignExtreme: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tbuildings: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'buildings',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Building\nvar Building = exports.Building = kind({\n\tname: \"Building\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tnotes: null,\n\t\tbuildingType: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tbuildingModel: null,\n\t\timage: null,\n\t\t// Primary Attributes\n\t\tsystems: null,\n\t\tfloors: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'buildingModel',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'floors',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Comfort\nvar Comfort = exports.Comfort = kind({\n\tname: \"Comfort\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tnaturalConditioning: null,\n\t\tsettingMode: null,\n\t\tallowAutoOccupancy: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tcoolingSetting: null,\n\t\toccupant: null,\n\t\theatingSetting: null,\n\t\tautoSetting: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'coolingSetting',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'occupant',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'heatingSetting',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'autoSetting',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// ConnectionNet\nvar ConnectionNet = exports.ConnectionNet = kind({\n\tname: \"ConnectionNet\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tconnectionNodes: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'connectionNodes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// ConnectionNode\nvar ConnectionNode = exports.ConnectionNode = kind({\n\tname: \"ConnectionNode\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tnodeName: null,\n\t\tnodeType: null,\n\t\tsvgTag: null,\n\t\tloopRequired: null,\n\t\trequired: null,\n\t\tconnectorType: null,\n\t\tsensorRequired: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tequipment: null,\n\t\tvariable: null,\n\t\tnet: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'equipment',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'net',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// ControlType\nvar ControlType = exports.ControlType = kind({\n\tname: \"ControlType\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tHVAC: null,\n\t\tlighting: null,\n\t\tirrigation: null,\n\t\t// Foreign attributes\n\t\tsystems: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// ControllerLibrary\nvar ControllerLibrary = exports.ControllerLibrary = kind({\n\tname: \"ControllerLibrary\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tcontrollers: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'controllers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Controller\nvar Controller = exports.Controller = kind({\n\tname: \"Controller\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tdeviceName: null,\n\t\tcardSlots: null,\n\t\tnetworkSupport: null,\n\t\tparentController: null,\n\t\tchildController: null,\n\t\tserialNumber: null,\n\t\tversion: null,\n\t\tcanMaster: null,\n\t\tavailable: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tcontrollerLibrary: null,\n\t\texpansionCards: null,\n\t\timage: null,\n\t\t// Primary Attributes\n\t\tnetworkMasters: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'controllerLibrary',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'expansionCards',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'networkMasters',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Coupling\nvar Coupling = exports.Coupling = kind({\n\tname: \"Coupling\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teqMassFlow: null,\n\t\teqHeatTransfer: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eqMassFlow',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqHeatTransfer',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Device\nvar Device = exports.Device = kind({\n\tname: \"Device\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\ttype: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tuser: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'user',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// EnergyCost\nvar EnergyCost = exports.EnergyCost = kind({\n\tname: \"EnergyCost\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tcost: null,\n\t\tunit: null,\n\t\ttimeOfDay: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tsourceEnergies: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'sourceEnergies',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// EquationDirectory\nvar EquationDirectory = exports.EquationDirectory = kind({\n\tname: \"EquationDirectory\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tequatia: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equatia',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Equation\nvar Equation = exports.Equation = kind({\n\tname: \"Equation\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tfunction: null,\n\t\tnotes: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tdirectory: null,\n\t\t// Primary Attributes\n\t\tloads: null,\n\t\tcouplings: null,\n\t\tsensors: null,\n\t\tsourceSinks: null,\n\t\tmixers: null,\n\t\tstores: null,\n\t\tbranches: null,\n\t\trouters: null,\n\t\tpaths: null,\n\t\tvariableJoins: null,\n\t\ttransports: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'directory',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'loads',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'couplings',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sensors',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sourceSinks',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'mixers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'stores',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'branches',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'routers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'paths',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variableJoins',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'transports',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// EquipmentClass\nvar EquipmentClass = exports.EquipmentClass = kind({\n\tname: \"EquipmentClass\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\t// Foreign attributes\n\t\tstore: null,\n\t\tcoupling: null,\n\t\tbranch: null,\n\t\tsource: null,\n\t\ttransport: null,\n\t\tsink: null,\n\t\tload: null,\n\t\trouter: null,\n\t\tpath: null,\n\t\tsensor: null,\n\t\tmixer: null,\n\t\t// Primary Attributes\n\t\tequipments: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'store',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'coupling',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'branch',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'source',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'transport',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sink',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'load',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'router',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'path',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sensor',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'mixer',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipments',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// EquipmentGroup\nvar EquipmentGroup = exports.EquipmentGroup = kind({\n\tname: \"EquipmentGroup\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tequipmentState: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tsubsystem: null,\n\t\tequipment: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'subsystem',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'equipment',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Equipment\nvar Equipment = exports.Equipment = kind({\n\tname: \"Equipment\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\ttoolTip: null,\n\t\tparent: null,\n\t\tsystemIndex: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tpreferences: null,\n\t\teclass: null,\n\t\tgroup: null,\n\t\timage: null,\n\t\t// Primary Attributes\n\t\tconnectionNodes: null,\n\t\tequipmentGroups: null,\n\t\tmanufacturers: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'preferences',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eclass',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'group',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'connectionNodes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'equipmentGroups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'manufacturers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// ErrorHandler\nvar ErrorHandler = exports.ErrorHandler = kind({\n\tname: \"ErrorHandler\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\terrorNotification: null,\n\t\terrorTimeout: null,\n\t\tescalationTime: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tmanagerLevel2: null,\n\t\tmanagerLevel1: null,\n\t\tmanagerLevel3: null,\n\t\terror: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'managerLevel2',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'managerLevel1',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'managerLevel3',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'error',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// EventCondition\nvar EventCondition = exports.EventCondition = kind({\n\tname: \"EventCondition\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\teventType: null,\n\t\terrorName: null,\n\t\terrorSource: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\terrorResolution: null,\n\t\tvariable: null,\n\t\t// Primary Attributes\n\t\tissueNotes: null,\n\t\teventConditia: null,\n\t\terrorHandlers: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'errorResolution',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'issueNotes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eventConditia',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'errorHandlers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Floor\nvar Floor = exports.Floor = kind({\n\tname: \"Floor\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tarea: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tbuilding: null,\n\t\timage: null,\n\t\t// Primary Attributes\n\t\tzones: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'building',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'zones',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Folder\nvar Folder = exports.Folder = kind({\n\tname: \"Folder\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\ttoolTip: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tfolderviews: null,\n\t\t// Primary Attributes\n\t\tgroups: null,\n\t\tsystems: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'folderviews',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'groups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// FolderView\nvar FolderView = exports.FolderView = kind({\n\tname: \"FolderView\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tfolders: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'folders',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Group\nvar Group = exports.Group = kind({\n\tname: \"Group\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tconfiguration: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tfolder: null,\n\t\t// Primary Attributes\n\t\tequipments: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'folder',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipments',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// HistogramGroup\nvar HistogramGroup = exports.HistogramGroup = kind({\n\tname: \"HistogramGroup\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tgroup: null,\n\t\tday: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tvariable: null,\n\t\t// Primary Attributes\n\t\thistograms: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'histograms',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Histogram\nvar Histogram = exports.Histogram = kind({\n\tname: \"Histogram\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tbin: null,\n\t\tvalue: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\thistogram: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'histogram',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// IOCardLibrary\nvar IOCardLibrary = exports.IOCardLibrary = kind({\n\tname: \"IOCardLibrary\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tioModules: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'ioModules',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// IOModule\nvar IOModule = exports.IOModule = kind({\n\tname: \"IOModule\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tdeviceName: null,\n\t\ttype: null,\n\t\tslotNumber: null,\n\t\tportCount: null,\n\t\tperipherals: null,\n\t\tserialNumber: null,\n\t\tversion: null,\n\t\tonLine: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tioCardLibrary: null,\n\t\tpins: null,\n\t\timage: null,\n\t\t// Primary Attributes\n\t\tcontrollers: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'ioCardLibrary',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'pins',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'controllers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Image\nvar Image = exports.Image = kind({\n\tname: \"Image\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\timage: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tbuildings: null,\n\t\tioModules: null,\n\t\tfloors: null,\n\t\tsystems: null,\n\t\tequipments: null,\n\t\tcontrollers: null,\n\t\tanimatia: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'buildings',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'ioModules',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'floors',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'equipments',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'controllers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'animatia',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// InterfaceType\nvar InterfaceType = exports.InterfaceType = kind({\n\tname: \"InterfaceType\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\twireNumber: null,\n\t\tvalue: null,\n\t\t// Foreign attributes\n\t\tboolean: null,\n\t\twires: null,\n\t\tanalog: null,\n\t\t// Primary Attributes\n\t\trouters: null,\n\t\ttransports: null,\n\t\tsourceSinks: null,\n\t\tsensors: null,\n\t\tmixers: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'boolean',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'wires',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'analog',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'routers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'transports',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sourceSinks',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sensors',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'mixers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// IssueNote\nvar IssueNote = exports.IssueNote = kind({\n\tname: \"IssueNote\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tnote: null,\n\t\tuser: null,\n\t\ttimeStamp: null,\n\t\t// Foreign attributes\n\t\terror: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'error',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// LayerSet\nvar LayerSet = exports.LayerSet = kind({\n\tname: \"LayerSet\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tlayers: null,\n\t\tsurfaces: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'layers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'surfaces',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Layer\nvar Layer = exports.Layer = kind({\n\tname: \"Layer\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tthickness: null,\n\t\tindex: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tlayerSet: null,\n\t\tmaterialProperties: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'layerSet',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'materialProperties',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Load\nvar Load = exports.Load = kind({\n\tname: \"Load\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tzoneCount: null,\n\t\tzones: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teqMassFlow: null,\n\t\teqHeatTransfer: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eqMassFlow',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqHeatTransfer',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Location\nvar Location = exports.Location = kind({\n\tname: \"Location\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\taddress: null,\n\t\tlatitude: null,\n\t\tlongitude: null,\n\t\televation: null,\n\t\ttimeZone: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tsystems: null,\n\t\tweatherSources: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'weatherSources',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Log\nvar Log = exports.Log = kind({\n\tname: \"Log\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tvalue: null,\n\t\ttime: null,\n\t\t// Foreign attributes\n\t\tpredictionGroup: null,\n\t\tvariable: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'predictionGroup',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Manufacturer\nvar Manufacturer = exports.Manufacturer = kind({\n\tname: \"Manufacturer\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tequipment: null,\n\t\t// Primary Attributes\n\t\tmodels: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'equipment',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'models',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// MaterialProperty\nvar MaterialProperty = exports.MaterialProperty = kind({\n\tname: \"MaterialProperty\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tdensity: null,\n\t\tconductivity: null,\n\t\tspecificHeat: null,\n\t\treflectance: null,\n\t\temmisivity: null,\n\t\troughness: null,\n\t\ttransmittance: null,\n\t\tuValue: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tlayers: null,\n\t\tzones: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'layers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'zones',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Mixer\nvar Mixer = exports.Mixer = kind({\n\tname: \"Mixer\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tinterface: null,\n\t\teqMixer: null,\n\t\teqMassFlow: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'interface',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqMixer',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqMassFlow',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Model\nvar Model = exports.Model = kind({\n\tname: \"Model\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tsubsystemLock: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tmanufacturer: null,\n\t\t// Primary Attributes\n\t\tvariableJoins: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'manufacturer',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'variableJoins',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// NetworkMaster\nvar NetworkMaster = exports.NetworkMaster = kind({\n\tname: \"NetworkMaster\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tnetwork: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'network',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// OccupancyLoad\nvar OccupancyLoad = exports.OccupancyLoad = kind({\n\tname: \"OccupancyLoad\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\toccupancy: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tzone: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'zone',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// OccupancySource\nvar OccupancySource = exports.OccupancySource = kind({\n\tname: \"OccupancySource\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tsampleFrequency: null,\n\t\thistoryWindow: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tsource: null,\n\t\t// Primary Attributes\n\t\toccupants: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'source',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'occupants',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Occupant\nvar Occupant = exports.Occupant = kind({\n\tname: \"Occupant\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tuser: null,\n\t\toccupancySource: null,\n\t\t// Primary Attributes\n\t\tcomforts: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'user',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'occupancySource',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'comforts',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Organization\nvar Organization = exports.Organization = kind({\n\tname: \"Organization\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tstreetAddress: null,\n\t\tcity: null,\n\t\tstate: null,\n\t\tcountry: null,\n\t\tzipCode: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tusers: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'users',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Overhang\nvar Overhang = exports.Overhang = kind({\n\tname: \"Overhang\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\toverhangXLength: null,\n\t\toverhangYOffset: null,\n\t\t// Primary Attributes\n\t\tsurfaces: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'surfaces',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Path\nvar Path = exports.Path = kind({\n\tname: \"Path\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teq1: null,\n\t\teq2: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eq1',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eq2',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// PeripheralType\nvar PeripheralType = exports.PeripheralType = kind({\n\tname: \"PeripheralType\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tanalogIn: null,\n\t\tanalogOut: null,\n\t\tdigitalIn: null,\n\t\tdigitalOut: null,\n\t\tmotor: null,\n\t\tfreqIn: null,\n\t\tFreqOut: null,\n\t\tlastModified: null,\n\t\t// Foreign attributes\n\t\tprotocolTransport: null,\n\t\t// Primary Attributes\n\t\tpins: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'protocolTransport',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'pins',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Pin\nvar Pin = exports.Pin = kind({\n\tname: \"Pin\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tnumber: null,\n\t\tsetup: null,\n\t\twireProtocol: null,\n\t\tavailable: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tperipheralMapping: null,\n\t\tperipheralSupport: null,\n\t\t// Primary Attributes\n\t\twires: null,\n\t\tioModules: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'peripheralMapping',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'peripheralSupport',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'wires',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'ioModules',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// PlugLoad\nvar PlugLoad = exports.PlugLoad = kind({\n\tname: \"PlugLoad\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tloads: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tzone: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'zone',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// PredictionGroup\nvar PredictionGroup = exports.PredictionGroup = kind({\n\tname: \"PredictionGroup\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tpredictionTimeStamp: null,\n\t\t// Primary Attributes\n\t\tlogs: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'logs',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Preference\nvar Preference = exports.Preference = kind({\n\tname: \"Preference\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tjson: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tequipments: null,\n\t\tvariableJoins: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipments',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variableJoins',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Privilege\nvar Privilege = exports.Privilege = kind({\n\tname: \"Privilege\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttableName: null,\n\t\tsuperUserOperations: null,\n\t\tprivilegedUserOperations: null,\n\t\tstandardUser: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t},\n})\n\n// ProtocolTransport\nvar ProtocolTransport = exports.ProtocolTransport = kind({\n\tname: \"ProtocolTransport\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\taddress: null,\n\t\tnetworkName: null,\n\t\tsubnet: null,\n\t\tpassword: null,\n\t\ttransportState: null,\n\t\tlastModified: null,\n\t\t// Foreign attributes\n\t\twireProtocol: null,\n\t\t// Primary Attributes\n\t\tperipheralTypes: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'wireProtocol',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'peripheralTypes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Router\nvar Router = exports.Router = kind({\n\tname: \"Router\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teqRouter: null,\n\t\tinterface: null,\n\t\teqMassFlow: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eqRouter',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'interface',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqMassFlow',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SchemaVersion\nvar SchemaVersion = exports.SchemaVersion = kind({\n\tname: \"SchemaVersion\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tmajor: null,\n\t\tminor: null,\n\t\tmicro: null,\n\t},\n})\n\n// Sensor\nvar Sensor = exports.Sensor = kind({\n\tname: \"Sensor\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tgroup: null,\n\t\tupdateRate: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tinterface: null,\n\t\teqConversion: null,\n\t\tzone: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'interface',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqConversion',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'zone',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Session\nvar Session = exports.Session = kind({\n\tname: \"Session\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tfailedCount: null,\n\t\tforcedReset: null,\n\t\tlastFailedLogin: null,\n\t\tstartTime: null,\n\t\tendTime: null,\n\t\tlastmodified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tusers: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'users',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SettingPreference\nvar SettingPreference = exports.SettingPreference = kind({\n\tname: \"SettingPreference\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tsettingTemp: null,\n\t\tsetBackTemp: null,\n\t\tcomfortRange: null,\n\t\tsetbackStartTime: null,\n\t\tsetbackEndTime: null,\n\t\tdayOfWeek: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tcomforts: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'comforts',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SourceEnergy\nvar SourceEnergy = exports.SourceEnergy = kind({\n\tname: \"SourceEnergy\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tenergyType: null,\n\t\tCO2: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tcost: null,\n\t\t// Primary Attributes\n\t\tsourceSinks: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'cost',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'sourceSinks',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SourceSink\nvar SourceSink = exports.SourceSink = kind({\n\tname: \"SourceSink\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tinterface: null,\n\t\tsourceEnergy: null,\n\t\teqState: null,\n\t\teqLimit: null,\n\t\teqCOP: null,\n\t\teqCapacity: null,\n\t\teqTransferFunction: null,\n\t\teqPower: null,\n\t\teqControl: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'interface',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sourceEnergy',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqState',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqLimit',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqCOP',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqCapacity',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqTransferFunction',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqPower',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqControl',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Store\nvar Store = exports.Store = kind({\n\tname: \"Store\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttype: null,\n\t\tstorageMedium: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teqPower: null,\n\t\teqEnergyCapacity: null,\n\t\teqMaxEnergyCapacity: null,\n\t\teqHeatLoss: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eqPower',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqEnergyCapacity',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqMaxEnergyCapacity',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqHeatLoss',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SubsystemGroup\nvar SubsystemGroup = exports.SubsystemGroup = kind({\n\tname: \"SubsystemGroup\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tgroupName: null,\n\t\ttype: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tsystems: null,\n\t\tsubsystems: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'subsystems',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Subsystem\nvar Subsystem = exports.Subsystem = kind({\n\tname: \"Subsystem\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\ttype: null,\n\t\thead: null,\n\t\tpriority: null,\n\t\tnativePriority: null,\n\t\tactivePriority: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tsubsystemGroups: null,\n\t\tequipmentGroups: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'subsystemGroups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'equipmentGroups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SupportedUnit\nvar SupportedUnit = exports.SupportedUnit = kind({\n\tname: \"SupportedUnit\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\trepresentation: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tunitLookups: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'unitLookups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Surface\nvar Surface = exports.Surface = kind({\n\tname: \"Surface\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tsurfaceType: null,\n\t\tarea: null,\n\t\tazimuth: null,\n\t\ttilt: null,\n\t\tconnectingNodeName: null,\n\t\tshade: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tlayerSet: null,\n\t\tadjacency: null,\n\t\tzone: null,\n\t\toverhang: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'layerSet',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'adjacency',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'zone',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'overhang',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// SystemFolder\nvar SystemFolder = exports.SystemFolder = kind({\n\tname: \"SystemFolder\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\ttoolTip: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tsystems: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'systems',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// System\nvar System = exports.System = kind({\n\tname: \"System\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tnotes: null,\n\t\tstatus: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tsystem: null,\n\t\tsystemFolder: null,\n\t\tlocation: null,\n\t\tbuilding: null,\n\t\timage: null,\n\t\tcontrolTypes: null,\n\t\t// Primary Attributes\n\t\tsubsystemGroups: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'system',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'systemFolder',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'location',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'building',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'image',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'controlTypes',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'subsystemGroups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Transport\nvar Transport = exports.Transport = kind({\n\tname: \"Transport\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tstate: null,\n\t\tvariableSpeed: null,\n\t\tzoneNumber: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\teqFlowCurve: null,\n\t\teqTransport: null,\n\t\tinterface: null,\n\t\t// Primary Attributes\n\t\tequipmentClasses: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'eqFlowCurve',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eqTransport',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'interface',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'equipmentClasses',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// UnitLookup\nvar UnitLookup = exports.UnitLookup = kind({\n\tname: \"UnitLookup\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\ttable: null,\n\t\tcolumn: null,\n\t\t// Foreign attributes\n\t\tsupportedUnit: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'supportedUnit',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// User\nvar User = exports.User = kind({\n\tname: \"User\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\temail: null,\n\t\tuserName: null,\n\t\tpassword: null,\n\t\tfirstName: null,\n\t\tlastName: null,\n\t\tcreatedDateTime: null,\n\t\tlastSuccessfullLogin: null,\n\t\trole: null,\n\t\tcloudAccount: null,\n\t\tsalt: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\torganization: null,\n\t\tsession: null,\n\t\t// Primary Attributes\n\t\tdevices: null,\n\t\toccupants: null,\n\t\terrorHandlers: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'organization',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'session',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'devices',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'occupants',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'errorHandlers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// VariableDirectory\nvar VariableDirectory = exports.VariableDirectory = kind({\n\tname: \"VariableDirectory\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tvariables: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'variables',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// VariableJoin\nvar VariableJoin = exports.VariableJoin = kind({\n\tname: \"VariableJoin\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\t// Foreign attributes\n\t\tequation: null,\n\t\tpreference: null,\n\t\tvariable: null,\n\t\tmodel: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'equation',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'preference',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variable',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'model',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Variable\nvar Variable = exports.Variable = kind({\n\tname: \"Variable\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tsourceQuality: null,\n\t\tglobal: null,\n\t\tadvanced: null,\n\t\tcurrentValue: null,\n\t\tErrorType: null,\n\t\tdailyAverage: null,\n\t\tweeklyAverage: null,\n\t\tmonthlyAverage: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tdirectory: null,\n\t\t// Primary Attributes\n\t\tlogs: null,\n\t\tallowedRanges: null,\n\t\teventConditia: null,\n\t\tconnectionNodes: null,\n\t\tanimatia: null,\n\t\toccupancySources: null,\n\t\thistogramGroups: null,\n\t\tvariableJoins: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'directory',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'logs',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'allowedRanges',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'eventConditia',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'connectionNodes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'animatia',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'occupancySources',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'histogramGroups',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'variableJoins',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// WeatherLibrary\nvar WeatherLibrary = exports.WeatherLibrary = kind({\n\tname: \"WeatherLibrary\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Primary Attributes\n\t\tweatherSources: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'weatherSources',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// WeatherSource\nvar WeatherSource = exports.WeatherSource = kind({\n\tname: \"WeatherSource\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\turl: null,\n\t\tduration: null,\n\t\tinterval: null,\n\t\tdataMapping: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tlocation: null,\n\t\tweatherLibrary: null,\n\t\t// Primary Attributes\n\t\tweathers: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'location',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'weatherLibrary',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'weathers',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Weather\nvar Weather = exports.Weather = kind({\n\tname: \"Weather\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tdate: null,\n\t\ttemperature: null,\n\t\tminTemp: null,\n\t\tmaxTemp: null,\n\t\tdewpoint: null,\n\t\trelativeHumidity: null,\n\t\tskyCover: null,\n\t\twindSpeed: null,\n\t\twindDirection: null,\n\t\twindGust: null,\n\t\tfret: null,\n\t\tpop: null,\n\t\tqpf: null,\n\t\tsnowAmt: null,\n\t\tsnowLevel: null,\n\t\tsolarElevation: null,\n\t\tsolarAzimuth: null,\n\t\tweatherDescription: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tweatherSource: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'weatherSource',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// WireProtcol\nvar WireProtcol = exports.WireProtcol = kind({\n\tname: \"WireProtcol\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\taddress: null,\n\t\tjoined: null,\n\t\towl: null,\n\t\tprotocolState: null,\n\t\tlastModified: null,\n\t\t// Primary Attributes\n\t\tprotocolTransports: null,\n\t},\n\trelations: [\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'protocolTransports',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Wire\nvar Wire = exports.Wire = kind({\n\tname: \"Wire\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\tlastModified: null,\n\t\t// Foreign attributes\n\t\thardwarePin: null,\n\t\t// Primary Attributes\n\t\tinterfaceTypes: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'hardwarePin',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'interfaceTypes',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Zone\nvar Zone = exports.Zone = kind({\n\tname: \"Zone\",\n\tkind: RelationalModel,\n\tprimaryKey: \"ID\",\n\tattributes: {\n\t\tID: null,\n\t\tname: null,\n\t\thvacLoadEntryNode: null,\n\t\tairVolume: null,\n\t\tlastModified: null,\n\t\tlocked: null,\n\t\t// Foreign attributes\n\t\tfloor: null,\n\t\tinteriorMaterial: null,\n\t\t// Primary Attributes\n\t\tplugLoads: null,\n\t\tairInfiltrationLoads: null,\n\t\tsensors: null,\n\t\tsurfaces: null,\n\t\toccupancyLoads: null,\n\t},\n\trelations: [\n\t\t// Foreign relationships\n\t\t{\n\t\t\tkey: 'floor',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'interiorMaterial',\n\t\t\ttype: 'toOne',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t// Primary relationships\n\t\t{\n\t\t\tkey: 'plugLoads',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'airInfiltrationLoads',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'sensors',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'surfaces',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n\t\t{\n\t\t\tkey: 'occupancyLoads',\n\t\t\ttype: 'toMany',\n\t\t\tmodel: null,\n\t\t\tisOwner: false,\n\t\t},\n]})\n\n// Fixup Relations\n\nAirInfiltrationLoad.prototype.relations[0].model = Zone\n\nAllowedRange.prototype.relations[0].model = Variable\n\nAnalog.prototype.relations[0].model = InterfaceType\n\nAnimation.prototype.relations[0].model = Variable\nAnimation.prototype.relations[1].model = Image\n\nAutoPreference.prototype.relations[0].model = Comfort\n\nBranch.prototype.relations[0].model = Equation\nBranch.prototype.relations[1].model = EquipmentClass\n\nBuildingModel.prototype.relations[0].model = Building\n\nBuilding.prototype.relations[0].model = BuildingModel\nBuilding.prototype.relations[1].model = Image\nBuilding.prototype.relations[2].model = System\nBuilding.prototype.relations[3].model = Floor\n\nComfort.prototype.relations[0].model = SettingPreference\nComfort.prototype.relations[1].model = Occupant\nComfort.prototype.relations[2].model = SettingPreference\nComfort.prototype.relations[3].model = AutoPreference\n\nConnectionNet.prototype.relations[0].model = ConnectionNode\n\nConnectionNode.prototype.relations[0].model = Equipment\nConnectionNode.prototype.relations[1].model = Variable\nConnectionNode.prototype.relations[2].model = ConnectionNet\n\nControlType.prototype.relations[0].model = System\n\nControllerLibrary.prototype.relations[0].model = Controller\n\nController.prototype.relations[0].model = ControllerLibrary\nController.prototype.relations[1].model = IOModule\nController.prototype.relations[2].model = Image\nController.prototype.relations[3].model = NetworkMaster\n\nCoupling.prototype.relations[0].model = Equation\nCoupling.prototype.relations[1].model = Equation\nCoupling.prototype.relations[2].model = EquipmentClass\n\nDevice.prototype.relations[0].model = User\n\nEnergyCost.prototype.relations[0].model = SourceEnergy\n\nEquationDirectory.prototype.relations[0].model = Equation\n\nEquation.prototype.relations[0].model = EquationDirectory\nEquation.prototype.relations[1].model = Load\nEquation.prototype.relations[2].model = Coupling\nEquation.prototype.relations[3].model = Sensor\nEquation.prototype.relations[4].model = SourceSink\nEquation.prototype.relations[5].model = Mixer\nEquation.prototype.relations[6].model = Store\nEquation.prototype.relations[7].model = Branch\nEquation.prototype.relations[8].model = Router\nEquation.prototype.relations[9].model = Path\nEquation.prototype.relations[10].model = VariableJoin\nEquation.prototype.relations[11].model = Transport\n\nEquipmentClass.prototype.relations[0].model = Store\nEquipmentClass.prototype.relations[1].model = Coupling\nEquipmentClass.prototype.relations[2].model = Branch\nEquipmentClass.prototype.relations[3].model = SourceSink\nEquipmentClass.prototype.relations[4].model = Transport\nEquipmentClass.prototype.relations[5].model = SourceSink\nEquipmentClass.prototype.relations[6].model = Load\nEquipmentClass.prototype.relations[7].model = Router\nEquipmentClass.prototype.relations[8].model = Path\nEquipmentClass.prototype.relations[9].model = Sensor\nEquipmentClass.prototype.relations[10].model = Mixer\nEquipmentClass.prototype.relations[11].model = Equipment\n\nEquipmentGroup.prototype.relations[0].model = Subsystem\nEquipmentGroup.prototype.relations[1].model = Equipment\n\nEquipment.prototype.relations[0].model = Preference\nEquipment.prototype.relations[1].model = EquipmentClass\nEquipment.prototype.relations[2].model = Group\nEquipment.prototype.relations[3].model = Image\nEquipment.prototype.relations[4].model = ConnectionNode\nEquipment.prototype.relations[5].model = EquipmentGroup\nEquipment.prototype.relations[6].model = Manufacturer\n\nErrorHandler.prototype.relations[0].model = User\nErrorHandler.prototype.relations[1].model = User\nErrorHandler.prototype.relations[2].model = User\nErrorHandler.prototype.relations[3].model = EventCondition\n\nEventCondition.prototype.relations[0].model = EventCondition\nEventCondition.prototype.relations[1].model = Variable\nEventCondition.prototype.relations[2].model = IssueNote\nEventCondition.prototype.relations[3].model = EventCondition\nEventCondition.prototype.relations[4].model = ErrorHandler\n\nFloor.prototype.relations[0].model = Building\nFloor.prototype.relations[1].model = Image\nFloor.prototype.relations[2].model = Zone\n\nFolder.prototype.relations[0].model = FolderView\nFolder.prototype.relations[1].model = Group\nFolder.prototype.relations[2].model = System\n\nFolderView.prototype.relations[0].model = Folder\n\nGroup.prototype.relations[0].model = Folder\nGroup.prototype.relations[1].model = Equipment\n\nHistogramGroup.prototype.relations[0].model = Variable\nHistogramGroup.prototype.relations[1].model = Histogram\n\nHistogram.prototype.relations[0].model = HistogramGroup\n\nIOCardLibrary.prototype.relations[0].model = IOModule\n\nIOModule.prototype.relations[0].model = IOCardLibrary\nIOModule.prototype.relations[1].model = Pin\nIOModule.prototype.relations[2].model = Image\nIOModule.prototype.relations[3].model = Controller\n\nImage.prototype.relations[0].model = Building\nImage.prototype.relations[1].model = IOModule\nImage.prototype.relations[2].model = Floor\nImage.prototype.relations[3].model = System\nImage.prototype.relations[4].model = Equipment\nImage.prototype.relations[5].model = Controller\nImage.prototype.relations[6].model = Animation\n\nInterfaceType.prototype.relations[0].model = Analog\nInterfaceType.prototype.relations[1].model = Wire\nInterfaceType.prototype.relations[2].model = Analog\nInterfaceType.prototype.relations[3].model = Router\nInterfaceType.prototype.relations[4].model = Transport\nInterfaceType.prototype.relations[5].model = SourceSink\nInterfaceType.prototype.relations[6].model = Sensor\nInterfaceType.prototype.relations[7].model = Mixer\n\nIssueNote.prototype.relations[0].model = EventCondition\n\nLayerSet.prototype.relations[0].model = Layer\nLayerSet.prototype.relations[1].model = Surface\n\nLayer.prototype.relations[0].model = LayerSet\nLayer.prototype.relations[1].model = MaterialProperty\n\nLoad.prototype.relations[0].model = Equation\nLoad.prototype.relations[1].model = Equation\nLoad.prototype.relations[2].model = EquipmentClass\n\nLocation.prototype.relations[0].model = System\nLocation.prototype.relations[1].model = WeatherSource\n\nLog.prototype.relations[0].model = PredictionGroup\nLog.prototype.relations[1].model = Variable\n\nManufacturer.prototype.relations[0].model = Equipment\nManufacturer.prototype.relations[1].model = Model\n\nMaterialProperty.prototype.relations[0].model = Layer\nMaterialProperty.prototype.relations[1].model = Zone\n\nMixer.prototype.relations[0].model = InterfaceType\nMixer.prototype.relations[1].model = Equation\nMixer.prototype.relations[2].model = Equation\nMixer.prototype.relations[3].model = EquipmentClass\n\nModel.prototype.relations[0].model = Manufacturer\nModel.prototype.relations[1].model = VariableJoin\n\nNetworkMaster.prototype.relations[0].model = Controller\n\nOccupancyLoad.prototype.relations[0].model = Zone\n\nOccupancySource.prototype.relations[0].model = Variable\nOccupancySource.prototype.relations[1].model = Occupant\n\nOccupant.prototype.relations[0].model = User\nOccupant.prototype.relations[1].model = OccupancySource\nOccupant.prototype.relations[2].model = Comfort\n\nOrganization.prototype.relations[0].model = User\n\nOverhang.prototype.relations[0].model = Surface\n\nPath.prototype.relations[0].model = Equation\nPath.prototype.relations[1].model = Equation\nPath.prototype.relations[2].model = EquipmentClass\n\nPeripheralType.prototype.relations[0].model = ProtocolTransport\nPeripheralType.prototype.relations[1].model = Pin\n\nPin.prototype.relations[0].model = PeripheralType\nPin.prototype.relations[1].model = PeripheralType\nPin.prototype.relations[2].model = Wire\nPin.prototype.relations[3].model = IOModule\n\nPlugLoad.prototype.relations[0].model = Zone\n\nPredictionGroup.prototype.relations[0].model = Log\n\nPreference.prototype.relations[0].model = Equipment\nPreference.prototype.relations[1].model = VariableJoin\n\nProtocolTransport.prototype.relations[0].model = WireProtcol\nProtocolTransport.prototype.relations[1].model = PeripheralType\n\nRouter.prototype.relations[0].model = Equation\nRouter.prototype.relations[1].model = InterfaceType\nRouter.prototype.relations[2].model = Equation\nRouter.prototype.relations[3].model = EquipmentClass\n\nSensor.prototype.relations[0].model = InterfaceType\nSensor.prototype.relations[1].model = Equation\nSensor.prototype.relations[2].model = Zone\nSensor.prototype.relations[3].model = EquipmentClass\n\nSession.prototype.relations[0].model = User\n\nSettingPreference.prototype.relations[0].model = Comfort\n\nSourceEnergy.prototype.relations[0].model = EnergyCost\nSourceEnergy.prototype.relations[1].model = SourceSink\n\nSourceSink.prototype.relations[0].model = InterfaceType\nSourceSink.prototype.relations[1].model = SourceEnergy\nSourceSink.prototype.relations[2].model = Equation\nSourceSink.prototype.relations[3].model = Equation\nSourceSink.prototype.relations[4].model = Equation\nSourceSink.prototype.relations[5].model = Equation\nSourceSink.prototype.relations[6].model = Equation\nSourceSink.prototype.relations[7].model = Equation\nSourceSink.prototype.relations[8].model = Equation\nSourceSink.prototype.relations[9].model = EquipmentClass\n\nStore.prototype.relations[0].model = Equation\nStore.prototype.relations[1].model = Equation\nStore.prototype.relations[2].model = Equation\nStore.prototype.relations[3].model = Equation\nStore.prototype.relations[4].model = EquipmentClass\n\nSubsystemGroup.prototype.relations[0].model = System\nSubsystemGroup.prototype.relations[1].model = Subsystem\n\nSubsystem.prototype.relations[0].model = SubsystemGroup\nSubsystem.prototype.relations[1].model = EquipmentGroup\n\nSupportedUnit.prototype.relations[0].model = UnitLookup\n\nSurface.prototype.relations[0].model = LayerSet\nSurface.prototype.relations[1].model = Zone\nSurface.prototype.relations[2].model = Zone\nSurface.prototype.relations[3].model = Overhang\n\nSystemFolder.prototype.relations[0].model = System\n\nSystem.prototype.relations[0].model = Folder\nSystem.prototype.relations[1].model = SystemFolder\nSystem.prototype.relations[2].model = Location\nSystem.prototype.relations[3].model = Building\nSystem.prototype.relations[4].model = Image\nSystem.prototype.relations[5].model = SubsystemGroup\nSystem.prototype.relations[6].model = ControlType\n\nTransport.prototype.relations[0].model = Equation\nTransport.prototype.relations[1].model = Equation\nTransport.prototype.relations[2].model = InterfaceType\nTransport.prototype.relations[3].model = EquipmentClass\n\nUnitLookup.prototype.relations[0].model = SupportedUnit\n\nUser.prototype.relations[0].model = Organization\nUser.prototype.relations[1].model = Session\nUser.prototype.relations[2].model = Device\nUser.prototype.relations[3].model = Occupant\nUser.prototype.relations[4].model = ErrorHandler\n\nVariableDirectory.prototype.relations[0].model = Variable\n\nVariableJoin.prototype.relations[0].model = Equation\nVariableJoin.prototype.relations[1].model = Preference\nVariableJoin.prototype.relations[2].model = Variable\nVariableJoin.prototype.relations[3].model = Model\n\nVariable.prototype.relations[0].model = VariableDirectory\nVariable.prototype.relations[1].model = Log\nVariable.prototype.relations[2].model = AllowedRange\nVariable.prototype.relations[3].model = EventCondition\nVariable.prototype.relations[4].model = ConnectionNode\nVariable.prototype.relations[5].model = Animation\nVariable.prototype.relations[6].model = OccupancySource\nVariable.prototype.relations[7].model = HistogramGroup\nVariable.prototype.relations[8].model = VariableJoin\n\nWeatherLibrary.prototype.relations[0].model = WeatherSource\n\nWeatherSource.prototype.relations[0].model = Location\nWeatherSource.prototype.relations[1].model = WeatherLibrary\nWeatherSource.prototype.relations[2].model = Weather\n\nWeather.prototype.relations[0].model = WeatherSource\n\nWireProtcol.prototype.relations[0].model = ProtocolTransport\n\nWire.prototype.relations[0].model = Pin\nWire.prototype.relations[1].model = InterfaceType\n\nZone.prototype.relations[0].model = Floor\nZone.prototype.relations[1].model = MaterialProperty\nZone.prototype.relations[2].model = PlugLoad\nZone.prototype.relations[3].model = AirInfiltrationLoad\nZone.prototype.relations[4].model = Sensor\nZone.prototype.relations[5].model = Surface\nZone.prototype.relations[6].model = OccupancyLoad\n\n","//\n\nvar kind = require('enyo/kind');\n\nvar Signals = require('enyo/Signals'),\n    Control = require('enyo/Control');\n\nmodule.exports = kind({\n    name: 'pl.pg.Breadcrumbs',\n    kind: Control,\n    classes: 'enyo-unselectable  breadcrumbs-wrapper',\n    style: 'text-align: center',\n    zIndex: 100,\n    published: {\n        page: APP_PROGRESS.PR_SETUP,\n        path: [\n            {name: 'SETUP', page: APP_PROGRESS.PR_SETUP, key: 'SETUP'},\n            {name: 'SITE BUILDER', page: APP_PROGRESS.PR_SITE, key: 'SITE_BUILDER'},\n            {name: 'SYSTEM BUILDER', page: APP_PROGRESS.PR_SYSTEM, key: 'SYSTEM_BUILDER'},\n            {name: 'INTERFACE', page: APP_PROGRESS.PR_INTERFACE, key: 'INTERFACE'},\n            {name: 'WIRING', page: APP_PROGRESS.PR_WIRING, key: 'WIRING'},\n            {name: 'COMMISSION', page: APP_PROGRESS.PR_COMMISSION, key: 'COMMISSION'}\n        ]\n    },\n    components: [\n        {name: 'Breadcrumb', kind: Control, classes: 'breadcrumbs'},\n        {kind: Signals, onProgress: 'onProgress', onProgressStage: 'onProgressStage'}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        for(var i = 0; i < this.path.length; i++) {\n            this.$.Breadcrumb.createComponent({\n                name: 'Item_' + this.path[i].page,\n                classes: 'breadcrumbs-item' + (i + 1) + ' button not_started' + (this.page == this.path[i].page ? ' selected' : ''),\n                allowHtml: true,\n                page: this.path[i].page,\n                key: this.path[i].key,\n                percent: 0,\n                content: ''\n                + '<span class=\"label\">' + this.path[i].name + '</span>'\n                + '<span class=\"background\">'\n                + '  <span class=\"gauge\"><span class=\"arrow\"><span></span></span></span>'\n                + '<span class=\"arrow\"><span></span></span>'\n                + '</span>',\n                ontap: 'tapHandler'\n            }, {owner: this});\n        }\n        this.$.Breadcrumb.render();\n    },\n    tapHandler: function(inSender) {\n        // Change parent panel\n        this.bubble('onProgressChanged', {page: inSender.page});\n\n        // Change local variable\n        if (inSender.page < APP_PROGRESS.PR_SETUP_SITE_INFO) { \n            this.page = inSender.page;\n            this.key = inSender.key;\n        }\n\n        // Remove selected\n        for(var i = 0; i < this.$.Breadcrumb.children.length; i++) {\n            this.$.Breadcrumb.children[i].removeClass('selected');\n        }\n\n        // Add Class selected\n        inSender.addClass('selected');\n    },\n    setCurrentPageWithTap: function(page) {\n        if (page < APP_PROGRESS.PR_SETUP_SITE_INFO) {\n            this.$.Breadcrumb.children[page].triggerHandler('ontap');\n        }\n        this.setCurrentPage(page);\n    },\n    setCurrentPage: function(page) {\n        // HACK to add the code for making breadcrumb 100% when you swith to the NEXT page and only the next page\n        // if(page - 1) has percent > 1, change to 100%\n        if(page > 0) {\n            var percent = this.$.Breadcrumb.children[page - 1].percent;\n            var key = this.$.Breadcrumb.children[page - 1].key;\n            var page = page - 1;\n\n            if(percent > 1) {\n                PROGRESS[key] = 100;\n                Signals.send('onProgress', {page: page, key: key, value: 100});\n            }\n        }\n        // END HACK\n    },\n    onProgress: function(inSender, inEvent) {\n        var page = this.page;\n        var key = this.key;\n\n        if(inEvent.page !== undefined && inEvent.key !== undefined && inEvent.value !== undefined) {\n            page = inEvent.page;\n            key = inEvent.key;\n            PROGRESS[key] = parseInt(inEvent.value);\n        }\n\n        if (inEvent.page == APP_PROGRESS.PR_SETUP_SITE_INFO ||\n                inEvent.page == APP_PROGRESS.PR_SETUP_BUILDING_INFO) {\n            var sub_page = inEvent.page - APP_PROGRESS.PR_SETUP_SITE_INFO;\n            Signals.send('onSubSetupProgress', {page: sub_page, key: inEvent.key, value: inEvent.value});\n            return;\n        }\n\n        if (inEvent.page == APP_PROGRESS.PR_WIRING_AUTO_SETUP ||\n                inEvent.page == APP_PROGRESS.PR_WIRING_DEVICE_WIRING) {\n            var sub_page = inEvent.page - APP_PROGRESS.PR_WIRING_AUTO_SETUP;\n            Signals.send('onSubWiringProgress', {page: sub_page, key: inEvent.key, value: inEvent.value});\n            return;\n        }\n\n        var bcs = this.$.Breadcrumb.children,\n            percent = 0,\n            count = 0,\n            completed = true;\n\n        // Set percent\n        if(bcs[page].percent != PROGRESS[key]) {\n            bcs[page].percent = PROGRESS[key];\n            this.setPercentage(page, PROGRESS[key]);\n        }\n\n        // Set percent and count\n        for(var key in PROGRESS) {\n            percent += PROGRESS[key];\n            count++;\n            if(PROGRESS[key] < 100) {\n                completed = false;\n            }\n        }\n        if(percent >= count * 100 && completed === true) {\n            setTimeout(function() {\n                for(var i = 0; i < bcs.length; i++) {\n                    // Remove normal\n                    bcs[i].removeClass('button');\n                    bcs[i].removeClass('not_started');\n                    bcs[i].removeClass('not_finished');\n                    bcs[i].removeClass('partly_completed');\n                    bcs[i].removeClass('in_progress');\n                    // Add completed\n                    bcs[i].addClass('button_completed');\n                }\n            }, 100);\n        }\n    },\n    setPercentage: function(stage, percentage) {\n        var bcs = this.$.Breadcrumb.children;\n\n        function Breadcrumb(number) {\n            var completed = false, percentage = 0;\n            this.number = number;\n            this.getCompleted = function() {\n                return completed;\n            };\n            this.getPercentage = function() {\n                return percentage;\n            };\n            this.setPercentage = function(newPercentage) {\n                percentage = newPercentage;\n                if(percentage >= 100) {\n                    completed = true;\n                } else {\n                    completed = false;\n                }\n            };\n            return this;\n        }\n\n        function BreadcrumbPanel() {\n            var completed = false, breadcrumbs = [];\n\n            function checkIsPanelComplete() {\n                completed = true;\n                for(var i = 0; i < bcs.length; i++) {\n                    if(breadcrumbs[i].getCompleted() === false) {\n                        completed = false;\n                    }\n                }\n            }\n\n            this.getBreadcrumbPanelCompleted = function() {\n                return completed;\n            };\n            this.getBreadcrumbPercentage = function(breadcrumbNumber) {\n                return breadcrumbs[breadcrumbNumber].getPercentage();\n            };\n            this.setBreadcrumbPercentage = function(breadcrumbNumber, percentage) {\n                breadcrumbs[breadcrumbNumber].setPercentage(percentage);\n                checkIsPanelComplete();\n            };\n\n            function init() {\n                for(var i = 0; i < bcs.length; i++) {\n                    breadcrumbs[i] = new Breadcrumb(i);\n                }\n            }\n\n            init();\n\n            return this;\n        }\n\n        function BreadcrumbView() {\n            this.animateBreadcrumb = function(breadcrumbNumber, percentage, cb) {\n                function setClassInProgress(breadcrumbNumber, percentage) {\n                    for(var i = 0; i < bcs.length; i++) {\n                        if(bcs[i].percent < 100) {\n                            bcs[i].addClass('not_finished');\n                        }\n                    }\n                    bcs[breadcrumbNumber].removeClass('partly_completed');\n                    bcs[breadcrumbNumber].removeClass('not_started');\n                    bcs[breadcrumbNumber].removeClass('not_finished');\n                    bcs[breadcrumbNumber].addClass('in_progress');\n                }\n\n                //console.log(breadcrumbNumber + ' is ' + percentage + ' percents blue!!!');\n                var gauge = document.getElementById(bcs[breadcrumbNumber].getId()).getElementsByClassName('background')[0].getElementsByClassName('gauge')[0],\n                    HTMLPersentage, f = [];\n\n                setClassInProgress(breadcrumbNumber, percentage);\n\n                if(breadcrumbNumber === 0 && percentage < 4) {\n                    percentage = 3;\n                    gauge.style.display = 'none'\n                } else {\n                    gauge.style.display = ''\n                }\n                HTMLPersentage = percentage / 100 * 92;\n\n                // Set custom percentage levels\n                if(breadcrumbNumber == 0 || breadcrumbNumber == 3) {\n                    HTMLPersentage = percentage / 100 * 82;\n                } else if(breadcrumbNumber == 1) {\n                    HTMLPersentage = percentage / 100 * 84;\n                } else if(breadcrumbNumber == 2) {\n                    HTMLPersentage = percentage / 100 * 87;\n                } else if(breadcrumbNumber == 4) {\n                    HTMLPersentage = percentage / 100 * 79;\n                }\n                if(breadcrumbNumber === bcs.length - 1) {\n                    HTMLPersentage = percentage / 100 * 100;\n                }\n\n                // Check support Promise\n                if(typeof Promise !== 'function') {\n                    console.log('Not support Promise!');\n                    return false;\n                }\n\n                if(percentage < 100) {\n                    f.push(new Promise(function(resolve) {\n                        setTimeout(function() {\n                            gauge.style.width = HTMLPersentage + '%';\n                            resolve(HTMLPersentage);\n                        }, 50)\n                    }));\n                } else {\n                    f.push(new Promise(function(resolve) {\n                        setTimeout(function() {\n                            // Set custom percentage levels\n                            if(breadcrumbNumber == 0 || breadcrumbNumber == 3) {\n                                gauge.style.width = (99 / 100 * 82) + '%';\n                            } else if(breadcrumbNumber == 1) {\n                                gauge.style.width = (99 / 100 * 84) + '%';\n                            } else if(breadcrumbNumber == 2) {\n                                gauge.style.width = (99 / 100 * 87) + '%';\n                            } else if(breadcrumbNumber == 4) {\n                                gauge.style.width = (99 / 100 * 79) + '%';\n                            }\n\n                            //gauge.style.width = (99 / 100 * 92) + '%';\n                            if(breadcrumbNumber === bcs.length - 1) {\n                                gauge.style.width = 100 + '%';\n                            }\n                            resolve(gauge.style.width);\n                        }, 50)\n                    }));\n                    f.push(new Promise(function(resolve) {\n                        setTimeout(function() {\n                            bcs[breadcrumbNumber].removeClass('in_progress');\n                            bcs[breadcrumbNumber].addClass('partly_completed');\n                            resolve('partly_completed');\n                        }, 1050)\n                    }));\n                }\n                Promise.all(f).then(function() {\n                    cb();\n                });\n            };\n        }\n\n        function BreadcrumbPanelView() {\n            var breadcrumbView = new BreadcrumbView(),\n                breadcrumbPanel = new BreadcrumbPanel();\n            this.animatePanel = function(breadcrumbNumber, percentage) {\n                breadcrumbView.animateBreadcrumb(breadcrumbNumber, percentage, animateAsGreen);\n                function animateAsGreen() {\n                    breadcrumbPanel.setBreadcrumbPercentage(breadcrumbNumber, percentage);\n                    if(breadcrumbPanel.getBreadcrumbPanelCompleted()) {\n                        for(var i = 0; i < bcs.length; i++) {\n                            // Remove normal\n                            bcs[i].removeClass('button');\n                            bcs[i].removeClass('not_started');\n                            bcs[i].removeClass('not_finished');\n                            bcs[i].removeClass('partly_completed');\n                            bcs[i].removeClass('in_progress');\n                            // Add completed\n                            bcs[i].addClass('button_completed');\n                        }\n                    } else {\n                        for(var i = 0; i < bcs.length; i++) {\n                            // Remove completed\n                            bcs[i].removeClass('button_completed');\n                            bcs[i].addClass('button');\n                            // Set value\n                            if(bcs[i].percent >= 100) {\n                                bcs[i].removeClass('not_started');\n                                bcs[i].removeClass('not_finished');\n                                // Add partly_completed\n                                bcs[i].addClass('partly_completed');\n                            } else if(bcs[i].percent >= 4) {\n                                bcs[i].removeClass('partly_completed');\n                                bcs[i].removeClass('not_started');\n                                bcs[i].removeClass('not_finished');\n                                // Add in_progress\n                                bcs[i].addClass('in_progress');\n                            } else {\n                                bcs[i].removeClass('partly_completed');\n                                bcs[i].removeClass('in_progress');\n                                // Add not_started && not_finished\n                                bcs[i].addClass('not_started');\n                                bcs[i].addClass('not_finished');\n                            }\n                        }\n                    }\n                }\n            };\n        }\n\n        // Run\n        if(!this.breadcrumbPanelView) {\n            this.breadcrumbPanelView = new BreadcrumbPanelView();\n        }\n        this.breadcrumbPanelView.animatePanel(stage, percentage);\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar Control = require('enyo/Control'),\n    Signals = require('enyo/Signals');\n\nmodule.exports = kind({\n    name: \"pl.su.SubBreadcrumbs\",\n    kind: Control,\n    classes: \"enyo-unselectable  breadcrumbs-wrapper\",\n    style: \"text-align: center;\",\n    published: {\n        index: 0\n    },\n    events: {\n        onActivate: \"\"\n    },\n    components: [\n        {\n            name: \"Breadcrumb\", kind: Control, classes: \"breadcrumbs\",\n            components: [\n                {\n                    name: \"Item_1\",\n                    index: 0,\n                    classes: \"breadcrumbs-item1 button not_started selected\",\n                    allowHtml: true,\n                    content: \"\"\n                    + \"<span class='label'>SITE INFO</span>\"\n                    + \"<span class='background' >\"\n                    + \"  <span class='gauge'><span class='arrow'><span></span></span></span>\"\n                    + \"<span class='arrow'><span></span></span>\"\n                    + \"</span>\",\n                    ontap: \"tapHandler\"\n                },\n                {\n                    name: \"Item_2\",\n                    index: 1,\n                    classes: \"breadcrumbs-item2  button not_started\",\n                    allowHtml: true,\n                    content: \"\"\n                    + \"<span class='label'>BUILDING INFO</span>\"\n                    + \"<span class='background' >\"\n                    + \"  <span class='gauge'><span class='arrow'><span></span></span></span>\"\n                    + \"<span class='arrow'><span></span></span>\"\n                    + \"</span>\",\n                    ontap: \"tapHandler\"\n                }\n            ]\n        },\n        {kind: Signals, onSubSetupProgress: 'onSubSetupProgress'}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        this.tapHandler(this.$.Breadcrumb.children[0]);\n    },\n    setActive: function(index) {\n        if(!!this.$.Breadcrumb.children[index]) {\n            this.tapHandler(this.$.Breadcrumb.children[index]);\n        }\n    },\n    onSubSetupProgress: function(inSender, inEvent) {\n        var page = inEvent.page;\n        var key = inEvent.key;\n        var bcs = this.$.Breadcrumb.children;\n        if (document.getElementById(bcs[page].getId()) != null) {\n            var gauge = document.getElementById(bcs[page].getId()).getElementsByClassName('background')[0].getElementsByClassName('gauge')[0];\n\n            bcs[page].addClass('not_finished');\n            bcs[page].removeClass('in_progress');\n            bcs[page].removeClass('partly_completed');\n            bcs[page].removeClass('not_started');\n            bcs[page].removeClass('not_finished');\n            bcs[page].addClass('in_progress');\n\n            var percent = PROGRESS[key];\n            if (page == 0) {\n                percent = 2 * (PROGRESS[key] / 100 * 86);\n            }\n            else if (page == 1) {\n                percent = 2 * (PROGRESS[key] / 100 * 100);\n            }\n\n            gauge.style.display = '';\n            gauge.style.width = percent + '%';\n        }\n    },\n    tapHandler: function(inSender) {\n        for(var i = 0; i < this.$.Breadcrumb.children.length; i++) {\n            if(this.$.Breadcrumb.children[i] === inSender) {\n                if(!inSender.hasClass('selected')) {\n                    inSender.addClass('selected');\n                }\n            } else if(this.$.Breadcrumb.children[i].hasClass('selected')) {\n                this.$.Breadcrumb.children[i].removeClass('selected');\n            }\n        }\n        if(this.index !== inSender.index) {\n            this.index = inSender.index;\n            this.doActivate({index: inSender.index});\n        }\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar Control = require('enyo/Control'),\n    Signals = require('enyo/Signals');\n\nmodule.exports = kind({\n    name: \"pl.wr.SubBreadcrumbs\",\n    kind: Control,\n    classes: \"enyo-unselectable  breadcrumbs-wrapper\",\n    style: \"text-align: center;\",\n    published: {\n        index: 0\n    },\n    events: {\n        onActivate: \"\"\n    },\n    components: [\n        {\n            name: \"Breadcrumb\", kind: Control, classes: \"breadcrumbs\",\n            components: [\n                {\n                    name: \"Item_1\",\n                    index: 0,\n                    classes: \"breadcrumbs-item1 button not_started selected\",\n                    allowHtml: true,\n                    content: \"\"\n                    + \"<span class='label'>AUTO-SETUP</span>\"\n                    + \"<span class='background' >\"\n                    + \"  <span class='gauge'><span class='arrow'><span></span></span></span>\"\n                    + \"<span class='arrow'><span></span></span>\"\n                    + \"</span>\",\n                    ontap: \"tapHandler\"\n                },\n                {\n                    name: \"Item_2\",\n                    index: 1,\n                    classes: \"breadcrumbs-item2  button not_started\",\n                    allowHtml: true,\n                    content: \"\"\n                    + \"<span class='label'>DEVICE WIRING</span>\"\n                    + \"<span class='background' >\"\n                    + \"  <span class='gauge'><span class='arrow'><span></span></span></span>\"\n                    + \"<span class='arrow'><span></span></span>\"\n                    + \"</span>\",\n                    ontap: \"tapHandler\"\n                }\n            ]\n        },\n        {kind: Signals, onSubWiringProgress: 'onSubWiringProgress'}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        this.tapHandler(this.$.Breadcrumb.children[0]);\n    },\n    setActive: function(index) {\n        if(!!this.$.Breadcrumb.children[index]) {\n            this.tapHandler(this.$.Breadcrumb.children[index]);\n        }\n    },\n    onSubWiringProgress: function(inSender, inEvent) {\n        var page = inEvent.page;\n        var key = inEvent.key;\n        var bcs = this.$.Breadcrumb.children;\n        if (document.getElementById(bcs[page].getId()) != null) {\n            var gauge = document.getElementById(bcs[page].getId()).getElementsByClassName('background')[0].getElementsByClassName('gauge')[0];\n\n            bcs[page].addClass('not_finished');\n            bcs[page].removeClass('in_progress');\n            bcs[page].removeClass('partly_completed');\n            bcs[page].removeClass('not_started');\n            bcs[page].removeClass('not_finished');\n            bcs[page].addClass('in_progress');\n\n            var percent = PROGRESS[key];\n            if (page == 0) {\n                percent = (PROGRESS[key] / 100 * 86);\n            }\n            else if (page == 1) {\n                percent = (PROGRESS[key] / 100 * 100);\n            }\n\n            gauge.style.display = '';\n            gauge.style.width = percent + '%';\n        }\n    },\n    tapHandler: function(inSender) {\n        for(var i = 0; i < this.$.Breadcrumb.children.length; i++) {\n            if(this.$.Breadcrumb.children[i] === inSender) {\n                if(!inSender.hasClass('selected')) {\n                    inSender.addClass('selected');\n                }\n            } else if(this.$.Breadcrumb.children[i].hasClass('selected')) {\n                this.$.Breadcrumb.children[i].removeClass('selected');\n            }\n        }\n        if(this.index !== inSender.index) {\n            this.index = inSender.index;\n            this.doActivate({index: inSender.index});\n        }\n    }\n});\n","/**\n * The maps api is loaded using the Google Loader. Include\n * <script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\n * in your index.html to use this component.\n */\n\nvar kind = require('enyo/kind'),\n    bind = require('enyo/utils').bind;\n\nvar Control = require('enyo/Control'),\n    Signals = require('enyo/Signals');\n\n// Variable Global\nvar BuildingOnGoogleMaps = {type: undefined, building: undefined};\n\nfunction googleMenuOptions(data) {\n    BuildingOnGoogleMaps.type = data.getAttribute('type');\n    BuildingOnGoogleMaps.building = JSON.parse(data.getAttribute('data'));\n}\n\n// locationList Array item: {BuildingId, BuildingName, Latitude, Longitude}\n// Signals.send(\"onGoogleMapPosition\",{lat: lat, lng: lng})\nmodule.exports = kind({\n    name: 'GoogleMap',\n    kind: Control,\n    published: {\n        apiVersion: '3',\n        otherMapParams: 'libraries=geometry,places&language=en&key=AIzaSyBRuk7I6gZbwqPshcAxeUQCsngIuQWWHeU',\n        zoom: 15,\n        center: null,\n        mapType: \"HYBRID\",\n        disableDefaultUI: false,\n        panControl: false,\n        streetViewControl: false,\n        locationList: undefined,\n        single: false\n    },\n    events: {\n        onMapCreated: \"\",\n        onMapLoaded: \"\",\n        onElevation: \"\",\n        onAdminister: \"\",\n        onOpenSystemDesign: \"\"\n    },\n    constructor: function() {\n        this.inherited(arguments);\n        this.letter = \"A\";\n        this.address = undefined;\n        this.lat = 53.48539;\n        this.lng = -2.248474;\n        this.mapOptions = {};\n    },\n    components: [\n        {name: \"map\", classes: \"enyo-google-map\"},\n        {name: \"client\"},\n        {kind: Signals, onGoogleMapPosition: \"onGoogleMapPosition\"}\n    ],\n    //* @protected\n    create: function() {\n        this.inherited(arguments);\n        this.load();\n    },\n    load: function() {\n        google.load('maps', this.apiVersion, {\n            callback: bind(this, 'apiLoadHandler'),\n            other_params: this.otherMapParams\n        });\n    },\n    apiLoadHandler: function() {\n        this.apiLoaded = true;\n        this.isClick = false;\n        // Init\n        this.mapOptions.zoom = this.zoom;\n        switch(this.mapType) {\n            case \"ROADMAP\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.ROADMAP;\n                break;\n            case \"SATELLITE\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.SATELLITE;\n                break;\n            case \"HYBRID\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.HYBRID;\n                break;\n            case \"TERRAIN\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.TERRAIN;\n                break;\n            default:\n                break;\n        }\n        this.mapOptions.disableDefaultUI = this.disableDefaultUI;\n        this.mapOptions.panControl = this.panControl;\n        this.mapOptions.streetViewControl = this.streetViewControl;\n        if(this.hasNode()) {\n            this.createMap();\n        }\n    },\n    createMap: function() {\n        if(this.map) {\n            this.destroyMap();\n        }\n        if(this.$.map.hasNode()) {\n            // ====== Create map objects ======\n            this.geocoder = new google.maps.Geocoder();\n            this.infowindow = new google.maps.InfoWindow({\n                maxWidth: 220\n            });\n            // ====== Create map ======\n            if(this.single === true) {\n                this.createMapSingleLocation();\n            } else if(this.locationList != undefined && this.locationList.length > 0) {\n                this.createMapMultiLocation();\n            } else {\n                console.log(\"Error\")\n            }\n        }\n    },\n    createMapSingleLocation: function() {\n        this.currentPos = new google.maps.LatLng(this.lat, this.lng);\n        this.mapOptions.center = this.currentPos;\n\n        this.map = new google.maps.Map(this.$.map.node, this.mapOptions);\n        this.service = new google.maps.places.PlacesService(this.map);\n        var that = this;\n        /* Load Current Position */\n        // Get Elevation\n        this.getElevationByLocation(this.currentPos);\n        // Show Position\n        var marker = new google.maps.Marker({\n            position: this.currentPos,\n            map: this.map\n        });\n        // Event\n        if(this.isClick === true) {\n            google.maps.event.addListener(this.map, \"click\", function(event) {\n                // get Position\n                marker.setPosition(event.latLng);\n                that.getInformationByLocation(event.latLng.lat(), event.latLng.lng(), true);\n            });\n        }\n        // Return Event\n        this.doMapCreated();\n    },\n    // Parameter: Array item: {BuildingId, BuildingName, Latitude, Longitude}\n    createMapMultiLocation: function() {\n        var latLng = new google.maps.LatLng(this.locationList[0].lat, this.locationList[0].lng);\n        this.mapOptions.center = latLng;\n        this.map = new google.maps.Map(this.$.map.node, this.mapOptions);\n        // Init location list\n        this.placeList = new Array();\n        for(var i = 0; i < this.locationList.length; i++) {\n            this.placeList.push(this.initPlace(this.locationList[i]));\n        }\n        // Return Event\n        this.doMapCreated();\n    },\n    destroyMap: function() {\n        this.map = null;\n        this.infowindow = null;\n        this.geocoder = null;\n        this.letter = \"A\";\n    },\n    setLetterSize: function(lat, lng) {\n        var place = undefined;\n        if(!!this.apiLoaded) {\n            function getMarket(placeList, lat, lng) {\n                if(!!placeList && Object.prototype.toString.call(placeList) === '[object Array]') {\n                    for(var i = 0; i < placeList.length; i++) {\n                        if(placeList[i].lat == lat && placeList[i].lng == lng) {\n                            placeList[i].setIcon(\"http://maps.google.com/mapfiles/kml/paddle/\" + placeList[i].letter + \".png\");\n                            place = placeList[i];\n                        }\n                        else {\n                            placeList[i].setIcon(\"http://maps.google.com/mapfiles/marker\" + placeList[i].letter + \".png\");\n                        }\n                    }\n                }\n                return false;\n            }\n\n            getMarket(this.placeList, lat, lng);\n        }\n        return place;\n    },\n    onGoogleMapPosition: function(inSender, inEvent) {\n        var marker = this.setLetterSize(inEvent.lat, inEvent.lng);\n        if(marker) {\n            this.initPopUp(this, marker);\n        }\n    },\n    reLoad: function() {\n        this.createMap();\n    },\n    reLoadByOptions: function(options) {\n        if(options.position.lat) this.lat = options.position.lat;\n        if(options.position.lng) this.lng = options.position.lng;\n        !!options.isClick ? this.isClick = true : this.isClick = false;\n\n        switch(options.mapType) {\n            case \"ROADMAP\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.ROADMAP;\n                break;\n            case \"SATELLITE\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.SATELLITE;\n                break;\n            case \"HYBRID\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.HYBRID;\n                break;\n            case \"TERRAIN\":\n                this.mapOptions.mapTypeId = google.maps.MapTypeId.TERRAIN;\n                break;\n            default:\n                break;\n        }\n        this.createMap();\n    },\n    setCenter: function(inLat, inLng) {\n        this.center.lat = inLat;\n        this.center.lng = inLng;\n        this.map.panTo(new google.maps.LatLng(this.lat, this.lng));\n    },\n    setCenterByLocation: function(location, address) {\n        this.lat = location.lat().toFixed(6);\n        this.lng = location.lng().toFixed(6);\n        this.address = address;\n        this.map.panTo(location);\n    },\n    setPanToCurrent: function() {\n        this.map.panTo(new google.maps.LatLng(this.lat, this.lng));\n    },\n    initPopUp: function(that, marker) {\n        that.info = marker.info;\n        that.openId = 'google-map-open' + marker.info.project.id;\n        that.editId = 'google-map-edit' + marker.info.project.id;\n\n        var html = \"\" +\n            \"<div id='enyo-google-map-main' class='enyo-google-map-main row'>\" +\n            \"   <div class='col6'>\" +\n            \"       <div class='name'>\" + marker.info.project.name + \"</div>\" +\n            \"       <div class='row'>\" +\n            \"           <div class='col5'>\" +\n            \"               <div id='\" + that.openId + \"'>\" +\n            \"                   <div><span class='onyx-icon onyx-icon-button btn btn-open'></span></div>\" +\n            \"                   <div>OPEN</div>\" +\n            \"               </div>\" +\n            \"           </div>\" +\n            \"           <div class='col5'>\" +\n            \"               <div id='\" + that.editId + \"'>\" +\n            \"                   <div><span class='onyx-icon onyx-icon-button btn btn-setting'></span></div>\" +\n            \"                   <div>EDIT</div>\" +\n            \"               </div>\" +\n            \"           </div>\" +\n            \"       </div>\" +\n            \"   </div>\" +\n            \"   <div class='col4'>\" +\n            \"       <img style='height:60px' src='\" + marker.info.project.image + \"'/>\" +\n            \"   </div>\" +\n            \"</div>\";\n        that.infowindow.setContent(html);\n        that.infowindow.open(that.map, marker);\n\n        // Ready & Event Return\n        google.maps.event.addListener(that.infowindow, 'domready', function() {\n            document.getElementById('enyo-google-map-main').parentNode.parentNode.parentNode.classList.add(\"enyo-google-map-content\");\n            document.getElementById('enyo-google-map-main').parentNode.parentNode.parentNode.parentNode.classList.add(\"enyo-google-map-wrapper\");\n\n            // Add Event\n            if(!document.getElementById(that.openId).hasAddEvent) {\n                document.getElementById(that.openId).addEventListener('click', function(e) {\n                    e.preventDefault();\n                    that.doOpenSystemDesign(that.info);\n                });\n                document.getElementById(that.openId).hasAddEvent = true;\n            }\n\n            if(!document.getElementById(that.editId).hasAddEvent) {\n                document.getElementById(that.editId).addEventListener('click', function(e) {\n                    e.preventDefault();\n                    that.doAdminister(that.info);\n                });\n                document.getElementById(that.editId).hasAddEvent = true;\n            }\n\n            // Get Element\n            var popup = document.getElementsByClassName(\"enyo-google-map-content\");\n            popup = popup[0];\n\n            // Add Class\n            for(var i = 0; i < popup.childNodes.length; i++) {\n                popup.childNodes[i].classList.add(\"enyo-google-menu-element\" + i);\n            }\n        });\n    },\n    // Parameter building{BuildingId, BuildingName, Latitude, Longitude}\n    initPlace: function(building) {\n        var that = this;\n        var location = new google.maps.LatLng(building.lat, building.lng);\n        var letter = this.getLetter();\n        var marker = new google.maps.Marker({\n            position: location,\n            map: this.map,\n            //draggable: true,\n            label: letter,\n//            avatar: 'http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=bus|FFFF00'\n        });\n        marker.letter = letter;\n        marker.lat = building.lat;\n        marker.lng = building.lng;\n        marker.info = building;\n        // Event: Show Menu Option\n        google.maps.event.addListener(marker, \"click\", function() {\n            that.setLetterSize(this.lat, this.lng);\n            that.initPopUp(that, this);\n        });\n        google.maps.event.addListener(this.map, \"click\", function() {\n            that.setLetterSize(null, null);\n            that.infowindow.close();\n        });\n\n        return marker;\n    },\n    // Show Position, Show address when click\n    getPlaceMarker: function(location) {\n        var that = this;\n        var marker = new google.maps.Marker({\n            position: location,\n            map: this.map,\n            //draggable: true,\n            label: this.getLetter(),\n//            avatar: 'http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=bus|FFFF00'\n        });\n        // Get Information\n        this.geocoder.geocode({'latLng': location}, function(results, status) {\n            if(status == google.maps.GeocoderStatus.OK) {\n                var address = '<div style=\"max-width:200px\">'\n                    + '<div>' + results[0][\"formatted_address\"] + '</div>'\n                        //+ '<div style=\" display: inline-block; float: right\"><img src=\"' + marker.avatar + '\" /></div>'\n                    + '</div>';\n                // Event\n                google.maps.event.addListener(marker, \"click\", function() {\n                    that.infowindow.setContent(address);\n                    that.infowindow.open(that.map, this);\n                });\n            } else {\n                console.log(\"Geocode was not successful for the following reason: \" + status);\n            }\n        });\n    },\n    geoCodeByLocation: function(location, marker) {\n        var that = this;\n        this.geocoder.geocode({'latLng': location}, function(results, status) {\n            if(status == google.maps.GeocoderStatus.OK) {\n                var address = '<div style=\"max-width:200px\">'\n                    + '<div>' + results[0][\"formatted_address\"] + '</div>'\n                        //+ '<div style=\" display: inline-block; float: right\"><img src=\"' + marker.avatar + '\" /></div>'\n                    + '</div>';\n                // Event\n                google.maps.event.addListener(marker, \"click\", function() {\n                    that.infowindow.setContent(address);\n                    that.infowindow.open(that.map, this);\n                });\n            } else if(status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n                setTimeout(function() {\n                    that.geoCodeByLocation(location);\n                }, 200);\n            } else {\n                console.log(\"Geocode was not successful for the following reason: \" + status);\n            }\n        });\n\n    },\n    geoCodeByAddress: function(address) {\n        var that = this;\n        this.geocoder.geocode({'address': address}, function(results, status) {\n            if(status === google.maps.GeocoderStatus.OK) {\n                var result = results[0].geometry.location;\n                var marker = new google.maps.Marker({\n                    position: result,\n                    map: that.map\n                });\n            } else if(status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {\n                setTimeout(function() {\n                    that.geoCodeByAddress(address);\n                }, 200);\n            } else {\n                console.log(\"Geocode was not successful for the following reason:\" + status);\n            }\n        });\n    },\n    // Parameter: latLng, return altitude\n    getElevationByLocation: function(location) {\n        var that = this;\n        var locations = [location];\n        // Create a LocationElevationRequest object using the array's one value\n        var positionalRequest = {'locations': locations}\n        // Initiate the location request\n        var elevator = new google.maps.ElevationService();\n        elevator.getElevationForLocations(positionalRequest, function(results, status) {\n            if(status == google.maps.ElevationStatus.OK) {\n                // Retrieve the first result\n                if(results[0]) {\n                    that.altitude = results[0].elevation.toFixed(6);\n                    that.doElevation();\n                } else {\n                    alert('No results found');\n                }\n            } else {\n                alert('Elevation service failed due to: ' + status);\n            }\n        });\n    },\n    // Parameter: locations[latLng1,latLng2,...]\n    getElevationByLocations: function(locations) {\n        // Create a LocationElevationRequest object using the array's one value\n        var positionalRequest = {'locations': locations}\n        // Initiate the location request\n        var elevator = new google.maps.ElevationService();\n        elevator.getElevationForLocations(positionalRequest, function(results, status) {\n            if(status == google.maps.ElevationStatus.OK) {\n                // Retrieve the first result\n                if(results[0]) {\n                    // Open an info window indicating the elevation at the clicked position\n                    //infowindow.setContent('The elevation at this point <br>is ' + results[0].elevation + ' meters.');\n                    //infowindow.setPosition(clickedLocation);\n                    //infowindow.open(map);\n                } else {\n                    alert('No results found');\n                }\n            } else {\n                alert('Elevation service failed due to: ' + status);\n            }\n        });\n    },\n    // Single Position, return Near\n    getNearBySearch: function() {\n        var that = this;\n        var request = {location: this.currentPos, radius: 500, types: ['store']};\n        this.service.nearbySearch(request, function(places, status) {\n            if(status == google.maps.places.PlacesServiceStatus.OK) {\n                for(var i = 0; i < places.length; i++) {\n                    var marker = new google.maps.Marker({\n                        map: this.map,\n                        position: places[i].geometry.location,\n                        title: places[i].vicinity,\n                        label: this.getLetter(),\n                        draggable: true\n                    });\n                    marker.place = places[i];\n                    // Add click event listeners.\n                    google.maps.event.addListener(marker, 'click', function() {\n                        that.infowindow.setContent(this.place.name + '<br><img src=\"' + this.place.icon + '\"/>');\n                        that.infowindow.open(this.map, this);\n                    });\n                    // Add dragging event listeners.\n                    google.maps.event.addListener(marker, 'dragstart', function() {\n                    });\n                    google.maps.event.addListener(marker, 'drag', function() {\n                    });\n                    google.maps.event.addListener(marker, 'dragend', function() {\n                        // Get the Current position, where the pointer was dropped\n                        //var point = marker.getPosition();\n                        // Center the map at given point\n                        //this.map.panTo(point);\n                    });\n                }\n            }\n        }.bind(this));\n    },\n    getInformationByAddress: function(address) {\n        try {\n            var that = this;\n            this.geocoder.geocode({'address': address}, function(results, status) {\n                if(status == google.maps.GeocoderStatus.OK) {\n                    that.setCenterByLocation(results[0].geometry.location, results[0][\"formatted_address\"]);\n                    that.address = results[0][\"formatted_address\"];\n                    // Get Elevation\n                    that.getElevationByLocation(results[0].geometry.location);\n                } else {\n                    console.log(\"Geocode was not successful for the following reason: \" + status);\n                    that.bubble(\"onError\", {type: \"address\"});\n                }\n            });\n        } catch(err) {\n            console.log(err.message);\n        }\n    },\n    // if load === true  return event\n    getInformationByLocation: function(inLat, inLng, load) {\n        try {\n            var that = this;\n            var latLng = new google.maps.LatLng(inLat, inLng);\n            this.geocoder.geocode({'latLng': latLng}, function(results, status) {\n                if(status == google.maps.GeocoderStatus.OK) {\n                    that.setCenterByLocation(results[0].geometry.location, results[0][\"formatted_address\"]);\n                    if(load === true) {\n                        that.doMapLoaded();\n                    }\n                    // Get Elevation\n                    that.getElevationByLocation(results[0].geometry.location);\n                } else {\n                    console.log(\"Geocode was not successful for the following reason: \" + status);\n                    that.bubble(\"onError\", {type: \"location\"});\n                }\n            });\n        } catch(err) {\n            console.log(err.message);\n        }\n    },\n    // get next letter\n    getLetter: function() {\n        var temp = this.letter;\n        this.letter = String.fromCharCode(this.letter.charCodeAt(0) + 1);\n        return temp;\n    }\n});\n","// This is a specific instance of a \"test\" dataset in the Enyo style.\n\nvar kind = require('enyo/kind'),\n    Collection = require('enyo/Collection')\n\nvar mdlUser           = require('./models.js').User\nvar mdlOrganization   = require('./models.js').Organization  \nvar mdlDevice         = require('./models.js').Device        \nvar mdlSession        = require('./models.js').Session       \nvar mdlImage          = require('./models.js').Image\nvar mdlLocation       = require('./models.js').Location\nvar mdlSystemFolder   = require('./models.js').SystemFolder\nvar mdlBuildingModel  = require('./models.js').BuildingModel\nvar mdlBuilding       = require('./models.js').Building\nvar mdlFolder         = require('./models.js').Folder\nvar mdlSystem         = require('./models.js').System\nvar mdlControlType    = require('./models.js').ControlType\n\nvar enmRole                = require('./enums.js').Role\nvar enmBuildingModelTypes  = require('./enums.js').BuildingModelTypes\nvar enmBuildingTypes       = require('./enums.js').BuildingTypes\n\n// organizations\nvar organization = new mdlOrganization({\n        ID              : 1,\n        name            : \"PassiveLogic\",\n        streetAddress   : \"2040 E Murray Holladay Rd\",\n        city            : \"Salt Lake City\",\n        state           : \"UT\",\n        country         : \"United States\",\n        zipCode         : 84108,\n        lastModified    : new Date(),\n        locked          : false,\n})\n\n// device\nconst uuid = 'da7d18c5-7803-4547-9458-bd2c396010d1'\nvar device = new mdlDevice({\n    ID: 1, name: \"Test Device A\", UUID: uuid, kind: null, lastModified: new Date(), locked: true\n})\n\n// session\nvar session = new mdlSession({ID: 1})\n\n// user\nvar test_user = new mdlUser({\n    ID                  : 1,\n    email               : \"test@passive-logic.com\",\n    userName            : \"test\",\n    password            : \"test123\",\n    firstName           : \"Test\",\n    lastName            : \"User\",\n    createdDateTime     : new Date(),\n    lastSuccessfullLogin: null,\n    role                : enmRole.superUser,\n    lastFailedLogin     : null,\n    failedCount         : 0,\n    forcedReset         : 0,\n    salt                : 0,\n    lastModified        : new Date(),\n    locked              : false,\n})\n\nvar image_arnott      = new mdlImage({ID: 1, image: 'assets/images/projects/arnott.png'      , lastModified: new Date(), locked: false})\nvar image_hayes       = new mdlImage({ID: 2, image: 'assets/images/projects/hayes.png'       , lastModified: new Date(), locked: false})\nvar image_marano      = new mdlImage({ID: 3, image: 'assets/images/projects/marano.png'      , lastModified: new Date(), locked: false})\nvar image_olympuscove = new mdlImage({ID: 4, image: 'assets/images/projects/olympus-cove.png', lastModified: new Date(), locked: false})\nvar image_omeara      = new mdlImage({ID: 5, image: 'assets/images/projects/o-meara.png'     , lastModified: new Date(), locked: false})\nvar image_quinn       = new mdlImage({ID: 6, image: 'assets/images/projects/quinn.png'       , lastModified: new Date(), locked: false})\nvar image_turner      = new mdlImage({ID: 7, image: 'assets/images/projects/turner.png'      , lastModified: new Date(), locked: false})\nvar image_voz         = new mdlImage({ID: 8, image: 'assets/images/projects/voz.png'         , lastModified: new Date(), locked: false})\nvar image_zealey      = new mdlImage({ID: 9, image: 'assets/images/projects/zealey.png'      , lastModified: new Date(), locked: false})\n\nconst noaa = 0\nconst climate = {ID: 0}\n\nvar location_arnott      = new mdlLocation({ID: 1, address: '', latitude: 53.48539,  longitude: -2.248474, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_hayes       = new mdlLocation({ID: 2, address: '', latitude: 53.487305, longitude: -2.248832, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_marano      = new mdlLocation({ID: 3, address: '', latitude: 53.483079, longitude: -2.25426,  elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_olympuscove = new mdlLocation({ID: 4, address: '', latitude: 53.485913, longitude: -2.242308, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_omeara      = new mdlLocation({ID: 5, address: '', latitude: 53.48387,  longitude: -2.245227, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_quinn       = new mdlLocation({ID: 6, address: '', latitude: 53.482696, longitude: -2.244712, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_turner      = new mdlLocation({ID: 7, address: '', latitude: 53.481995, longitude: -2.246957, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_voz         = new mdlLocation({ID: 8, address: '', latitude: 53.488664, longitude: -2.243979, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\nvar location_zealey      = new mdlLocation({ID: 9, address: '', latitude: 53.488425, longitude: -2.237335, elevation: null, timeZone: 'MDT', lastModified: new Date(), locked: false})\n\nvar systemfolder_all      = new mdlSystemFolder({ID: 1, name: 'All Systems'     , toolTip: '', lastModified: new Date(), locked: false})\nvar systemfolder_unsorted = new mdlSystemFolder({ID: 2, name: 'Unsorted Systems', toolTip: '', lastModified: new Date(), locked: false})\nvar systemfolder_user1    = new mdlSystemFolder({ID: 3, name: 'User Folder 1'   , toolTip: '', lastModified: new Date(), locked: false})\nvar systemfolder_user2    = new mdlSystemFolder({ID: 4, name: 'User Folder 2'   , toolTip: '', lastModified: new Date(), locked: false})\n\nconst DDH = 0.0\nconst DDC = 0.0\nconst DE = 0.0\n\nvar buildingmodel_arnott      = new mdlBuildingModel({ID: 1, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_hayes       = new mdlBuildingModel({ID: 2, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_marano      = new mdlBuildingModel({ID: 3, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_olympuscove = new mdlBuildingModel({ID: 4, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_omeara      = new mdlBuildingModel({ID: 5, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_quinn       = new mdlBuildingModel({ID: 6, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_turner      = new mdlBuildingModel({ID: 7, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_voz         = new mdlBuildingModel({ID: 8, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\nvar buildingmodel_zealey      = new mdlBuildingModel({ID: 9, type: enmBuildingModelTypes.IFC, fileName: null, file: null, heatLossUA: null, designDayHeating: DDH, designDayCooling: DDC, designExtreme: DE, lastModified: new Date(), locked: false})\n\nvar building_arnott      = new mdlBuilding({ID: 1, name: 'Arnott Building',       notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_hayes       = new mdlBuilding({ID: 2, name: 'Hayes Building',        notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_marano      = new mdlBuilding({ID: 3, name: 'Marano Building',       notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_olympuscove = new mdlBuilding({ID: 4, name: 'Olympus Cove Building', notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_omeara      = new mdlBuilding({ID: 5, name: 'O\\`Meara Building',     notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_quinn       = new mdlBuilding({ID: 6, name: 'Quinn Building',        notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_turner      = new mdlBuilding({ID: 7, name: 'Turner Building',       notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_voz         = new mdlBuilding({ID: 8, name: 'Voz Building',          notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\nvar building_zealey      = new mdlBuilding({ID: 9, name: 'Zealey Building',       notes: '', buildingType: enmBuildingTypes.residential, lastModified: new Date(), locked: false})\n\n// folders\nvar folder = new mdlFolder({ID: 1, name: 'Test Folder', toolTip: '', lastModified: new Date(), locked: false})\n\n// systems\nvar system_arnott      = new mdlSystem({ID: 1, name: 'Arnott',         notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_hayes       = new mdlSystem({ID: 2, name: 'Hayes',          notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_marano      = new mdlSystem({ID: 3, name: 'Marano',         notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_olympuscove = new mdlSystem({ID: 4, name: 'Olympus Cove',   notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_omeara      = new mdlSystem({ID: 5, name: 'O\\'meara',       notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_quinn       = new mdlSystem({ID: 6, name: 'Quinn',          notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_turner      = new mdlSystem({ID: 7, name: 'Turner',         notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_voz         = new mdlSystem({ID: 8, name: 'Voz',            notes: '', status: '', lastModified: new Date(), locked: false})\nvar system_zealey      = new mdlSystem({ID: 9, name: 'Zealey',         notes: '', status: '', lastModified: new Date(), locked: false})\n\nvar controltype_arnott      = new mdlControlType({ID: 1, HVAC: true, lighting: false, irrigation: false, system: system_arnott     })\nvar controltype_hayes       = new mdlControlType({ID: 2, HVAC: true, lighting: false, irrigation: false, system: system_hayes      })\nvar controltype_marano      = new mdlControlType({ID: 3, HVAC: true, lighting: false, irrigation: false, system: system_marano     })\nvar controltype_olympuscove = new mdlControlType({ID: 4, HVAC: true, lighting: false, irrigation: false, system: system_olympuscove})\nvar controltype_omeara      = new mdlControlType({ID: 5, HVAC: true, lighting: false, irrigation: false, system: system_omeara     })\nvar controltype_quinn       = new mdlControlType({ID: 6, HVAC: true, lighting: false, irrigation: false, system: system_quinn      })\nvar controltype_turner      = new mdlControlType({ID: 7, HVAC: true, lighting: false, irrigation: false, system: system_turner     })\nvar controltype_voz         = new mdlControlType({ID: 8, HVAC: true, lighting: false, irrigation: false, system: system_voz        })\nvar controltype_zealey      = new mdlControlType({ID: 9, HVAC: true, lighting: false, irrigation: false, system: system_zealey     })\n\n// Complete relations\n\norganization.set('users', [test_user])\n\ndevice.set('user', test_user)\n\nsession.set('users', [test_user])\n\ntest_user.set('organization', organization)\ntest_user.set('session',      session)\ntest_user.set('devices',      [device])\ntest_user.set('occupants',    [])\n\n     image_arnott.set('buildings', [     building_arnott])\n      image_hayes.set('buildings', [      building_hayes])\n     image_marano.set('buildings', [     building_marano])\nimage_olympuscove.set('buildings', [building_olympuscove])\n     image_omeara.set('buildings', [     building_omeara])\n      image_quinn.set('buildings', [      building_quinn])\n     image_turner.set('buildings', [     building_turner])\n        image_voz.set('buildings', [        building_voz])\n     image_zealey.set('buildings', [     building_zealey])\n\n     image_arnott.set('systems', [system_arnott     ])\n      image_hayes.set('systems', [system_hayes      ])\n     image_marano.set('systems', [system_marano     ])\nimage_olympuscove.set('systems', [system_olympuscove])\n     image_omeara.set('systems', [system_omeara     ])\n      image_quinn.set('systems', [system_quinn      ])\n     image_turner.set('systems', [system_turner     ])\n        image_voz.set('systems', [system_voz        ])\n     image_zealey.set('systems', [system_zealey     ])\n\n     location_arnott.set('systems', [     system_arnott])\n      location_hayes.set('systems', [      system_hayes])\n     location_marano.set('systems', [     system_marano])\nlocation_olympuscove.set('systems', [system_olympuscove])\n     location_omeara.set('systems', [     system_omeara])\n      location_quinn.set('systems', [      system_quinn])\n     location_turner.set('systems', [     system_turner])\n        location_voz.set('systems', [        system_voz])\n     location_zealey.set('systems', [     system_zealey])\n\n     location_arnott.set('weatherSources', [])\n      location_hayes.set('weatherSources', [])\n     location_marano.set('weatherSources', [])\nlocation_olympuscove.set('weatherSources', [])\n     location_omeara.set('weatherSources', [])\n      location_quinn.set('weatherSources', [])\n     location_turner.set('weatherSources', [])\n        location_voz.set('weatherSources', [])\n     location_zealey.set('weatherSources', [])\n\nsystemfolder_all.set('systems', [\n         system_arnott,\n          system_hayes,\n         system_marano,\n    system_olympuscove,\n         system_omeara,\n          system_quinn,\n         system_turner,\n            system_voz,\n         system_zealey\n])\n\n     buildingmodel_arnott.set('buildings', [     building_arnott]) \n      buildingmodel_hayes.set('buildings', [      building_hayes]) \n     buildingmodel_marano.set('buildings', [     building_marano]) \nbuildingmodel_olympuscove.set('buildings', [building_olympuscove]) \n     buildingmodel_omeara.set('buildings', [     building_omeara]) \n      buildingmodel_quinn.set('buildings', [      building_quinn]) \n     buildingmodel_turner.set('buildings', [     building_turner]) \n        buildingmodel_voz.set('buildings', [        building_voz]) \n     buildingmodel_zealey.set('buildings', [     building_zealey]) \n\n     building_arnott.set('systems', [     system_arnott])\n      building_hayes.set('systems', [      system_hayes])\n     building_marano.set('systems', [     system_marano])\nbuilding_olympuscove.set('systems', [system_olympuscove])\n     building_omeara.set('systems', [     system_omeara])\n      building_quinn.set('systems', [      system_quinn])\n     building_turner.set('systems', [     system_turner])\n        building_voz.set('systems', [        system_voz])\n     building_zealey.set('systems', [     system_zealey])\n\n     building_arnott.set('buildingModel', [     buildingmodel_arnott])\n      building_hayes.set('buildingModel', [      buildingmodel_hayes])\n     building_marano.set('buildingModel', [     buildingmodel_marano])\nbuilding_olympuscove.set('buildingModel', [buildingmodel_olympuscove])\n     building_omeara.set('buildingModel', [     buildingmodel_omeara])\n      building_quinn.set('buildingModel', [      buildingmodel_quinn])\n     building_turner.set('buildingModel', [     buildingmodel_turner])\n        building_voz.set('buildingModel', [        buildingmodel_voz])\n     building_zealey.set('buildingModel', [     buildingmodel_zealey])\n\n     building_arnott.set('image',      image_arnott.ID)\n      building_hayes.set('image',       image_hayes.ID)\n     building_marano.set('image',      image_marano.ID)\nbuilding_olympuscove.set('image', image_olympuscove.ID)\n     building_omeara.set('image',      image_omeara.ID)\n      building_quinn.set('image',       image_quinn.ID)\n     building_turner.set('image',      image_turner.ID)\n        building_voz.set('image',         image_voz.ID)\n     building_zealey.set('image',      image_zealey.ID)\n\n//folder.set('folderviews', )\n//folder.set('groups', )\nfolder.set('systems', [\n         system_arnott.get(\"ID\"),\n          system_hayes.get(\"ID\"),\n         system_marano.get(\"ID\"),\n    system_olympuscove.get(\"ID\"),\n         system_omeara.get(\"ID\"),\n          system_quinn.get(\"ID\"),\n         system_turner.get(\"ID\"),\n            system_voz.get(\"ID\"),\n         system_zealey.get(\"ID\")\n])\n\n     system_arnott.set('folder', folder)\n      system_hayes.set('folder', folder)\n     system_marano.set('folder', folder)\nsystem_olympuscove.set('folder', folder)\n     system_omeara.set('folder', folder)\n      system_quinn.set('folder', folder)\n     system_turner.set('folder', folder)\n        system_voz.set('folder', folder)\n     system_zealey.set('folder', folder)\n\n     system_arnott.set('systemFolder', systemfolder_all)\n      system_hayes.set('systemFolder', systemfolder_all)\n     system_marano.set('systemFolder', systemfolder_all)\nsystem_olympuscove.set('systemFolder', systemfolder_all)\n     system_omeara.set('systemFolder', systemfolder_all)\n      system_quinn.set('systemFolder', systemfolder_all)\n     system_turner.set('systemFolder', systemfolder_all)\n        system_voz.set('systemFolder', systemfolder_all)\n     system_zealey.set('systemFolder', systemfolder_all)\n\n     system_arnott.set('location',      location_arnott)\n      system_hayes.set('location',       location_hayes)\n     system_marano.set('location',      location_marano)\nsystem_olympuscove.set('location', location_olympuscove)\n     system_omeara.set('location',      location_omeara)\n      system_quinn.set('location',       location_quinn)\n     system_turner.set('location',      location_turner)\n        system_voz.set('location',         location_voz)\n     system_zealey.set('location',      location_zealey)\n\n     system_arnott.set('building',      building_arnott)\n      system_hayes.set('building',       building_hayes)\n     system_marano.set('building',      building_marano)\nsystem_olympuscove.set('building', building_olympuscove)\n     system_omeara.set('building',      building_omeara)\n      system_quinn.set('building',       building_quinn)\n     system_turner.set('building',      building_turner)\n        system_voz.set('building',         building_voz)\n     system_zealey.set('building',      building_zealey)\n\n     system_arnott.set('image',      image_arnott)\n      system_hayes.set('image',       image_hayes)\n     system_marano.set('image',      image_marano)\nsystem_olympuscove.set('image', image_olympuscove)\n     system_omeara.set('image',      image_omeara)\n      system_quinn.set('image',       image_quinn)\n     system_turner.set('image',      image_turner)\n        system_voz.set('image',         image_voz)\n     system_zealey.set('image',      image_zealey)\n\n     system_arnott.set('controlTypes',      controltype_arnott)\n      system_hayes.set('controlTypes',       controltype_hayes)\n     system_marano.set('controlTypes',      controltype_marano)\nsystem_olympuscove.set('controlTypes', controltype_olympuscove)\n     system_omeara.set('controlTypes',      controltype_omeara)\n      system_quinn.set('controlTypes',       controltype_quinn)\n     system_turner.set('controlTypes',      controltype_turner)\n        system_voz.set('controlTypes',         controltype_voz)\n     system_zealey.set('controlTypes',      controltype_zealey)\n\nvar mdlOrganizations    = kind({kind: Collection, name: \"Organizations\",     model: mdlOrganization })\nvar mdlDevices          = kind({kind: Collection, name: \"mdlDevices\",        model: mdlDevice       })\nvar mdlSessions         = kind({kind: Collection, name: \"mdlSessions\",       model: mdlSession      })\nvar mdlUsers            = kind({kind: Collection, name: \"mdlUsers\",          model: mdlUser         })\nvar mdlImages           = kind({kind: Collection, name: \"mdlImages\",         model: mdlImage        })\nvar mdlLocations        = kind({kind: Collection, name: \"mdlLocations\",      model: mdlLocation     })\nvar mdlSystemFolders    = kind({kind: Collection, name: \"mdlSystemFolders\",  model: mdlSystemFolder })\nvar mdlBuildingModels   = kind({kind: Collection, name: \"mdlBuildingModels\", model: mdlBuildingModel})\nvar mdlBuildings        = kind({kind: Collection, name: \"mdlBuildings\",      model: mdlBuilding     })\nvar mdlSystems          = kind({kind: Collection, name: \"mdlSystems\",        model: mdlSystem       })\n\nmodule.exports = kind({\n    name: 'StaticDataModel',\n    organizations: new mdlOrganizations([organization]),\n    devices: new mdlDevices([device]),\n    sessions: new mdlSessions([session]),\n    users: new mdlUsers([test_user]),\n    images: new mdlImages([\n        image_arnott,\n        image_hayes,\n        image_marano,\n        image_olympuscove,\n        image_omeara,\n        image_quinn,\n        image_turner,\n        image_voz,\n        image_zealey,\n    ]),\n    locations: new mdlLocations([\n        location_arnott,\n        location_hayes,\n        location_marano,\n        location_olympuscove,\n        location_omeara,\n        location_quinn,\n        location_turner,\n        location_voz,\n        location_zealey,\n    ]),\n    systemfolders: new mdlSystemFolders([\n        systemfolder_all,\n        systemfolder_unsorted,\n        systemfolder_user1,\n        systemfolder_user2,\n    ]),\n    buildingmodels: new mdlBuildingModels([\n        buildingmodel_arnott,\n        buildingmodel_hayes,\n        buildingmodel_marano,\n        buildingmodel_olympuscove,\n        buildingmodel_omeara,\n        buildingmodel_quinn,\n        buildingmodel_turner,\n        buildingmodel_voz,\n        buildingmodel_zealey,\n    ]),\n    buildings: new mdlBuildings([\n        building_arnott,\n        building_hayes,\n        building_marano,\n        building_olympuscove,\n        building_omeara,\n        building_quinn,\n        building_turner,\n        building_voz,\n        building_zealey,\n    ]),\n    systems: new mdlSystems([\n        system_arnott,\n        system_hayes,\n        system_marano,\n        system_olympuscove,\n        system_omeara,\n        system_quinn,\n        system_turner,\n        system_voz,\n        system_zealey,\n    ]),\n})\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Image = require('enyo/Image');\n\nmodule.exports = kind({\n    name: \"pl.site.Sensor\",\n    kind: FittableRows,\n    classes: \"sensor\",\n    handlers: {\n        onmouseover: \"pressed\",\n        onmouseout: \"released\"\n    },\n    published: {\n        url: \"\",\n        title: \"\"\n    },\n    events: {\n        onSelect: \"\",\n        onRemove: \"\"\n    },\n    components: [\n        { kind: FittableColumns, ontap: \"doSelect\", components: [\n            { name: \"Image\", kind: Image, classes: \"image\" },\n            { name: \"Title\", classes: \"title\", fit: true }\n        ]},\n        { name: \"Remove\", classes: \"delete\", ontap: \"doRemove\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        this.$.Image.setSrc(this.url);\n        this.$.Title.setContent(this.title);\n    },\n    pressed: function() {\n        this.addClass(\"selected\");\n    },\n    released: function() {\n        this.removeClass(\"selected\");\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows'),\n    Input = require('onyx/Input'),\n    Signals = require('enyo/Signals');\n\nvar utils = require('../../../common/services/utils.js');\n\nmodule.exports = kind({\n    name: 'pl.site.Input',\n    handlers: {\n        onmouseover: 'pressed',\n        onmouseout: 'released'\n    },\n    events: {\n        onChanged: '',\n        onDelete: ''\n    },\n    published: {\n        value: 'unknown',\n        color: undefined,\n        zoneObject: new Collection()\n    },\n    components: [\n        {\n            name: 'Wrapper', kind: FittableRows, classes: 'input', onholdpulse: 'holdpulse',\n            components: [\n                {name: 'Value'},\n                {name: 'Color', classes: 'color', showing: false},\n                {name: 'Input', kind: Input, type: 'text', oninput: 'valueChanged', onchange: 'valueChanged'},\n                {name: 'Remove', classes: 'remove', ontap: 'doDelete'}\n            ]\n        },\n        {kind: Signals, onSiteZoneCreated: 'onSiteZoneCreated'},\n        {kind: Signals, onSiteZoneRemoved: 'onSiteZoneRemoved'},\n        {kind: Signals, onSiteZoneColorChanged: 'onSiteZoneColorChanged'},\n        {kind: Signals, onCheckInput: 'onCheckInput'},\n        {kind: Signals, onKeyDown: 'onKeyDown'}\n    ],\n    create: function() {\n        this.inherited(arguments);\n\n        this.edit = false;\n        this.setDescription();\n    },\n    pressed: function() {\n        this.addClass('hover');\n    },\n    released: function() {\n        this.removeClass('hover');\n    },\n    // Edit Enable\n    holdpulse: function(inSender, inEvent) {\n        if(inEvent.holdTime >= SITE_SETTING.holdTime) {\n            this.edit = true;\n            this.enable();\n        }\n    },\n    disable: function() {\n        this.$.Input.hide();\n        this.$.Remove.hide();\n        this.edit = false;\n\n        // Has changed\n        if(this.senderChanged) {\n            this.doChanged(this.senderChanged);\n            delete this.senderChanged;\n        }\n    },\n    enable: function() {\n        if(this.edit) {\n            this.$.Input.show();\n            this.$.Input.focus();\n            this.$.Input.selectContents();\n            //this.$.Remove.show();\n\n            // Changing\n            this.senderChanged = this.$.Input;\n        }\n    },\n    setEnable: function() {\n        this.edit = true;\n        this.enable();\n    },\n    setDescription: function() {\n        this.$.Value.setContent(this.value);\n        this.$.Input.setValue(this.value);\n        this.$.Color.applyStyle('background-color', utils.getRgbaString(this.color, SITE_SETTING.transparency));\n        //this.oldValue = this.value;\n    },\n    // Value changed\n    valueChanged: function(inSender) {\n        //if(inSender.getValue().trim() == '') {\n        //    this.$.Value.setContent(this.oldValue);\n        //    this.$.Input.setValue(this.oldValue);\n        //} else {\n        //    this.value = this.$.Input.getValue();\n        //    this.oldValue = this.value;\n        //    this.$.Value.setContent(this.value);\n        //}\n        this.value = this.$.Input.getValue();\n        this.$.Value.setContent(this.value);\n    },\n    colorChanged: function(color) {\n        this.color = color;\n        this.zoneObject.color = color;\n\n        this.$.Color.applyStyle('background-color', utils.getRgbaString(this.color, SITE_SETTING.transparency));\n    },\n    onSiteZoneCreated: function(inSender, inEvent) {\n        if(inEvent.floorId == this.floorId && inEvent.zoneId == this.zoneId) {\n            // Hack to add breadcrumb percentage\n            var percent = 0;\n            percent = PROGRESS['SITE_BUILDER'];\n            percent += 10;\n            if(PROGRESS['SITE_BUILDER'] < 100) {\n                Signals.send('onProgress', {page: APP_PROGRESS.PR_SITE, key: 'SITE_BUILDER', value: percent});\n            } else {\n                PROGRESS['SITE_BUILDER'] = 100;\n            }\n            // END HACK\n\n            this.colorChanged(inEvent.color);\n            this.$.Color.show();\n        }\n    },\n    onSiteZoneRemoved: function(inSender, inEvent) {\n        if(inEvent.floorId == this.floorId && inEvent.zoneId == this.zoneId) {\n            this.$.Color.hide();\n        }\n    },\n    onSiteZoneColorChanged: function(inSender, inEvent) {\n        if(inEvent.floorId == this.floorId && inEvent.zoneId == this.zoneId) {\n            this.colorChanged(inEvent.color);\n        }\n    },\n    onCheckInput: function(inSender, inEvent) {\n        if(inEvent.sender == this || inEvent.sender == this.$.Wrapper || inEvent.sender == this.$.Value || inEvent.sender == this.$.Input) {\n            this.enable();\n        } else {\n            this.disable();\n        }\n    },\n    onKeyDown: function(inSender, inEvent) {\n        if(inEvent.keyCode === 13) { // Enter\n            this.disable();\n        }\n    }\n});\n","// MenuItem\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows'),\n    Signals = require('enyo/Signals'),\n    Input = require('onyx/Input');\n\nmodule.exports = kind({\n    name: \"pl.wr.Input\",\n    tag: \"li\",\n    kind: FittableRows,\n    handlers: {\n        onmouseover: \"pressed\",\n        onmouseout: \"released\"\n    },\n    published: {\n        title: \"NO NAME\",\n        edit: false\n    },\n    components: [\n        {kind: FittableRows, classes: \"input\", components: [\n            {name: \"Title\", objType: \"input\"},\n            {name: \"Input\", kind: Input, objType: \"input\"}\n        ]},\n        {kind: Signals, onCheckInput: \"transmission\"},\n        {kind: Signals, onKeyDown: \"keyDown\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        this.$.Title.setContent(this.title);\n        this.$.Input.setValue(this.title);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        if(!this.edit) this.disable();\n    },\n    pressed: function() {\n        this.addClass(\"selected\");\n    },\n    released: function() {\n        this.removeClass(\"selected\");\n    },\n    disable: function() {\n        this.$.Input.hide();\n    },\n    enable: function() {\n        this.$.Input.show();\n    },\n    transmission: function(inSender, inEvent) {\n        if(inEvent.sender == this || inEvent.sender == this.$.Wrapper || inEvent.sender == this.$.Value || inEvent.sender == this.$.Input) {\n            this.enable();\n        } else {\n            this.disable();\n        }\n    },\n    keyDown: function(inSender, inEvent) {\n        if(inEvent.keyCode === 13) { // Enter\n            this.disable();\n        }\n    }\n});\n\n","// MenuItem\n\nvar kind = require('enyo/kind');\n\nvar Drawer = require('onyx/Drawer'),\n    FittableRows = require('layout/FittableRows'),\n    FittableRowsLayout = require('layout/FittableLayout').Rows;\n\nvar MenuItem = kind({\n    name: \"MenuItem\",\n    tag: \"li\",\n    handlers: {\n        onmouseover: \"pressed\",\n        onmouseout: \"released\"\n    },\n    published: {\n        title: \"\"\n    },\n    allowHtml: true,\n    create: function() {\n        this.inherited(arguments);\n        this.setContent(this.title);\n    },\n    pressed: function() {\n        this.addClass(\"selected\");\n    },\n    released: function() {\n        this.removeClass(\"selected\");\n    }\n});\nexports.MenuItem = MenuItem;\n\n// MenuBar\nvar MenuBar = kind({\n    name: \"MenuBar\",\n    kind: FittableRows,\n    classes: \"menu-bar\",\n    published: {\n        resizeContent: false,\n        contentComponents: \"\"\n    },\n    events: {\n        onItemTap: \"\",\n        onItemDrag: \"\",\n        onDisable: \"\"\n    },\n    heightTitle: undefined,\n    heightContent: undefined,\n    currentSelect: undefined,\n    components: [\n        {layoutKind: FittableRowsLayout, name: \"MenuContent\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        for(var i = 0; i < this.contentComponents.length; i++) {\n            this.$.MenuContent.createComponent({\n                name: \"Item_\" + i, index: i, components: [\n                    {\n                        name: \"ItemTitle_\" + i,\n                        index: i,\n                        classes: \"title\",\n                        ontap: \"handleShowTap\",\n                        content: this.contentComponents[i][0]\n                    },\n                    {\n                        name: \"ItemDrawer_\" + i, index: i, kind: Drawer, tag: \"ul\", open: false, animated: false,\n                        onDrawerAnimationEnd: \"drawerAnimationEnd\",\n                        components: this.contentComponents[i][1]\n                    }\n                ]\n            }, {owner: this})\n        }\n        if(this.resizeContent == true) {\n            this.resizeHeightContent();\n        }\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        for(var i = 0; i < this.$.MenuContent.children.length; i++) {\n            this.$.MenuContent.children[i].children[1].setOpen(false);\n        }\n        this.$.MenuContent.children[0].addClass(\"selected\");\n        this.$.MenuContent.children[0].children[1].setOpen(true);\n        if(this.resizeContent == true) this.resizeHeightContent();\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        if(this.resizeContent == true) this.resizeHeightContent();\n    },\n    resizeHeightContent: function() {\n        this.heightTitle = utils.getCSSProperty(this.$.MenuContent.children[0].children[0], \"offsetHeight\", false);\n        this.heightContent = utils.getCSSProperty(this, \"offsetHeight\", false) - this.heightTitle * this.$.MenuContent.children.length;\n        for(var i = 0; i < this.$.MenuContent.children.length; i++) {\n            if(this.$.MenuContent.children[i].hasClass(\"selected\")) {\n                this.$.MenuContent.children[i].applyStyle(\"height\", (this.heightContent + this.heightTitle) + \"px\");\n            }\n        }\n    },\n    handleShowTap: function(inSender, inEvent) {\n        if(!this.$[\"Item_\" + inSender.index].hasClass(\"selected\")) {\n            for(var i = 0; i < this.$.MenuContent.children.length; i++) {\n                if(this.$.MenuContent.children[i] != this.$[\"Item_\" + inSender.index] && this.$.MenuContent.children[i].hasClass(\"selected\")) {\n                    this.$.MenuContent.children[i].children[1].applyStyle(\"overflow\", \"hidden\");\n                    this.$.MenuContent.children[i].children[1].setOpen(false);\n                    this.$.MenuContent.children[i].removeClass(\"selected\");\n                    this.$.MenuContent.children[i].applyStyle(\"height\", this.heightTitle + \"px\");\n                }\n            }\n            this.$[\"Item_\" + inSender.index].children[1].applyStyle(\"overflow\", \"hidden\");\n            this.$[\"Item_\" + inSender.index].children[1].setOpen(true);\n            this.$[\"Item_\" + inSender.index].addClass(\"selected\");\n            if(this.resizeContent == true) this.$[\"Item_\" + inSender.index].applyStyle(\"height\", (this.heightContent + this.heightTitle) + \"px\");\n        }\n        else {\n            this.$[\"Item_\" + inSender.index].children[1].applyStyle(\"overflow\", \"hidden\");\n            this.$[\"Item_\" + inSender.index].children[1].setOpen(false);\n            this.$[\"Item_\" + inSender.index].removeClass(\"selected\");\n            this.doDisable();\n        }\n    },\n    handleItemTap: function(inSender, inEvent) {\n        if(this.currentSelect == inSender.name) {\n            return;\n        }\n        if(this.currentSelect != undefined) {\n            this.$[this.currentSelect].removeClass(\"active\");\n        }\n        this.currentSelect = inSender.name;\n        this.$[this.currentSelect].addClass(\"active\");\n        this.doItemTap(inEvent);\n    },\n    handleItemDrag: function(inSender, inEvent) {\n        this.doItemDrag(inEvent);\n    },\n    // Fix overflow: hidden;\n    drawerAnimationEnd: function(inSender) {\n        inSender.applyStyle(\"overflow\", \"inherit\");\n    }\n});\nexports.MenuBar = MenuBar;\n","// SEARCH\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals');\n\nvar Image = require('enyo/Image'),\n    Input = require('onyx/Input'),\n    InputDecorator = require('onyx/InputDecorator'),\n    Toolbar = require('onyx/Toolbar');\n\nmodule.exports = kind({\n    name: \"pl.st.Search\",\n    kind: Toolbar,\n    classes: \"form-search\",\n    components: [\n        { kind: InputDecorator, components: [\n            { kind: Input, placeholder: \"SEARCH\", oninput: \"valueChanged\"},\n            { kind: Image, src: \"assets/images/search-input-search.png\", ontap: \"valueChanged\" }\n        ]}\n    ],\n    valueChanged: function() {\n        var value = this.$.input.getValue().trim();\n        this.bubble(\"onChanged\", {value: value});\n        Signals.send(\"onSystemSearch\", {value: value});\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar Checkbox = require('onyx/Checkbox'),\n    Signals = require('enyo/Signals'),\n    Drawer = require('onyx/Drawer'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableRows = require('layout/FittableRows'),\n    FittableRowsLayout = require('layout/FittableLayout').Rows,\n    GoogleMap = require('../../../components/googlemap.js'),\n    Group = require('enyo/Group'),\n    Input = require('onyx/Input'),\n    Scroller = require('enyo/Scroller'),\n    TextArea = require('onyx/TextArea');\n\nvar LABELS = require('../../../common/services/label.js').LABELS;\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nmodule.exports = kind({\n    name: \"pl.su.Site\",\n    kind: FittableRows,\n    classes: \"site-info enyo-fit\",\n    components: [\n        { name: \"Project\", kind: FittableRows, classes: \"outer-box\", components: [\n            { name: \"ProjectName\", classes: \"drawer-title\", content: \"PROJECT INFORMATION<div class='ok'></div>\", allowHtml: true, drawer: \"ProjectContent\", ontap: \"activateDrawer\"},\n            { name: \"ProjectContent\", kind: Drawer, open: true, classes: \"inner-box\", components: [\n                { kind: FittableColumns, components: [\n                    { kind: FittableRows, fit: true, components: [\n                        { classes: \"item-row\", components: [\n                            { classes: \"item-title\", content: \"PROJECT NAME\"},\n                            {\n                                name: \"NameInput\", kind: Input, placeholder: LABELS.setup.projectName, classes: \"txt-project-name\",\n                                oninput: \"valueChanged\",\n                                onfocus: \"onSaveFocus\",\n                                onkeydown: \"onSaveKeyDown\",\n                                onchange: \"onSaveChange\"\n                            }\n                        ]},\n                        { classes: \"item-row\", components: [\n                            { classes: \"item-title\", content: \"NOTES\"},\n                            {\n                                name: \"NotesInput\", kind: TextArea, classes: \"txt-note\", placeholder: LABELS.setup.projectNotes,\n                                oninput: \"valueChanged\",\n                                onfocus: \"onSaveFocus\",\n                                onkeydown: \"onSaveKeyDown\",\n                                onchange: \"onSaveChange\"\n                            }\n                        ]}\n                    ]},\n                    { classes: \"checkgroup\", layoutKind: FittableRowsLayout, components: [\n                        { classes: \"item-title\", content: \"CONTROL TYPE\"},\n                        { name: \"ControlTypeGroupCheckbox\", classes: \"checkgroup-box multiple\", components: [\n                            { kind: FittableColumns, ontap:\"onCheckBoxTap\", checkbox: \"HvacSystemCheckbox\", components: [\n                                { name: \"HvacSystemCheckbox\", kind: Checkbox, classes: \"checkbox-style2 hvac-system\", onchange: \"valueChanged\"},\n                                { content: \"HVAC SYSTEM\" }\n                            ]},\n                            { kind: FittableColumns, ontap:\"onCheckBoxTap\", checkbox: \"LightingCheckbox\", components: [\n                                { name: \"LightingCheckbox\", kind: Checkbox, classes: \"checkbox-style2 lighting\", onchange: \"valueChanged\"},\n                                { content: \"LIGHTING\" }\n                            ]},\n                            { kind: FittableColumns, ontap:\"onCheckBoxTap\", checkbox: \"IrrigationCheckbox\", components: [\n                                { name: \"IrrigationCheckbox\", kind: Checkbox, classes: \"checkbox-style2 irrigation\", onchange: \"valueChanged\"},\n                                { content: \"IRRIGATION\" }\n                            ]}\n                        ]}\n                    ]},\n                    { classes: \"checkgroup\", layoutKind: FittableRowsLayout, components: [\n                        { classes: \"item-title\", content: \"BUILDING/SITE TYPE\"},\n                        { name: \"SiteTypeGroupCheckbox\", kind: Group, defaultKind: Checkbox, classes: \"checkgroup-box single\", onActivate: \"valueChanged\", components: [\n                            { name: \"CommercialCheckbox\", parentName: \"SiteTypeGroupCheckbox\", index: BUILDING_SITE_TYPES.COMMERCIAL, content: \"COMMERCIAL\", classes: \"checkbox-style2 commercial\"},\n                            { name: \"ResidentialCheckbox\", parentName: \"SiteTypeGroupCheckbox\", index: BUILDING_SITE_TYPES.RESIDENTIAL, content: \"RESIDENTIAL\", classes: \"checkbox-style2 residential\"},\n                            { name: \"IndustrialCheckbox\", parentName: \"SiteTypeGroupCheckbox\", index: BUILDING_SITE_TYPES.INDUSTRIAL, content: \"INDUSTRIAL\", classes: \"checkbox-style2 industrial\"}\n                            //{ name: \"OtherCheckbox\", parentName: \"SiteTypeGroupCheckbox\", index: \"other\", content: \"OTHER\", classes: \"checkbox-style2 other\"}\n                        ]}\n                    ]}\n                ]}\n            ]}\n        ]},\n        { name: \"Location\", kind: FittableRows, classes: \"outer-box\", fit: true, components: [\n            { name: \"LocationName\", classes: \"drawer-title\", content: \"LOCATION INFORMATION<div class='ok'></div>\", allowHtml: true, drawer: \"LocationContent\", ontap: \"activateDrawer\"},\n            { name: \"LocationContent\", kind: Drawer, open: true, fit: true, classes: \"inner-box\", components: [\n                { kind: FittableColumns, style: \"height:100%\", components: [\n                    { layoutKind: FittableRowsLayout, kind: Scroller, fit: true, components: [\n                        { classes: \"item-row\", components: [\n                            { classes: \"item-title\", content: \"ADDRESS\"},\n                            {\n                                name: \"AddressInput\", kind: TextArea, classes: \"txt-address\", placeholder: LABELS.setup.projectAddress,\n                                //oninput: \"valueChanged\",\n                                onfocus: \"onSaveFocus\",\n                                onkeydown: \"onSaveKeyDown\",\n                                //onchange: \"onSaveChange\"\n                                onchange: \"valueChanged\"\n                            }\n                        ]},\n                        { classes: \"item-row\", components: [\n                            { classes: \"item-title\", content: \"COORDINATES\"},\n                            { kind: FittableColumns, components: [\n                                {\n                                    name: \"NorthInput\", kind: Input, classes: \"txt-coordinates\", placeholder: LABELS.setup.projectCoordinates,\n                                    oninput: \"valueChanged\",\n                                    onfocus: \"onSaveFocus\",\n                                    onkeydown: \"onSaveKeyDown\",\n                                    onchange: \"onSaveChange\"\n                                },\n                                { classes: \"textCoordinates\", content: \"°N\"},\n                                {\n                                    name: \"WestInput\", kind: Input, classes: \"txt-coordinates\", placeholder: LABELS.setup.projectCoordinates,\n                                    oninput: \"valueChanged\",\n                                    onfocus: \"onSaveFocus\",\n                                    onkeydown: \"onSaveKeyDown\",\n                                    onchange: \"onSaveChange\"\n                                },\n                                { classes: \"textCoordinates\", content: \"°W\"}\n                            ]}\n                        ]},\n                        { classes: \"item-row\", components: [\n                            { classes: \"item-title\", content: \"ALTITUDE\"},\n                            {\n                                name: \"AltitudeInput\", kind: Input, classes: \"txt-altitude\", attributes: {readonly: true}, placeholder: LABELS.setup.projectAltitude,\n                                oninput: \"valueChanged\",\n                                onfocus: \"onSaveFocus\",\n                                onkeydown: \"onSaveKeyDown\",\n                                onchange: \"onSaveChange\"\n                            }\n                        ]}\n                    ]},\n                    { kind: FittableRows, name: \"GoogleMapWrap\", classes: \"google-map-wrap\" }\n\n                ]}\n            ]}\n        ]}\n    ],\n    breadcrumbHack: function(key, page, percentToAdd) {\n        // Hack to add breadcrumb percentage\n        var percent = PROGRESS[key];\n\n        percent += percentToAdd;\n\n        if(PROGRESS[key] < 100) {\n            Signals.send(\"onProgress\", {page: page, key: key, value: percent});\n        } else {\n            PROGRESS[key] = 100;\n        }\n    },\n    constructor: function() {\n        this.inherited(arguments);\n        // Data\n        this.project = plProject2;\n    },\n    create: function() {\n        this.inherited(arguments);\n\n        // Set input fields\n        this.inputFields = {\n            name: this.$.NameInput,\n            notes: this.$.NotesInput,\n            controlTypes: {\n                hvacSystem: this.$.HvacSystemCheckbox,\n                lighting: this.$.LightingCheckbox,\n                irrigation: this.$.IrrigationCheckbox\n            },\n            buildingSiteType: this.$.SiteTypeGroupCheckbox,\n            buildingSiteTypeChilds: {\n                // TODO:: Refactor comerical to commercial it is spelled wrong...\n                commercial: this.$.CommercialCheckbox,\n                residential: this.$.ResidentialCheckbox,\n                industrial: this.$.IndustrialCheckbox\n                //other: this.$.OtherCheckbox\n            },\n            address: this.$.AddressInput,\n            north: this.$.NorthInput,\n            west: this.$.WestInput,\n            altitude: this.$.AltitudeInput\n        };\n    },\n    rendered: function() {\n        this.inherited(arguments);\n\n        // Update data\n        /*this.inputFields.name.setValue(this.project.name);\n         this.inputFields.notes.setValue(this.project.notes);*/\n\n        this.inputFields.controlTypes.hvacSystem.setChecked(this.project.hvacSystem);\n        this.inputFields.controlTypes.lighting.setChecked(this.project.lighting);\n        this.inputFields.controlTypes.irrigation.setChecked(this.project.irrigation);\n        if(this.project.buildingSiteType == BUILDING_SITE_TYPES.COMMERCIAL) {\n            this.inputFields.buildingSiteTypeChilds.commercial.setChecked(true);\n        } else if(this.project.buildingSiteType == BUILDING_SITE_TYPES.RESIDENTIAL) {\n            this.inputFields.buildingSiteTypeChilds.residential.setChecked(true);\n        } else if(this.project.buildingSiteType == BUILDING_SITE_TYPES.INDUSTRIAL) {\n            this.inputFields.buildingSiteTypeChilds.industrial.setChecked(true);\n        }\n        this.inputFields.address.setValue(this.project.address);\n        this.inputFields.north.setValue(this.project.north);\n        this.inputFields.west.setValue(this.project.west);\n        this.inputFields.altitude.setValue(this.project.altitude);\n\n        // Set oldValue SiteTypeGroupCheckbox\n        var me = this;\n        document.getElementById(this.inputFields.buildingSiteType.getId()).addEventListener('mousedown', function(e) {\n            if(me.inputFields.buildingSiteType.hasChange && me.inputFields.buildingSiteType.oldValue !== me.inputFields.buildingSiteType.getActive()) {\n                me.inputFields.buildingSiteType.oldValue = me.inputFields.buildingSiteType.getActive()\n            }\n        });\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    activateDrawer: function(inSender, inEvent) {\n        if(this.$[inSender.drawer].open === true) {\n            inSender.addClass(\"unactive\");\n        } else if(inSender.hasClass(\"unactive\")) {\n            inSender.removeClass(\"unactive\");\n        }\n        this.$[inSender.drawer].setOpen(!this.$[inSender.drawer].open);\n    },\n    onCheckBoxTap: function(inSender) {\n        this.$[inSender.checkbox].triggerHandler('ontap');\n    },\n    initGoogleMap: function() {\n        this.$.GoogleMapWrap.createComponent({\n            name: \"GoogleMap\",\n            kind: GoogleMap,\n            single: true,\n            classes: \"google-map\",\n            onMapLoaded: \"mapLoaded\",\n            onElevation: \"mapElevation\",\n            onError: \"mapError\"\n        }, {owner: this});\n        this.$.GoogleMap.render();\n    },\n    mapReLoad: function() {\n        if(this.$.GoogleMap) {\n            this.$.GoogleMap.reLoad();\n        }\n    },\n    mapLoaded: function() {\n        this.inputFields.address.setValue(this.$.GoogleMap.address);\n        this.inputFields.north.setValue(this.$.GoogleMap.lat);\n        this.inputFields.west.setValue(this.$.GoogleMap.lng);\n    },\n    mapElevation: function(inSender, inEvent) {\n        if(this.inputFields.north.getValue() != '' && this.inputFields.west.getValue() != '') {\n            this.inputFields.altitude.setValue(inEvent.originator.altitude);\n            this.project.altitude = inEvent.originator.altitude;\n        }\n        // Check mark\n        this.checkMark();\n    },\n    mapError: function(inSender, inEvent) {\n        if(inEvent.type == \"address\") {\n            this.inputFields.north.setValue(\"\");\n            this.inputFields.west.setValue(\"\");\n            this.inputFields.altitude.setValue(\"\");\n        } else if(inEvent.type == \"location\") {\n            this.inputFields.address.setValue(\"\");\n            this.inputFields.altitude.setValue(\"\");\n        }\n        // Check mark\n        this.checkMark();\n    },\n    valueChanged: function(inSender, inEvent) {\n        switch(inSender.name) {\n            case \"NameInput\":\n                this.project.name = this.inputFields.name.getValue();\n                break;\n            case \"NotesInput\":\n                this.project.notes = this.inputFields.notes.getValue();\n                break;\n            case \"HvacSystemCheckbox\":\n                this.project.hvacSystem = this.inputFields.controlTypes.hvacSystem.getChecked();\n\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    inSender,\n                    !this.project.hvacSystem\n                );\n                break;\n            case \"LightingCheckbox\":\n                this.project.lighting = this.inputFields.controlTypes.lighting.getChecked();\n\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    inSender,\n                    !this.project.lighting\n                );\n                break;\n            case \"IrrigationCheckbox\":\n                this.project.irrigation = this.inputFields.controlTypes.irrigation.getChecked();\n\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    inSender,\n                    !this.project.irrigation\n                );\n                break;\n            case \"SiteTypeGroupCheckbox\":\n                if(this.inputFields.buildingSiteType.getActive()) {\n                    this.inputFields.buildingSiteType.hasChange = true;\n                    this.project.buildingSiteType = inEvent.originator.index;\n                    if(this.inputFields.buildingSiteType.oldValue && this.inputFields.buildingSiteType.oldValue !== this.inputFields.buildingSiteType.getActive()) {\n                        if(!(this.curentStack && this.curentStack.value === this.inputFields.buildingSiteType.oldValue)) {\n                            this.curentStack = STACK_LIST.addStack(\n                                this.owner.name,\n                                this.owner.name,\n                                STACK_TYPES.ENYO,\n                                STACK_METHODS.EDIT,\n                                this.inputFields.buildingSiteType,\n                                this.inputFields.buildingSiteType.oldValue\n                            );\n                        }\n                    }\n                }\n                break;\n            case \"AddressInput\":\n                this.$.GoogleMap.getInformationByAddress(this.inputFields.address.getValue());\n                this.inputFields.north.setValue(this.$.GoogleMap.lat);\n                this.inputFields.west.setValue(this.$.GoogleMap.lng);\n                this.project.address = this.inputFields.address.getValue();\n                this.project.north = this.$.GoogleMap.lat;\n                this.project.west = this.$.GoogleMap.lng;\n                break;\n            case \"NorthInput\":\n                this.$.GoogleMap.getInformationByLocation(this.inputFields.north.getValue(), this.inputFields.west.getValue());\n                this.inputFields.address.setValue(this.$.GoogleMap.address);\n                this.project.address = this.$.GoogleMap.address;\n                this.project.north = this.inputFields.north.getValue();\n                this.project.west = this.inputFields.west.getValue();\n                break;\n            case \"WestInput\":\n                this.$.GoogleMap.getInformationByLocation(this.inputFields.north.getValue(), this.inputFields.west.getValue());\n                this.inputFields.address.setValue(this.$.GoogleMap.address);\n                this.project.address = this.$.GoogleMap.address;\n                this.project.north = this.inputFields.north.getValue();\n                this.project.west = this.inputFields.west.getValue();\n                break;\n            case \"AltitudeInput\":\n                break;\n        }\n        // Check mark\n        this.checkMark();\n    },\n    // Check mark for information\n    checkMark: function() {\n        var case1 = this.checkMarkProject();\n        var case2 = this.checkMarkLocation();\n        if(case1 && case2) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    checkMarkProject: function() {\n        var percent = 0;\n        var name = this.inputFields.name.getValue();\n        var notes = this.inputFields.notes.getValue();\n        var hvacSystem = this.inputFields.controlTypes.hvacSystem.getChecked();\n        var lighting = this.inputFields.controlTypes.lighting.getChecked();\n        var irrigation = this.inputFields.controlTypes.irrigation.getChecked();\n        var buildingSiteType = this.inputFields.buildingSiteType.getActive();\n\n        if(!!name && !!notes && !!buildingSiteType && (!!hvacSystem || !!irrigation || !!lighting)) {\n            if(!this.$.ProjectName.hasClass(\"check\")) {\n                // Hack to add breadcrumb percentage\n                // percent = PROGRESS['SETUP'];\n                // percent+=25;\n                // Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, 25);\n                this.breadcrumbHack('SETUP_SITE_INFO', APP_PROGRESS.PR_SETUP_SITE_INFO, 25);\n                // END HACK\n\n                this.$.ProjectName.addClass(\"check\");\n            }\n            return true;\n        } else {\n            if(this.$.ProjectName.hasClass(\"check\")) {\n                // Hack to add breadcrumb percentage\n                // percent = PROGRESS['SETUP'];\n                // percent-=25;\n                // Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, -25);\n                this.breadcrumbHack('SETUP_SITE_INFO', APP_PROGRESS.PR_SETUP_INFO, -25);\n                // END HACK\n\n                this.$.ProjectName.removeClass(\"check\");\n            }\n            return false;\n        }\n    },\n    checkMarkLocation: function() {\n        var percent = 0;\n        var address = this.inputFields.address.getValue();\n        var north = this.inputFields.north.getValue();\n        var west = this.inputFields.west.getValue();\n        var altitude = this.inputFields.altitude.getValue();\n\n        if(!!address && !!north && !!west && !!altitude) {\n            if(!this.$.LocationName.hasClass(\"check\")) {\n                // Hack to add breadcrumb percentage\n                // percent = PROGRESS['SETUP'];\n                // percent+=25;\n                // Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, 25);\n                this.breadcrumbHack('SETUP_SITE_INFO', APP_PROGRESS.PR_SETUP_SITE_INFO, 25);\n                // END HACK\n\n                this.$.LocationName.addClass(\"check\");\n            }\n            return true;\n        } else {\n            if(this.$.LocationName.hasClass(\"check\")) {\n                // Hack to add breadcrumb percentage\n                // percent = PROGRESS['SETUP'];\n                // percent-=25;\n                // Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, -25);\n                this.breadcrumbHack('SETUP_SITE_INFO', APP_PROGRESS.PR_SETUP_SITE_INFO, -25);\n                // END HACK\n\n                this.$.LocationName.removeClass(\"check\");\n            }\n            return false;\n        }\n    },\n    // Save old\n    onSaveFocus: function(inSender) {\n        var value = inSender.getValue();\n        if(typeof value === 'string') {\n            value = value.trim();\n        }\n        inSender.valueFocus = value;\n        inSender.isFocus = true;\n    },\n    // Save in progress\n    onSaveKeyDown: function(inSender, inEvent) {\n        if(inEvent.keyCode === 13) {\n            var currentValue = inSender.getValue();\n            if(typeof currentValue === 'string') {\n                currentValue = currentValue.trim();\n            }\n            if(inSender.isFocus && inSender.valueFocus != currentValue) {\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    inSender,\n                    inSender.valueFocus\n                );\n\n                inSender.valueFocus = currentValue;\n            }\n        }\n    },\n    // Save to stack\n    onSaveChange: function(inSender) {\n        if(inSender.isFocus) {\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.EDIT,\n                inSender,\n                inSender.valueFocus\n            );\n\n            inSender.isFocus = false;\n        }\n    },\n    undo: function(stack) {\n        this.checkMark();\n    }\n});\n","// SideBarItem\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows');\nvar Drawer = require('onyx/Drawer');\nvar Scroller = require('enyo/Scroller');\nvar Image = require('enyo/Image');\n\nvar utils = require('../common/services/utils.js');\n\nvar SideBarItem = kind({\n    name: 'SideBarItem',\n    tag: 'li',\n    handlers: {\n        onmouseover: 'pressed',\n        onmouseout: 'released'\n    },\n    published: {\n        image: '',\n        title: '',\n        width: undefined,\n        height: undefined,\n        scale: 1\n    },\n    style: 'position:relative',\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents([\n            {\n                name: 'Image',\n                kind: Image,\n                src: this.image,\n                style: (this.width != undefined ? ('width:' + this.width * this.scale + 'px;') : '') + (this.height != undefined ? ('height:' + this.height * this.scale + 'px;') : '')\n            },\n            {name: 'MainContent', classes: 'name', content: this.title}\n        ]);\n    },\n    pressed: function() {\n        this.addClass('selected');\n    },\n    released: function() {\n        this.removeClass('selected');\n    }\n});\nexports.SideBarItem = SideBarItem;\n\n// SideBar\nvar SideBar = kind({\n    name: 'SideBar',\n    kind: FittableRows,\n    classes: 'side-bar',\n    published: {\n        contentComponents: '',\n        touch: true\n    },\n    events: {\n        onSideBarItemSelect: '',\n        onSideBarDragFinish: '',\n        onSideBarOnDrag: '',\n        onSideBarDragStart: ''\n    },\n    items: undefined,\n    currentSelect: -1,\n    oldSelect: -1,\n    heightParent: 0,\n    heightTitle: 0,\n    heightContent: 0,\n    scrollTop: 0,\n    create: function() {\n        this.inherited(arguments);\n\n        // Create main scroller\n        this.createComponent({\n            name: 'scroller',\n            kind: Scroller,\n            classes: 'enyo-fit',\n            touch: this.touch,\n            horizontal: 'hidden',\n            onScroll: 'handlerScroll'\n        });\n\n        // Create children\n        this.items = new Array();\n        for(var i = 0; i < this.contentComponents.length; i++) {\n            // Create a new component\n            var node = this.$.scroller.createComponent([\n                {\n                    name: 'SlideBarItem_' + i, index: i, classes: 'slidebar-item',\n                    components: [\n                        {\n                            name: 'SlideBarItem_' + i + '_Name',\n                            index: i,\n                            tag: 'div',\n                            classes: 'slidebar-name',\n                            ontap: 'handleShowTap',\n                            content: this.contentComponents[i][0]\n                        },\n                        {\n                            name: 'SlideBarItem_' + i + '_Drawer',\n                            index: i,\n                            kind: Drawer,\n                            open: false,\n                            animated: true,\n                            components: [\n                                {\n                                    name: 'SlideBarItem_' + i + '_Content',\n                                    index: i,\n                                    tag: 'ul',\n                                    //kind: Scroller,\n                                    //touch: false,\n                                    //horizontal: 'hidden',\n                                    classes: 'slidebar-content',\n                                    components: this.contentComponents[i][1]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ], {owner: this});\n\n            this.items.push({id: i, node: node});\n        }\n        this.$.scroller.createComponent({\n            name: 'ScrollerUpDown',\n            classes: 'scroller-up-down'\n        }, {owner: this});\n\n        this.$.scroller.render();\n    },\n    rendered: function() {\n        this.inherited(arguments);\n\n        if(this.items.length > 0) {\n            this.selectItem(0);\n        }\n        this.resizeHeightContent();\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.resizeHeightContent();\n    },\n    resizeHeightContent: function() {\n        if(this.items.length == 0) return;\n        this.heightParent = utils.getCSSProperty(this, 'offsetHeight', false);\n        this.heightTitle = utils.getCSSProperty(this.$['SlideBarItem_0_Name'], 'offsetHeight', false);\n        this.heightContent = this.heightParent - this.heightTitle * this.items.length;\n        for(var i = 0; i < this.items.length; i++) {\n            this.$['SlideBarItem_' + i + '_Content'].applyStyle('height', this.heightContent + 'px');\n        }\n        // Update Current Height\n        if(this.currentSelect > -1) {\n            var currentHeight = utils.getCSSProperty(this.$['SlideBarItem_' + this.currentSelect + '_Content'], 'offsetHeight', false);\n            if(this.heightContent < currentHeight && this.heightContent < 400) {\n                currentHeight = 400;\n                this.$['SlideBarItem_' + this.currentSelect + '_Content'].applyStyle('height', currentHeight + 'px');\n            } else {\n                //this.$['SlideBarItem_' + this.currentSelect + '_Content'].applyStyle('height', this.heightContent + 'px');\n            }\n            // Add Scroll\n            if((currentHeight + this.heightTitle * this.items.length) > this.heightParent) {\n                this.$.ScrollerUpDown.setShowing(true);\n                this.$.ScrollerUpDown.applyStyle('top', (this.heightParent + this.scrollTop - 50) + 'px');\n            } else {\n                this.$.ScrollerUpDown.setShowing(false);\n            }\n        }\n    },\n    selectItem: function(index) {\n        // Remove\n        if(this.currentSelect > -1) {\n            this.$['SlideBarItem_' + this.currentSelect + '_Name'].removeClass('selected');\n            this.$['SlideBarItem_' + this.currentSelect + '_Drawer'].setOpen(false);\n            this.oldSelect = this.currentSelect;\n        }\n        // Select Item\n        this.$['SlideBarItem_' + index + '_Name'].addClass('selected');\n        this.$['SlideBarItem_' + index + '_Drawer'].setOpen(true);\n        this.currentSelect = index;\n    },\n    handleShowTap: function(inSender, inEvent) {\n        if(inSender.hasClass('slidebar-name') && this.currentSelect != inSender.index) {\n            this.selectItem(inSender.index);\n        } else {\n            this.disableItem(inSender.index);\n        }\n    },\n    disableItem: function(index) {\n        this.$['SlideBarItem_' + index + '_Name'].removeClass('selected');\n        this.$['SlideBarItem_' + index + '_Drawer'].setOpen(false);\n        this.oldSelect = index;\n        this.currentSelect = -1;\n    },\n    handleItemTap: function(inSender, inEvent) {\n        this.doSideBarItemSelect(inSender);\n    },\n    handleItemDragFinish: function(inSender, inEvent) {\n        inSender.type = 'onSideBarDragFinish';\n        this.doSideBarDragFinish(inSender);\n    },\n    handleItemOnDrag: function(inSender, inEvent) {\n        inSender.type = 'onSideBarOnDrag';\n        this.doSideBarOnDrag(inSender);\n    },\n    handleItemDragStart: function(inSender, inEvent) {\n        inSender.type = 'onSideBarDragStart';\n        this.doSideBarDragStart(inSender);\n    },\n    handlerScroll: function(inSender, inEvent) {\n        this.scrollTop = inSender.scrollTop;\n        if(this.$.ScrollerUpDown.showing) {\n            this.$.ScrollerUpDown.applyStyle('top', (this.heightParent + this.scrollTop - 50) + 'px');\n        }\n    }\n});\nexports.SideBar = SideBar;\n","//\n\nvar kind = require('enyo/kind');\n\nvar Drawer = require('onyx/Drawer'),\n    FittableRows = require('layout/FittableRows'),\n    Image = require('enyo/Image'),\n    Scroller = require('enyo/Scroller'),\n    Signals = require('enyo/Signals');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar SideBarItem = kind({\n    name: \"pl.st.SideBarItem\",\n    tag: \"li\",\n    handlers: {\n        onmousedown: \"onMouseDown\",\n        ondragstart: \"onDragStart\"\n    },\n    published: {\n        image: \"\",\n        title: \"\",\n        objKind: \"\",\n        width: undefined,\n        height: undefined\n    },\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents([\n            {\n                classes: \"image\",\n                components: [\n                    {\n                        classes: \"content\",\n                        style: (this.width != undefined ? (\"width:\" + this.width + \"px;\") : \"\") + (this.height != undefined ? (\"height:\" + this.height + \"px;\") : \"\"),\n                        components: [\n                            {\n                                name: \"Image\",\n                                kind: Image,\n                                src: this.image,\n                                style: (this.width != undefined ? (\"width:\" + this.width + \"px;\") : \"\") + (this.height != undefined ? (\"height:\" + this.height + \"px;\") : \"\")\n                            },\n                            {name: \"Badge\", classes: \"badge\", showing: false, content: \"0\"}\n                        ]\n                    }\n                ]\n            },\n            {\n                name: \"MainContent\", classes: \"name\",\n                components: [\n                    {name: \"Text\", tag: \"span\", content: this.title}\n                ]\n            },\n            {kind: Signals, onBadge: \"onBadge\"},\n            {kind: Signals, onSystemSearch: \"onSystemSearch\"},\n            {kind: Signals, onMouseUp: \"onMouseUp\"}\n        ]);\n    },\n    onBadge: function(inSender, inEvent) {\n        if(inEvent.kind == this.objKind && inEvent.value != undefined) {\n            if(inEvent.value == 0) {\n                this.$.Badge.hide();\n            } else {\n                this.$.Badge.setContent(inEvent.value);\n                this.$.Badge.show();\n            }\n        }\n    },\n    onSystemSearch: function(inSender, inEvent) {\n        var value = inEvent.value;\n        if(typeof value === \"string\" && value !== \"\") {\n            var a = this.title.toUpperCase();\n            var b = value.toUpperCase();\n            if(a.indexOf(b) == 0) {\n                if(!this.hasClass(\"highlight\")) this.addClass(\"highlight\");\n            } else {\n                if(this.hasClass(\"highlight\")) this.removeClass(\"highlight\");\n            }\n        } else {\n            if(this.hasClass(\"highlight\")) this.removeClass(\"highlight\");\n        }\n    },\n    onMouseDown: function() {\n        this.bubble('onEquipmentTap', {equipment: this.equipment});\n        if(!this.hasClass('selected')) this.addClass(\"selected\");\n    },\n    onMouseUp: function() {\n        if(this.hasClass('selected')) this.removeClass(\"selected\");\n    },\n    onDragStart: function() {\n        //if(this.hasClass('highlight')) this.removeClass(\"highlight\");\n    }\n});\nexports.SideBarItem = SideBarItem;\n\nvar SideBar = kind({\n    name: \"pl.st.SideBar\",\n    kind: FittableRows,\n    classes: \"side-bar\",\n    published: {\n        contentComponents: \"\",\n        touch: false\n    },\n    events: {\n        onSideBarItemSelect: \"\",\n        onSideBarDragFinish: \"\",\n        onSideBarOnDrag: \"\",\n        onSideBarDragStart: \"\"\n    },\n    selected: -1,\n    heightParent: 0,\n    heightTitle: 0,\n    heightContent: 0,\n    create: function() {\n        this.inherited(arguments);\n        // Create children\n        for(var i = 0; i < this.contentComponents.length; i++) {\n            // Create a new component\n            this.createComponent({\n                name: \"SlideBarItem#\" + i, index: i, classes: \"slidebar-item\", components: [\n                    {\n                        name: \"SlideBarItemName#\" + i,\n                        index: i,\n                        classes: \"slidebar-name\",\n                        ontap: \"handleShowTap\",\n                        content: this.contentComponents[i][0]\n                    },\n                    {\n                        name: \"SlideBarItemDrawer#\" + i,\n                        index: i,\n                        kind: Drawer,\n                        open: false,\n                        animated: true,\n                        components: [\n                            {\n                                name: \"SlideBarItemContent#\" + i,\n                                index: i,\n                                tag: \"ul\",\n                                kind: Scroller,\n                                touch: false,\n                                horizontal: \"hidden\",\n                                classes: \"slidebar-content\",\n                                components: this.contentComponents[i][1]\n                            }\n                        ]\n                    }\n                ]\n            }, {owner: this});\n        }\n    },\n    rendered: function() {\n        this.inherited(arguments);\n\n        if(this.children.length > 0) {\n            this.selectItem(0);\n        }\n        this.resizeHeightContent();\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.resizeHeightContent();\n    },\n    resizeHeightContent: function() {\n        if(this.children.length == 0) {\n            return;\n        }\n        this.heightParent = utils.getCSSProperty(this, \"offsetHeight\", false);\n        this.heightTitle = utils.getCSSProperty(this.$[\"SlideBarItemName#0\"], \"offsetHeight\", false);\n        this.heightContent = this.heightParent - this.heightTitle * this.children.length;\n        for(var i = 0; i < this.children.length; i++) {\n            this.$[\"SlideBarItemContent#\" + i].applyStyle(\"height\", this.heightContent + \"px\");\n        }\n        // Update Current Height\n        if(this.selected > -1) {\n            var currentHeight = utils.getCSSProperty(this.$[\"SlideBarItemContent#\" + this.selected], \"offsetHeight\", false);\n            if(this.heightContent < currentHeight && this.heightContent < 400) {\n                currentHeight = 400;\n                this.$[\"SlideBarItemContent#\" + this.selected].applyStyle(\"height\", currentHeight + \"px\");\n            } else {\n                this.$[\"SlideBarItemContent#\" + this.selected].applyStyle(\"height\", this.heightContent + \"px\");\n            }\n        }\n    },\n    selectItem: function(index) {\n        // Remove\n        if(this.selected > -1) {\n            this.$[\"SlideBarItemName#\" + this.selected].removeClass(\"selected\");\n            this.$[\"SlideBarItemDrawer#\" + this.selected].setOpen(false);\n        }\n        // Select Item\n        this.$[\"SlideBarItemName#\" + index].addClass(\"selected\");\n        this.$[\"SlideBarItemDrawer#\" + index].setOpen(true);\n        this.selected = index;\n    },\n    handleShowTap: function(inSender, inEvent) {\n        if(inSender.hasClass(\"slidebar-name\") && this.selected != inSender.index) {\n            this.selectItem(inSender.index);\n        } else {\n            this.disableItem(inSender.index);\n        }\n    },\n    disableItem: function(index) {\n        this.$[\"SlideBarItemName#\" + index].removeClass(\"selected\");\n        this.$[\"SlideBarItemDrawer#\" + index].setOpen(false);\n        this.selected = -1;\n    },\n    handleItemTap: function(inSender) {\n        this.doSideBarItemSelect(inSender);\n    },\n    handleItemDragFinish: function(inSender) {\n        this.doSideBarDragFinish(inSender);\n    },\n    handleItemOnDrag: function(inSender) {\n        this.doSideBarOnDrag(inSender);\n    },\n    handleItemDragStart: function(inSender) {\n        this.doSideBarDragStart(inSender);\n    }\n});\nexports.SideBar = SideBar;\n","// SideBarItem\nvar kind = require('enyo/kind');\n\nvar FittableLayout = require('layout/FittableLayout'),\n    FittableRows = require('layout/FittableRows'),\n    Drawer = require('onyx/Drawer'),\n    Scroller = require('enyo/Scroller'),\n    Image = require('enyo/Image');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar SideBarItem = kind({\n    name: \"pl.it.SideBarItem\",\n    tag: \"li\",\n    handlers: {\n        onmouseover: \"pressed\",\n        onmouseout: \"released\"\n    },\n    published: {\n        image: \"\",\n        title: \"\",\n        width: undefined,\n        height: undefined\n    },\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents([\n            {\n                name: \"Image\",\n                kind: Image,\n                src: this.image,\n                style: (this.width != undefined ? (\"width:\" + this.width + \"px;\") : \"\") + (this.height != undefined ? (\"height:\" + this.height + \"px;\") : \"\")\n            },\n            {name: \"MainContent\", content: this.title}\n        ]);\n    },\n    pressed: function() {\n        this.addClass(\"selected\");\n    },\n    released: function() {\n        this.removeClass(\"selected\");\n    }\n});\nexports.SideBarItem = SideBarItem;\n\n// SideBar\nvar SideBar = kind({\n    name: \"pl.it.SideBar\",\n    kind: FittableRows,\n    classes: \"side-bar\",\n    published: {\n        contentComponents: \"\",\n        touch: false\n    },\n    events: {\n        onSideBarItemSelect: \"\",\n        onSideBarDragFinish: \"\",\n        onSideBarOnDrag: \"\",\n        onSideBarDragStart: \"\"\n    },\n    items: undefined,\n    selected: -1,\n    heightParent: 0,\n    heightTitle: 0,\n    heightContent: 0,\n    create: function() {\n        this.inherited(arguments);\n        // Create children\n        for(var i = 0; i < this.contentComponents.length; i++) {\n            // Create a new component\n            this.createComponent(\n                {\n                    name: \"Item#\" + i, index: i, classes: \"slidebar-item\",\n                    components: [\n                        {\n                            name: \"Item#\" + i + \"#Name\",\n                            index: i,\n                            classes: \"slidebar-name\",\n                            ontap: \"handleShowTap\",\n                            content: this.contentComponents[i][0]\n                        },\n                        {\n                            name: \"Item#\" + i + \"#Drawer\",\n                            index: i,\n                            kind: Drawer,\n                            open: false,\n                            animated: true,\n                            components: [\n                                {\n                                    name: \"Item#\" + i + \"#Content\",\n                                    index: i,\n                                    tag: \"ul\",\n                                    kind: Scroller,\n                                    touch: false,\n                                    horizontal: \"hidden\",\n                                    classes: \"slidebar-content\",\n                                    components: this.contentComponents[i][1]\n                                }\n                            ]\n                        }\n                    ]\n                }, {owner: this});\n        }\n        this.render();\n    },\n    rendered: function() {\n        this.inherited(arguments);\n\n        if(this.children.length > 0) {\n            this.selectItem(0);\n        }\n        this.resizeHeightContent();\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.resizeHeightContent();\n    },\n    resizeHeightContent: function() {\n        if(this.children.length == 0) {\n            return;\n        }\n        this.heightParent = utils.getCSSProperty(this, \"offsetHeight\", false);\n        this.heightTitle = utils.getCSSProperty(this.$[\"Item#0#Name\"], \"offsetHeight\", false);\n        this.heightContent = this.heightParent - this.heightTitle * this.children.length;\n        for(var i = 0; i < this.children.length; i++) {\n            this.$[\"Item#\" + i + \"#Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n        }\n        // Update Current Height\n        if(this.selected > -1) {\n            var currentHeight = utils.getCSSProperty(this.$[\"Item#\" + this.selected + \"#Content\"], \"offsetHeight\", false);\n            if(this.heightContent < currentHeight && this.heightContent < 400) {\n                currentHeight = 400;\n                this.$[\"Item#\" + this.selected + \"#Content\"].applyStyle(\"height\", currentHeight + \"px\");\n            } else {\n                this.$[\"Item#\" + this.selected + \"#Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n            }\n        }\n    },\n    selectItem: function(index) {\n        // Remove\n        if(this.selected > -1) {\n            this.$[\"Item#\" + this.selected + \"#Name\"].removeClass(\"selected\");\n            this.$[\"Item#\" + this.selected + \"#Drawer\"].setOpen(false);\n        }\n        // Select Item\n        this.$[\"Item#\" + index + \"#Name\"].addClass(\"selected\");\n        this.$[\"Item#\" + index + \"#Drawer\"].setOpen(true);\n        this.selected = index;\n    },\n    handleShowTap: function(inSender, inEvent) {\n        if(inSender.hasClass(\"slidebar-name\") && this.selected != inSender.index) {\n            this.selectItem(inSender.index);\n        } else {\n            this.disableItem(inSender.index);\n        }\n    },\n    disableItem: function(index) {\n        this.$[\"Item#\" + index + \"#Name\"].removeClass(\"selected\");\n        this.$[\"Item#\" + index + \"#Drawer\"].setOpen(false);\n        this.selected = -1;\n    },\n    handleItemTap: function(inSender, inEvent) {\n        this.doSideBarItemSelect(inSender);\n    },\n    handleItemDragFinish: function(inSender, inEvent) {\n        inSender.type = \"onSideBarDragFinish\";\n        this.doSideBarDragFinish(inSender);\n    },\n    handleItemOnDrag: function(inSender, inEvent) {\n        inSender.type = \"onSideBarOnDrag\";\n        this.doSideBarOnDrag(inSender);\n    },\n    handleItemDragStart: function(inSender, inEvent) {\n        inSender.type = \"onSideBarDragStart\";\n        this.doSideBarDragStart(inSender);\n    }\n});\nexports.SideBar = SideBar;\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Signals = require('enyo/Signals'),\n    Image = require('enyo/Image'),\n    Scroller = require('enyo/Scroller'),\n    Drawer = require('onyx/Drawer');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar FolderBarItem = kind({\n    name: \"pl.wr.FolderBarItem\",\n    tag: \"li\",\n    kind: FittableColumns,\n    handlers: {\n        onmouseover: \"pressed\",\n        onmouseout: \"released\"\n    },\n    published: {\n        content: \"\",\n        url: \"\",\n        quantity: 0,\n        isCheck: false\n    },\n    components: [\n        {kind: Signals, onWiringFolderBarItem: \"onWiringFolderBarItem\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents([\n            {name: \"Icon\", classes: \"icon\", components: [{kind: Image, src: this.url}]},\n            {name: \"Content\", classes: \"content\", content: this.content, allowHtml: true},\n            {name: \"Number\", classes: \"number\" + (!this.isCheck ? \"\" : \" checked\"), content: this.quantity}\n        ]);\n    },\n    pressed: function() {\n        this.addClass(\"selected\");\n    },\n    released: function() {\n        this.removeClass(\"selected\");\n    },\n    check: function(check) {\n        if(check) {\n            if(!this.$.Number.hasClass(\"checked\")) {\n                this.$.Number.addClass(\"checked\");\n            }\n        } else {\n            if(this.$.Number.hasClass(\"checked\")) {\n                this.$.Number.removeClass(\"checked\");\n            }\n        }\n\n        this.isCheck = check;\n    },\n    getContent: function() {\n        return this.$.Content.getContent();\n    },\n    onWiringFolderBarItem: function(inSender, inEvent) {\n        if(this === inEvent.sender) {\n            this.check(inEvent.check);\n        }\n    }\n});\nexports.FolderBarItem = FolderBarItem;\n\nvar FolderBar = kind({\n    name: \"pl.wr.FolderBar\",\n    kind: FittableRows,\n    classes: \"wiring-menu-bar\",\n    events: {\n        onTap: \"\",\n        onDrag: \"\"\n    },\n    loadData: function(data) {\n        this.destroyClientControls();\n\n        for(var i = 0; i < data.count; i++) {\n            var childComponents = new Array();\n            var floor = data.item(i);\n            var zones = floor.zones;\n            var count = 0;\n            for(var j = 0; j < zones.count; j++) {\n                var zone = zones.item(j);\n                var sensors = zone.sensors;\n\n                //var idList = [];\n                //for(var s = 0; s < sensors.count; s++) {\n                //    var sensor = sensors.item(s);\n                //\n                //    // Check duplicate for sensor\n                //    if(idList.indexOf(sensor.sensorId) === -1) {\n                //        var quantity = 0;\n                //        for(var s2 = 0; s2 < sensors.count; s2++) {\n                //            if(sensors.item(s2).sensorId === sensor.sensorId) {\n                //                quantity++;\n                //            }\n                //        }\n                //        idList.push(sensor.sensorId);\n                //\n                //        // Add Child\n                //        var name = zone.name + ' ' + sensor.name;\n                //        name = name.substr(0, 15);\n                //        childComponents.push({\n                //            name: \"Folder_\" + floor.id + \"_Item_\" + zone.id + \"_\" + sensor.id,\n                //            kind: \"pl.wr.FolderBarItem\",\n                //            content: name,\n                //            url: sensor.url,\n                //            isCheck: false,\n                //            floorId: floor.id,\n                //            zoneId: zone.id,\n                //            sensorId: sensor.sensorId,\n                //            sensorKey: sensor.id,\n                //            floor: floor,\n                //            zone: zone,\n                //            sensor: sensor,\n                //            quantity: quantity,\n                //            classes: (count++ % 2 == 0 ? \"even\" : \"odd\"),\n                //            ontap: \"itemTap\",\n                //            ondragstart: \"itemDrag\",\n                //            ondrag: \"itemDrag\",\n                //            ondragfinish: \"itemDrag\"\n                //        });\n                //    }\n                //}\n                for(var s = 0; s < sensors.count; s++) {\n                    var sensor = sensors.item(s);\n\n                    // Add Child\n                    childComponents.push({\n                        name: \"Folder_\" + floor.id + \"_Item_\" + zone.id + \"_\" + sensor.id,\n                        kind: FolderBarItem,\n                        content: '<span class=\"zone-name\">' + zone.name + '</span> <span class=\"sensor-name\">' + sensor.name+ '</span>',\n                        url: sensor.url,\n                        isCheck: false,\n                        floorId: floor.id,\n                        zoneId: zone.id,\n                        sensorId: sensor.sensorId,\n                        sensorKey: sensor.id,\n                        floor: floor,\n                        zone: zone,\n                        sensor: sensor,\n                        quantity: sensor.type,\n                        classes: (count++ % 2 == 0 ? \"even\" : \"odd\"),\n                        ontap: \"itemTap\",\n                        ondragstart: \"itemDrag\",\n                        ondrag: \"itemDrag\",\n                        ondragfinish: \"itemDrag\"\n                    });\n                }\n            }\n\n            this.createComponent({\n                name: \"Folder_\" + floor.id,\n                floorId: floor.id,\n                style: \"overflow: hidden;\",\n                components: [\n                    {\n                        name: \"Folder_\" + floor.id + \"_Title\",\n                        floorId: floor.id,\n                        classes: \"title\",\n                        content: floor.name,\n                        ontap: \"folderTap\"\n                    },\n                    {\n                        name: \"Folder_\" + floor.id + \"_Drawer\",\n                        kind: Drawer,\n                        open: false,\n                        animated: true,\n                        floorId: floor.id,\n                        components: [\n                            {\n                                name: \"Folder_\" + floor.id + \"_Content\",\n                                kind: Scroller,\n                                tag: \"ul\",\n                                floorId: floor.id,\n                                components: childComponents\n                            }\n                        ]\n                    }\n                ]\n            });\n\n            this.currentFolderId = floor.id;\n        }\n        this.render();\n        this.showFolder(this.currentFolderId);\n        this.resizeHeightContent();\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.resizeHeightContent();\n    },\n    showFolder: function(floorId) {\n        if(floorId != -1 && this.currentFolderId != -1) {\n            this.currentFolderId = floorId;\n            this.$[\"Folder_\" + this.currentFolderId + \"_Title\"].addClass(\"selected\");\n            this.$[\"Folder_\" + this.currentFolderId + \"_Drawer\"].setOpen(true);\n        } else {\n            this.$[\"Folder_\" + this.currentFolderId + \"_Title\"].removeClass(\"selected\");\n            this.$[\"Folder_\" + this.currentFolderId + \"_Drawer\"].setOpen(false);\n            this.currentFolderId = -1;\n        }\n    },\n    resizeHeightContent: function() {\n        if(this.currentFolderId > -1) {\n            this.heightTitle = utils.getCSSProperty(this.$[\"Folder_\" + this.currentFolderId + \"_Title\"], \"offsetHeight\", false);\n            this.heightContent = utils.getCSSProperty(this, \"offsetHeight\", false) - this.heightTitle * this.children.length;\n            this.$[\"Folder_\" + this.currentFolderId + \"_Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n        }\n    },\n    folderTap: function(inSender) {\n        // Add stack list\n        STACK_LIST.addStack(\n            this.owner.name,\n            this.owner.name,\n            STACK_TYPES.ENYO,\n            STACK_METHODS.DEFAULT,\n            undefined,\n            {\n                currentFolderId: this.currentFolderId,\n                oldFolderId: inSender.floorId\n            },\n            this,\n            'folderTapCallBack'\n        );\n        if(this.currentFolderId != inSender.floorId) {\n            // Remove\n            if(this.$[\"Folder_\" + this.currentFolderId]) {\n                this.$[\"Folder_\" + this.currentFolderId + \"_Title\"].removeClass(\"selected\");\n                this.$[\"Folder_\" + this.currentFolderId + \"_Drawer\"].setOpen(false);\n            }\n            // Add\n            this.$[\"Folder_\" + inSender.floorId + \"_Title\"].addClass(\"selected\");\n            this.$[\"Folder_\" + inSender.floorId + \"_Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n            this.$[\"Folder_\" + inSender.floorId + \"_Drawer\"].setOpen(true);\n            this.currentFolderId = inSender.floorId;\n        } else {\n            this.showFolder(-1);\n        }\n    },\n    folderTapCallBack: function(value) {\n        if(this.$[\"Folder_\" + value.oldFolderId]) {\n            this.$[\"Folder_\" + value.oldFolderId + \"_Title\"].removeClass(\"selected\");\n            this.$[\"Folder_\" + value.oldFolderId + \"_Drawer\"].setOpen(false);\n        }\n        if(this.$[\"Folder_\" + value.currentFolderId]) {\n            this.$[\"Folder_\" + value.currentFolderId + \"_Title\"].addClass(\"selected\");\n            this.$[\"Folder_\" + value.currentFolderId + \"_Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n            this.$[\"Folder_\" + value.currentFolderId + \"_Drawer\"].setOpen(true);\n        }\n        this.currentFolderId = value.currentFolderId;\n    },\n    itemTap: function(inSender, inEvent) {\n        inEvent.sender = inSender;\n        this.doTap(inEvent);\n    },\n    itemDrag: function(inSender, inEvent) {\n        if(!inSender.isCheck && inSender.quantity > 0) {\n            inEvent.sender = inSender;\n            this.doDrag(inEvent);\n        }\n    }\n});\nexports.FolderBar = FolderBar;\n","//\n\nvar kind = require('enyo/kind');\n\nvar Panels = require('layout/Panels'),\n    FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableRowsLayout = require('layout/FittableLayout').Rows,\n    Button = require('onyx/Button'),\n    Drawer = require('onyx/Drawer'),\n    IconButton = require('onyx/IconButton'),\n    Scroller = require('enyo/Scroller'),\n    Signals = require('enyo/Signals'),\n    plWrInput = require('./input.js');\n\nvar wiringGraphic = require('./graphic.js');\n\nvar utils = require(\"../../../common/services/utils.js\");\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar DeviceList = kind({\n    name: \"pl.wr.DeviceList\",\n    kind: Scroller,\n    layoutKind: FittableRowsLayout,\n    touch: false,\n    horizontal: \"hidden\",\n    classes: \"enyo-fit\",\n    published: {\n        componentContents: \"\"\n    },\n    events: {\n        onDrop: \"\"\n    },\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents(this.componentContents);\n    }\n});\nexports.DeviceList = DeviceList;\n\nvar DeviceListItem = kind({\n    name: \"pl.wr.DeviceListItem\",\n    classes: \"list-item\",\n    kind: FittableColumns,\n    published: {\n        color: \"\",\n        content: \"\",\n        position: 0,\n        quantity: 1,\n        images: ['assets/images/temps/wiring/a.png', 'assets/images/temps/wiring/b.png', 'assets/images/temps/wiring/plus.png', 'assets/images/temps/wiring/dash.png']\n    },\n    components: [\n        {name: \"Container\", kind: FittableRows, classes: 'column-1'},\n        {name: \"Content\", kind: FittableColumns, fit: true, allowHtml: true, classes: \"column-2\", content: \"unused\"}\n        //{kind: Signals, onWiringDeviceListItem: \"onWiringDeviceListItem\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n\n        if(!this.image) this.addClass('list-item-disable');\n\n        var childComponents = [];\n        for(var i = 0; i < WIRING_SETTING.SENSOR_LIMIT; i++) {\n            // NOTE: This height should be common in all uses of these connector\n            // number/image pairs. At least one other use of this can be found\n            // over in commission/submenu.js\n            var height = 30 * this.quantity;\n            childComponents.push({\n                name: \"Item_\" + i,\n                kind: FittableColumns,\n                showing: (i === 0),\n                classes: 'number-image-container',\n                components: [\n                    {name: \"Item_\" + i + \"_Number\", classes: \"number\", content: this.position + 1},\n                    {name: \"Item_\" + i + \"_Image\", classes: \"image\", style: \"height: \" + height + \"px;background-image:url('\" + this.images[i % 4] + \"');\"}\n                ]\n            });\n        }\n        \n        this.$.Container.createComponent({kind: FittableRows, components: childComponents}, {owner: this});\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        this.setContentLineHeight();\n    },\n    //onWiringDeviceListItem: function(inSender, inEvent) {\n    //    // Check position in panel\n    //    if(utils.isInside(this)) {\n    //        this.bubble(\"onAddSensorToSensorList\", {\n    //            controllerId: inEvent.controllerId,\n    //            adaptorId: inEvent.adaptorId,\n    //            sensorId: inEvent.sensorId,\n    //            zone: inEvent.zone,\n    //            sensor: inEvent.sensor,\n    //            position: this.position,\n    //            quantity: inEvent.quantity,\n    //            sender: inEvent.sender\n    //        });\n    //    }\n    //},\n    setContentLineHeight: function() {\n        this.$.Content.applyStyle(\"line-height\", (30 * this.quantity) + \"px\");\n        for(var i = 0; i < WIRING_SETTING.SENSOR_LIMIT; i++) {\n            this.removeClass('quantity-' + (i + 1));\n        }\n        this.addClass('quantity-' + this.quantity);\n    },\n    setComponentContents: function(content, color, quantity) {\n        if(this.hasClass(\"list-item-disable\")) {\n            this.removeClass(\"list-item-disable\");\n        }\n\n        if(quantity <= 1) {\n            quantity = 1;\n        } else if(quantity > WIRING_SETTING.SENSOR_LIMIT) {\n            quantity = WIRING_SETTING.SENSOR_LIMIT;\n        }\n        for(var i = 0; i < quantity; i++) {\n//            this.$[\"Item_\" + i + \"_Image\"].applyStyle(\"background-image\", \"url('\" + this.images[i % 4] + \"');\");\n            this.$[\"Item_\" + i].setShowing(true);\n        }\n\n        for(var i = quantity; i < WIRING_SETTING.SENSOR_LIMIT; i++) {\n            this.$[\"Item_\" + i].setShowing(false);\n        }\n\n        this.content = content;\n        this.color = color;\n        this.quantity = quantity;\n\n        this.$.Content.setContent(content);\n        this.applyStyle(\"background-color\", utils.getRgbaString(color, SITE_SETTING.transparency));\n        this.render();\n        \n        //debugger;\n        // Hack to make the images apear using jquery (gross)\n    },\n    setDescription: function(sensorId, color, zone, sensor, quantity) {\n        this.sensorId = sensorId;\n        this.zone = zone;\n        this.sensor = sensor;\n        var content = '<span class=\"zone-name\">' + zone.name + '</span> <span class=\"sensor-name\">' + sensor.name+ '</span>';\n\n        this.setComponentContents(content, color, quantity);\n    },\n    setNumber: function(startPosition) {\n        for(var i = 0; i < this.quantity; i++) {\n            this.$[\"Item_\" + i + \"_Number\"].setContent(startPosition + i);\n        }\n    },\n    unused: function() {\n        this.quantity = 1;\n\n        this.$[\"Item_\" + 0 + \"_Image\"].applyStyle(\"background-image\", \"\");\n        this.$[\"Item_\" + 0].setShowing(true);\n\n        for(var i = this.quantity; i < WIRING_SETTING.SENSOR_LIMIT; i++) {\n            this.$[\"Item_\" + i + \"_Image\"].applyStyle(\"background-image\", \"\");\n            this.$[\"Item_\" + i].setShowing(false);\n        }\n\n        if(!this.hasClass(\"list-item-disable\")) {\n            this.addClass('list-item-disable');\n        }\n\n        this.$.Content.setContent(\"unused\");\n        this.applyStyle(\"background-color\", \"\");\n        this.render();\n\n        delete this.sensorId;\n        delete this.sensor;\n        delete this.zone;\n    },\n    getUsed: function() {\n        if(this.sensorId > 0) {\n            return true;\n        }\n        return false;\n    }\n});\nexports.DeviceListItem = DeviceListItem;\n\n// Wiring\nvar DeviceListSetup = kind({\n    name: \"pl.wr.DeviceListSetup\",\n    kind: FittableRows,\n    fit: true,\n    events: {\n        onDrop: \"\"\n    },\n    components: [\n        {classes: \"heading-title\", content: \"DEVICE LIST SETUP\"},\n        {\n            kind: FittableColumns, fit: true,\n            components: [\n                {\n                    classes: \"setup-menu\", kind: FittableRows,\n                    components: [\n                        {name: \"DeviceList\", kind: FittableRows, fit: true, classes: \"border-left\"},\n                        {\n                            kind: FittableColumns, classes: \"footer box-shadow\",\n                            components: [\n                                {\n                                    kind: Button,\n                                    content: \"RESCAN\",\n                                    attributes: {title: \"\"},\n                                    classes: \"bt bt-footer-default\"\n                                },\n                                {fit: true},\n                                {\n                                    kind: IconButton,\n                                    attributes: {title: \"\"},\n                                    classes: \"bt bt-add\",\n                                    ontap: \"newAdaptor\"\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    fit: true, kind: FittableRows, classes: \"setup-submenu box-shadow\",\n                    components: [\n                        {\n                            name: \"ListItemPanel\",\n                            kind: Panels,\n                            fit: true,\n                            draggable: false,\n                            narrowFit: false,\n                            classes: \"border-left\"\n                        },\n                        {classes: \"footer box-shadow\"}\n                    ]\n                }\n            ]\n        },\n        {kind: Signals, onWiringSelectItem: \"onWiringSelectItem\"},\n        {kind: Signals, onWiringDeviceListItem: \"onWiringDeviceListItem\"}\n    ],\n   breadcrumbHack: function(key, page, percentToAdd) {\n        // Hack to add breadcrumb percentage\n        var percent = PROGRESS[key];\n\n        percent += percentToAdd;\n\n        if(PROGRESS[key] < 100) {\n            Signals.send(\"onProgress\", {page: page, key: key, value: percent});\n        } else {\n            PROGRESS[key] = 100;\n        }\n    },\n    constructor: function() {\n        this.inherited(arguments);\n        this.flag = false;\n        this.currentDevice = -1;\n        this.oldDevice = -1;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    loadData: function(data) {\n        // Default\n        this.flag = false;\n        this.currentDevice = -1;\n        this.oldDevice = -1;\n\n        // Destroy component if existing\n        this.$.DeviceList.destroyClientControls();\n        this.$.ListItemPanel.destroyClientControls();\n\n        var panelIndex = 0;\n        for(var i = 0; i < data.length; i++) {\n            var controllerId = data[i].id;\n            var childComponents = new Array();\n            for(var j = 0; j < data[i].adaptors.length; j++) {\n                var adaptorId = data[i].adaptors[j].id;\n\n                // Create List\n                this.$.ListItemPanel.createComponent({\n                    name: \"ListItem_\" + controllerId + \"_\" + adaptorId,\n                    index: panelIndex,\n                    kind: FittableRows,\n                    clases: \"enyo-fit\"\n                }, {owner: this});\n\n                // Init List Item\n                var listItem = new Array();\n                for(var position = 0; position < WIRING_SETTING.SENSOR_LIST_MAXIMUM; position++) {\n                    listItem[position] = {\n                        kind: DeviceListItem,\n                        controllerId: controllerId,\n                        adaptorId: adaptorId,\n                        position: position,\n                        parentName: \"ListItem_\" + controllerId + \"_\" + adaptorId\n                    };\n                }\n                // Init Children\n                childComponents.push({\n                    name: \"DeviceItem_\" + controllerId + \"_\" + adaptorId,\n                    kind: plWrInput,\n                    controllerId: controllerId,\n                    adaptorId: adaptorId,\n                    classes: (j % 2 == 0 ? \"even\" : \"odd\"),\n                    title: data[i].adaptors[j].title,\n                    panelIndex: panelIndex,\n                    panelName: \"ListItem_\" + controllerId + \"_\" + adaptorId,\n                    componentContents: listItem,\n                    ontap: \"itemTap\"\n                });\n                panelIndex++;\n            }\n            // Create Device List\n            this.$.DeviceList.createComponent({\n                name: \"Device_\" + controllerId, classes: \"item\", controllerId: controllerId,\n                components: [\n                    {\n                        name: \"DeviceTitle_\" + controllerId,\n                        content: data[i].name,\n                        classes: \"item-name\",\n                        controllerId: controllerId,\n                        ontap: \"deviceTap\"\n                    },\n                    {\n                        name: \"Device_\" + controllerId + \"_Content\",\n                        kind: Drawer,\n                        tag: \"ul\",\n                        open: false,\n                        animated: true,\n                        controllerId: controllerId,\n                        components: childComponents\n                    }\n                ]\n            }, {owner: this});\n        }\n\n        this.render();\n\n        // Default\n        this.showDevice(1);\n        this.itemTap(this.$[\"DeviceItem_1_2\"]);\n    },\n    // Select device by controllerId\n    showDevice: function(controllerId) {\n        if((controllerId == -1 && this.currentDevice != -1) || (controllerId != -1 && this.currentDevice != -1 && controllerId != this.currentDevice)) {\n            this.$[\"Device_\" + this.currentDevice].removeClass(\"selected\");\n            this.$[\"Device_\" + this.currentDevice + \"_Content\"].setOpen(false);\n            this.oldDevice = -1;\n        }\n        if(controllerId != -1 && controllerId != this.currentDevice) {\n            this.oldDevice = this.currentDevice;\n            this.currentDevice = controllerId;\n            this.$[\"Device_\" + this.currentDevice].addClass(\"selected\");\n            this.$[\"Device_\" + this.currentDevice + \"_Content\"].setOpen(true);\n        }\n        //else if(this.currentDevice != -1) {\n        //    // Off list\n        //    this.oldDevice = this.currentDevice;\n        //    this.$[\"Device_\" + this.currentDevice].removeClass(\"selected\");\n        //    this.$[\"Device_\" + this.currentDevice + \"_Content\"].setOpen(false);\n        //    this.currentDevice = -1;\n        //    // Off item\n        //    this.oldItem = -1;\n        //    if(!!this.currentItem) {\n        //        this.currentItem.removeClass(\"active\");\n        //    }\n        //}\n        // Select controller\n        wiringGraphic.selectItem(controllerId);\n    },\n    deviceTap: function(inSender) {\n        if(inSender.hasClass(\"item-name\")) {\n            // Add stack list\n            if(this.currentDevice != inSender.controllerId) {\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.DEFAULT,\n                    undefined,\n                    this.currentDevice,\n                    this,\n                    'showDevice'\n                );\n            }\n            // Select device\n            this.showDevice(inSender.controllerId);\n        }\n    },\n    itemTap: function(inSender, inEvent) {\n        // If isn't existing\n        if(!inSender) {\n            return;\n        }\n        // Remove Class\n        if(this.$[\"DeviceItem_\" + this.oldDevice + \"_\" + this.oldItem] != undefined &&\n            this.$[\"DeviceItem_\" + this.oldDevice + \"_\" + this.oldItem].hasClass(\"active\")\n        ) {\n            // Add stack list\n            if(inEvent) {\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.DEFAULT,\n                    undefined,\n                    this.$[\"DeviceItem_\" + this.oldDevice + \"_\" + this.oldItem],\n                    this,\n                    'itemTap'\n                );\n            }\n            // Remove active class\n            this.$[\"DeviceItem_\" + this.oldDevice + \"_\" + this.oldItem].removeClass(\"active\");\n            this.oldDevice = -1;\n            this.oldItem = -1;\n        }\n        if(this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + this.oldItem] != undefined &&\n            this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + this.oldItem].hasClass(\"active\") && this.oldItem != inSender.adaptorId\n        ) {\n            // Add stack list\n            if(inEvent) {\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.DEFAULT,\n                    undefined,\n                    this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + this.oldItem],\n                    this,\n                    'itemTap'\n                );\n            }\n            // Remove active class\n            this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + this.oldItem].removeClass(\"active\");\n        }\n        if(!this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + inSender.adaptorId].hasClass(\"active\")) {\n            this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + inSender.adaptorId].addClass(\"active\");\n            this.oldItem = inSender.adaptorId;\n            this.$.ListItemPanel.setIndex(inSender.panelIndex);\n            // Set current item\n            this.currentItem = this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + inSender.adaptorId];\n            // Create\n            if(this.$[inSender.panelName].children.length == 0) {\n                this.$[inSender.panelName].createComponent({\n                    name: \"DeviceList_\" + this.currentDevice + \"_\" + inSender.adaptorId,\n                    kind: DeviceList,\n                    componentContents: inSender.componentContents\n                }, {owner: this});\n                this.$[inSender.panelName].render();\n            }\n        }\n        //else {\n        //    this.oldItem = inSender.adaptorId;\n        //    this.$[\"DeviceItem_\" + this.currentDevice + \"_\" + inSender.adaptorId].removeClass(\"active\");\n        //}\n        this.controllerId = this.currentDevice;\n        this.adaptorId = inSender.adaptorId;\n        // Select adaptor\n        wiringGraphic.selectItem(this.controllerId, this.adaptorId);\n    },\n    onWiringDeviceListItem: function(inSender, inEvent) {\n        if(!!this.$[\"Device_\" + this.controllerId + \"_Content\"]) {\n            var node;\n            var i = 0;\n            if(this.$[\"Device_\" + this.controllerId + \"_Content\"].kind == \"onyx.Drawer\") i = 1;\n            for(; i < this.$[\"Device_\" + this.controllerId + \"_Content\"].controls.length; i++) {\n                if(utils.isInside(this.$[\"Device_\" + this.controllerId + \"_Content\"].controls[i])) {\n                    node = this.$[\"Device_\" + this.controllerId + \"_Content\"].controls[i];\n                    break;\n                }\n            }\n            if(!!node){ // Check in Menu\n                this.bubble(\"onAddSensorToSensorList\", {\n                    controllerId: node.controllerId,\n                    adaptorId: node.adaptorId,\n                    sensorId: inEvent.sensorId,\n                    zone: inEvent.zone,\n                    sensor: inEvent.sensor,\n                    position: WIRING_SETTING.SENSOR_LIST_MAXIMUM - 1, // Min 0 - Max 49\n                    quantity: inEvent.quantity,\n                    sender: inEvent.sender\n                });\n            } else { // Check in Panel List\n                var deviceList = this.$[\"DeviceList_\" + inEvent.controllerId + \"_\" + inEvent.adaptorId];\n                if(!!deviceList) {\n                    for(var i = 1; i < deviceList.controls.length; i++) { // Pass scroller control\n                        if(utils.isInside(deviceList.controls[i])) {  // Check pl.wr.DeviceListItem position in panel\n                            node = deviceList.controls[i];\n                            break;\n                        }\n                    }\n                    if(!!node) {\n                        this.bubble(\"onAddSensorToSensorList\", {\n                            controllerId: inEvent.controllerId,\n                            adaptorId: inEvent.adaptorId,\n                            sensorId: inEvent.sensorId,\n                            zone: inEvent.zone,\n                            sensor: inEvent.sensor,\n                            position: node.position,\n                            quantity: inEvent.quantity,\n                            sender: inEvent.sender\n                        });\n                    }\n                }\n            }\n        }\n    },\n    // Save store\n    saveDeviceList: function(controllerId, adaptorId, list) {\n        var sensors = [];\n        for(var i = 0; i < list.length; i++) {\n            if(list[i].item.getUsed()) {\n                sensors.push({\n                    id: list[i].sensorId,\n                    color: list[i].color,\n                    content: list[i].content,\n                    zone: list[i].zone,\n                    sensor: list[i].sensor\n                });\n            }\n        }\n\n        // Delete duplicate\n        //for(var i = 0; i < sensors.length - 1; i++) {\n        //    var count = 1;\n        //    for(var j = i + 1; j < sensors.length; j++) {\n        //        if(sensors[j].id == sensors[i].id) {\n        //            count++;\n        //            sensors.splice(j, 1);\n        //            j--;\n        //        }\n        //    }\n        //    sensors[i].total = count;\n        //}\n\n        // Update\n        DEVICE_LIST[controllerId].adaptors[adaptorId].sensors = sensors;\n\n        var total_sensor_count = plSensorList.count;\n\t// NOTE: If the wired sensor count is needed, use \"sensors.length\"\n        var percent_complete = 100 / total_sensor_count;\n\n        this.breadcrumbHack('WIRING', APP_PROGRESS.PR_WIRING, Math.ceil(percent_complete / 2));\n        this.breadcrumbHack('WIRING_DEVICE_WIRING', APP_PROGRESS.PR_WIRING_DEVICE_WIRING, percent_complete);\n    },\n    undoDeviceItem: function(stack) {\n        var controllerId = stack.value.controllerId,\n            adaptorId = stack.value.adaptorId,\n            floorId = stack.value.floorId,\n            zoneId = stack.value.zoneId,\n            sensorId = stack.value.sensorId,\n            sender = stack.value.sender,\n            list = stack.value.list;\n        for(var i = 0; i < list.length; i++) {\n            if(list[i].used) {\n                list[i].item.setDescription(list[i].sensorId, list[i].color, list[i].zone, list[i].sensor, list[i].quantity);\n            } else {\n                list[i].item.unused();\n            }\n            // Resize\n            list[i].item.render();\n        }\n\n        // Set number\n        var startPosition = 1;\n        for(var i = 0; i < list.length; i++) {\n            // Check Maximum\n            if(startPosition > WIRING_SETTING.SENSOR_LIST_MAXIMUM) {\n                list[i].item.setShowing(false);\n            } else if(!list[i].item.getShowing()) {\n                list[i].item.setShowing(true);\n                list[i].item.render();\n            }\n            // Reset start number\n            list[i].item.setNumber(startPosition);\n            startPosition += list[i].item.quantity;\n        }\n        //*** End\n\n        wiringGraphic.removeSensorByOption({\n            controllerId: controllerId,\n            adaptorId: adaptorId,\n            floorId: floorId,\n            zoneId: zoneId,\n            sensorId: sensorId,\n            sender: sender\n        });\n\n        // Save store\n        this.saveDeviceList(controllerId, adaptorId, list);\n    },\n    newAdaptor: function() {\n\n    },\n    // Transmission\n    onWiringSelectItem: function(inSender, inEvent) {\n        if(inEvent.controllerId != undefined && inEvent.adaptorId != undefined) {// Select adaptor\n            this.itemTap(this.$[\"DeviceItem_\" + inEvent.controllerId + \"_\" + inEvent.adaptorId], inEvent.isStack);\n        } else if(inEvent.controllerId != undefined) {// Select controller\n\n        }\n    },\n    // Public\n    pAddSensorToDeviceList: function(data) {\n        // Add Sensor To SensorList\n        var controllerId = data.controllerId,\n            adaptorId = data.adaptorId,\n            floorId = data.sensor.floorId,\n            zoneId = data.sensor.zoneId,\n            sensorId = data.sensor.sensorId,\n            pos = data.position,\n            quantity = data.quantity,\n            color = data.zone.color,\n            sensor = data.sensor,\n            zone = data.zone,\n            sender = data.sender;\n\n        function move(items, pos, data) {\n            var next = items[pos + 1];\n            if(!!next) {\n                if(!next.getUsed()) {\n                    next.setDescription(data.sensorId, data.color, data.zone, data.sensor, data.quantity);\n                    return next;\n                } else {\n                    move(items, pos + 1, {\n                        sensorId: next.sensorId,\n                        color: next.color,\n                        quantity: next.quantity,\n                        zone: next.zone,\n                        sensor: next.sensor\n                    });\n                    next.setDescription(data.sensorId, data.color, data.zone, data.sensor, data.quantity);\n                }\n            }\n        }\n\n        function getPos(items) {\n            for(var pos = 0; pos < items.length; pos++) {\n                if(!items[pos].getUsed()) {\n                    return pos;\n                }\n            }\n            return false;\n        }\n\n        if(!!this.$[\"ListItem_\" + controllerId + \"_\" + adaptorId]) {\n            var deviceList = this.$[\"DeviceList_\" + controllerId + \"_\" + adaptorId];\n\n            // Check panel list existing\n            if(!deviceList) {\n                //this.$[\"DeviceItem_\" + controllerId + \"_\" + adaptorId].triggerHandler('ontap');\n\n                // Create if not existing\n                var inSender = this.$[\"DeviceItem_\" + controllerId + \"_\" + adaptorId];\n                if(this.$[inSender.panelName].children.length == 0) {\n                    this.$[inSender.panelName].createComponent({\n                        name: \"DeviceList_\" + this.currentDevice + \"_\" + inSender.adaptorId,\n                        kind: DeviceList,\n                        componentContents: inSender.componentContents\n                    }, {owner: this});\n                    this.$[inSender.panelName].render();\n                }\n\n                deviceList = this.$[\"DeviceList_\" + controllerId + \"_\" + adaptorId];\n            }\n\n            //--- Add List Item\n            var items = [];\n            //if(IS_TOUCH) {\n            //    for(var i = 1; i < deviceList.controls.length; i++) {\n            //        items.push(deviceList.controls[i]);\n            //    }\n            //} else {\n            //    if(deviceList.getTouch() === true) {\n            //        items = deviceList.children[0].children[2].children;\n            //    } else {\n            //        items = deviceList.children[0].children;\n            //    }\n            //}\n\n            for(var i = 1; i < deviceList.controls.length; i++) {\n                items.push(deviceList.controls[i]);\n            }\n            //--- End\n\n            //--- List backup\n            var list = [];\n            for(var i = 0; i < items.length; i++) {\n                list.push({\n                    item: items[i],\n                    used: items[i].getUsed(),\n                    sensorId: items[i].sensorId,\n                    color: items[i].color,\n                    content: items[i].content,\n                    quantity: items[i].quantity,\n                    zone: items[i].zone,\n                    sensor: items[i].sensor\n                });\n            }\n            //--- End backup\n\n            //*** Run change\n            var current = items[pos];\n            if(!current.getUsed()) {\n                pos = getPos(items);\n                if(pos !== false) {\n                    current = items[pos];\n                    current.setDescription(sensorId, color, zone, sensor, quantity);\n                }\n            } else {\n                move(items, current.position, {\n                    sensorId: current.sensorId,\n                    quantity: current.quantity,\n                    color: current.color,\n                    zone: current.zone,\n                    sensor: current.sensor\n                });\n                current.setDescription(sensorId, color, zone, sensor, quantity);\n            }\n\n            // Set number\n            var startPosition = 1;\n            for(var i = 0; i < items.length; i++) {\n                // Check Maximum\n                if(startPosition > WIRING_SETTING.SENSOR_LIST_MAXIMUM) {\n                    items[i].setShowing(false);\n                } else if(!items[i].getShowing()) {\n                    items[i].setShowing(true);\n                }\n                // Reset start number\n                items[i].setNumber(startPosition);\n                startPosition += items[i].quantity;\n            }\n            //*** End run change\n\n            // Add stack list\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.CALLBACK,\n                items,\n                {\n                    controllerId: controllerId,\n                    adaptorId: adaptorId,\n                    floorId: floorId,\n                    zoneId: zoneId,\n                    sensorId: sensorId,\n                    sender: sender,\n                    list: list\n                },\n                this,\n                'undoDeviceItem'\n            );\n\n            // List new to save\n            var list = [];\n            for(var i = 0; i < items.length; i++) {\n                list.push({\n                    item: items[i],\n                    used: items[i].getUsed(),\n                    sensorId: items[i].sensorId,\n                    color: items[i].color,\n                    content: items[i].content,\n                    zone: items[i].zone,\n                    sensor: items[i].sensor\n                });\n            }\n\n            // Save store\n            this.saveDeviceList(controllerId, adaptorId, list);\n        }\n    }\n});\nexports.DeviceListSetup = DeviceListSetup;\n","//\n\nvar kind = require('enyo/kind');\n\nvar Button = require('onyx/Button'),\n    FittableColumns = require('layout/FittableColumns'),\n    Input = require('onyx/Input');\n\nvar utils = require('../../../common/services/utils.js');\n\nmodule.exports = kind({\n    name: \"pl.su.Input\",\n    kind: FittableColumns,\n    published: {\n        index: 0,\n        value: \"\",\n        oldValue: \"\",\n        type: \"accurate\" // estimate or accurate\n    },\n    events: {\n        onRemove: \"\",\n        onType: \"\",\n        onInput: \"\",\n        onFocus: \"\",\n        onAddStack: \"\"\n    },\n    handlers: {\n        onmouseover: \"onHandle\",\n        onmouseout: \"onHandle\",\n        onmousemove: \"onHandle\",\n        onmousedown: \"onHandle\"\n    },\n    popup: -1,\n    validate: false,\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents([\n            {name: \"CloseButton\", classes: \"remove\", ontap: \"doRemove\"},\n            {\n                name: \"FloorName\",\n                classes: \"level-title\",\n                allowHtml: true,\n                content: \"<span class='line'></span><span class='text'>LEVEL #\" + this.index + \"</span>\"\n            },\n            {\n                name: \"FloorInputWrap\",\n                classes: \"level-input\",\n                components: [\n                    {\n                        style: \"display: inline-flex; position: relative;\",\n                        components: [\n                            {\n                                name: \"FloorInput\",\n                                kind: Input,\n                                placeholder: \"unknown\",\n                                classes: \"level-input\",\n                                oninput: \"valueChanged\",\n                                onfocus: \"onSaveFocus\",\n                                onkeydown: \"onSaveKeyDown\",\n                                onchange: \"onSaveChange\"\n                            },\n                            {name: \"FloorCheck\", showing: false, classes: \"bg-check\"},\n                            {\n                                name: \"FloorGroupButton\",\n                                kind: FittableColumns,\n                                classes: \"button-style-wrap\",\n                                showing: false,\n                                components: [\n                                    {\n                                        name: \"ButtonEstimate\",\n                                        kind: Button,\n                                        classes: \"bt bt-estimate\",\n                                        content: \"Estimate\",\n                                        ontap: \"typeChanged\"\n                                    },\n                                    {\n                                        name: \"ButtonAccurate\",\n                                        kind: Button,\n                                        classes: \"bt bt-accurate\",\n                                        content: \"Accurate\",\n                                        ontap: \"typeChanged\"\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            },\n            {name: \"FloorUnit\", classes: \"txt-name\", content: \"SQFT\"}\n        ], {owner: this});\n        if(this.value != undefined && this.value != 0) {\n            this.$.FloorInput.setValue(this.value);\n        }\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        this.$.FloorInput.addClass(this.type);\n        this.$.FloorCheck.addClass(this.type);\n        // Content\n        this.items = [\n            \"FloorName\",\n            \"FloorInput\",\n            \"FloorCheck\",\n            \"FloorGroupButton\",\n            \"ButtonEstimate\",\n            \"ButtonAccurate\",\n            \"FloorGroupButton\",\n            \"FloorGroupButton\",\n            \"ButtonAccurate\",\n            \"FloorGroupButton\",\n            \"FloorUnit\",\n            \"CloseButton\"\n        ];\n        this.items.push(this.name);\n        // Check validation\n        this.validation();\n    },\n    // Check Input Validation\n    validation: function() {\n        if(utils.isNumber(this.$.FloorInput.getValue())) {\n            this.validate = true;\n        } else {\n            this.validate = false;\n        }\n        this.$.FloorCheck.setShowing(this.validate);\n    },\n    // Input Changed\n    valueChanged: function(inSender) {\n        this.oldValue = this.value;\n        this.value = inSender.getValue();\n        // Check validation\n        this.validation();\n        this.$.FloorGroupButton.setShowing(this.validate);\n        // Return Event\n        this.doInput(inSender);\n    },\n    // Type change\n    typeChanged: function(inSender) {\n        if(inSender.name == \"ButtonEstimate\" && this.type != \"estimate\") {\n            this.setType(\"estimate\");\n            this.doType();\n        } else if(inSender.name == \"ButtonAccurate\" && this.type != \"accurate\") {\n            this.setType(\"accurate\");\n            this.doType();\n        }\n        // Off Popup\n        this.$.FloorGroupButton.setShowing(false);\n    },\n    // On Popup\n    popupOn: function() {\n        if(this.validate) this.$.FloorGroupButton.setShowing(true);\n    },\n    // Off Popup\n    popupOff: function() {\n        this.$.FloorGroupButton.setShowing(false);\n    },\n    onHandle: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case \"mousemove\":\n                this.popup = this.items.indexOf(inEvent.originator.name);\n                break;\n        }\n    },\n    setIndex: function(index) {\n        this.index = index;\n        this.$.FloorName.setContent(\"<span class='line'></span><span class='text'>LEVEL #\" + this.index + \"</span>\");\n    },\n    setValue: function(value) {\n        this.onUpdate(value);\n    },\n    setType: function(type) {\n        var oldType = \"estimate\";\n        if(type == \"accurate\") {\n            oldType = \"estimate\";\n        } else {\n            oldType = \"accurate\";\n        }\n        // Input\n        if(this.$.FloorInput.hasClass(oldType)) {\n            this.$.FloorInput.removeClass(oldType);\n        }\n        if(!this.$.FloorInput.hasClass(type)) {\n            this.$.FloorInput.addClass(type);\n        }\n        // Background\n        if(this.$.FloorCheck.hasClass(oldType)) {\n            this.$.FloorCheck.removeClass(oldType);\n        }\n        if(!this.$.FloorCheck.hasClass(type)) {\n            this.$.FloorCheck.addClass(type);\n        }\n        this.type = type;\n    },\n    reverseType: function(type) {\n        if(type == \"accurate\") {\n            type = \"estimate\";\n        } else {\n            type = \"accurate\";\n        }\n        this.setType(type);\n    },\n    onUpdate: function(value) {\n        this.oldValue = this.value;\n        this.value = value;\n        this.$.FloorInput.setValue(value);\n        this.validation();\n    },\n    // Save old\n    onSaveFocus: function(inSender) {\n        var value = inSender.getValue();\n        if(typeof value === 'string') {\n            value = value.trim();\n        }\n        inSender.valueFocus = value;\n        inSender.isFocus = true;\n\n        this.doFocus(this);\n    },\n    // Save in progress\n    onSaveKeyDown: function(inSender, inEvent) {\n        if(inEvent.keyCode === 13) {\n            var currentValue = inSender.getValue();\n            if(typeof currentValue === 'string') {\n                currentValue = currentValue.trim();\n            }\n            if(inSender.isFocus && inSender.valueFocus != currentValue) {\n                inEvent.sender = inSender;\n                inEvent.valueFocus = inSender.valueFocus;\n                inSender.valueFocus = currentValue;\n                this.doAddStack(inEvent);\n            }\n        }\n    },\n    // Save to stack\n    onSaveChange: function(inSender, inEvent) {\n        if(inSender.isFocus) {\n            inEvent.sender = inSender;\n            inEvent.valueFocus = inSender.valueFocus;\n            this.doAddStack(inEvent);\n            inSender.isFocus = false;\n        }\n    },\n    // TriggerHandler\n    removeInput: function() {\n        this.$.CloseButton.triggerHandler('ontap');\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar Drawer = require('onyx/Drawer'),\n    FittableRows = require('layout/FittableRows'),\n    Scroller = require('enyo/Scroller'),\n    plStSideBarItem = require('./sidebar').SideBarItem;\n\nmodule.exports = kind({\n    name: \"pl.st.Template\",\n    kind: FittableRows,\n    classes: \"side-bar template\",\n    published: {\n        touch: false\n    },\n    events: {\n        onSideBarItemSelect: \"\",\n        onSideBarDragFinish: \"\",\n        onSideBarOnDrag: \"\",\n        onSideBarDragStart: \"\"\n    },\n    selected: -1,\n    heightParent: 0,\n    heightTitle: 0,\n    heightContent: 0,\n    create: function() {\n        this.inherited(arguments);\n        this.build();\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        if(this.children.length > 0) {\n            this.selectItem(0);\n        }\n        this.resizeHeightContent();\n    },\n    build: function() {\n        // Destroy\n        this.destroyClientControls();\n\n        // Create children\n        var childComponent = [];\n        for(var i = 0; i < plComponentList.count; i++) {\n            var equipment = plComponentList.item(i);\n            childComponent.push({\n                kind: plStSideBarItem,\n                title: equipment.name,\n                value: equipment.kind,\n                objKind: equipment.kind,\n                image: equipment.svg,\n                width: equipment.width,\n                height: equipment.height,\n                equipment: equipment,\n                ontap: \"handleItemTap\",\n                ondragfinish: \"handleItemDragFinish\",\n                ondrag: \"handleItemOnDrag\",\n                ondragstart: \"handleItemDragStart\"\n            });\n        }\n\n        // Create a new component\n        var i = 0;\n        this.createComponent({\n            name: \"Item_\" + i, index: i, classes: \"slidebar-item\", components: [\n                {\n                    name: \"Item_\" + i + \"_Name\",\n                    index: i,\n                    classes: \"slidebar-name\",\n                    ontap: \"handleShowTap\",\n                    content: \"EQUIPMENT\"\n                },\n                {\n                    name: \"Item_\" + i + \"_Drawer\",\n                    index: i,\n                    kind: Drawer,\n                    open: false,\n                    animated: true,\n                    components: [\n                        {\n                            name: \"Item_\" + i + \"_Content\",\n                            index: i,\n                            tag: \"ul\",\n                            kind: Scroller,\n                            touch: false,\n                            horizontal: \"hidden\",\n                            classes: \"slidebar-content\",\n                            components: childComponent\n                        }\n                    ]\n                }\n            ]\n        }, {owner: this});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.resizeHeightContent();\n    },\n    resizeHeightContent: function() {\n        if(this.children.length == 0) {\n            return;\n        }\n\n        this.heightParent = utils.getCSSProperty(this, \"offsetHeight\", false);\n        this.heightTitle = utils.getCSSProperty(this.$[\"Item_0_Name\"], \"offsetHeight\", false);\n        this.heightContent = this.heightParent - this.heightTitle * this.children.length;\n        for(var i = 0; i < this.children.length; i++) {\n            this.$[\"Item_\" + i + \"_Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n        }\n        // Update Current Height\n        if(this.selected > -1) {\n            var currentHeight = utils.getCSSProperty(this.$[\"Item_\" + this.selected + \"_Content\"], \"offsetHeight\", false);\n            if(this.heightContent < currentHeight && this.heightContent < 400) {\n                currentHeight = 400;\n                this.$[\"Item_\" + this.selected + \"_Content\"].applyStyle(\"height\", currentHeight + \"px\");\n            } else {\n                this.$[\"Item_\" + this.selected + \"_Content\"].applyStyle(\"height\", this.heightContent + \"px\");\n            }\n        }\n\n    },\n    selectItem: function(index) {\n        // Remove\n        if(this.selected > -1) {\n            this.$[\"Item_\" + this.selected + \"_Name\"].removeClass(\"selected\");\n            this.$[\"Item_\" + this.selected + \"_Drawer\"].setOpen(false);\n\n        }\n        // Select Item\n        this.$[\"Item_\" + index + \"_Name\"].addClass(\"selected\");\n        this.$[\"Item_\" + index + \"_Drawer\"].setOpen(true);\n        this.selected = index;\n    },\n    disableItem: function(index) {\n        this.$[\"Item_\" + index + \"_Name\"].removeClass(\"selected\");\n        this.$[\"Item_\" + index + \"_Drawer\"].setOpen(false);\n        this.selected = -1;\n    },\n    handleShowTap: function(inSender) {\n        if(inSender.hasClass(\"slidebar-name\") && this.selected != inSender.index) {\n            this.selectItem(inSender.index);\n        } else {\n            this.disableItem(inSender.index);\n        }\n    },\n    handleItemTap: function(inSender) {\n        this.doSideBarItemSelect(inSender);\n    },\n    handleItemDragFinish: function(inSender) {\n        this.doSideBarDragFinish(inSender);\n    },\n    handleItemOnDrag: function(inSender) {\n        this.doSideBarOnDrag(inSender);\n    },\n    handleItemDragStart: function(inSender) {\n        this.doSideBarDragStart(inSender);\n    }\n});\n","// PIPELINE - EQUIPMENT AND WIRING\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Panels = require('layout/Panels'),\n    CollapsingArranger = require('layout/CollapsingArranger');\n\nvar Checkbox = require('onyx/Checkbox'),\n    Grabber = require('onyx/Grabber'),\n    ToggleButton = require('onyx/ToggleButton'),\n    Drawer = require('onyx/Drawer'),\n    Button = require('onyx/Button'),\n    CardArranger = require('layout/CardArranger');\n\nvar plWrSubBreadcrumbs = require('./sub-breadcrumbs.js');\nvar plWrFolderBar = require('./folderbar.js').FolderBar;\nvar plWrDeviceListSetup = require('./device-list-setup.js').DeviceListSetup;\n\nvar utils = require('../../../common/services/utils.js');\nvar wiringGraphic = require('./graphic.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar wiringPreview = require('./preview.js');\n\n//var plTabBar = require('../../views/progress/wiring/wiring');\n\nmodule.exports = kind({\n    name: \"pl.WiringView\",\n    kind: FittableRows,\n    classes: \"form-wiring\",\n    handlers: {\n        ontap: \"tapHandler\",\n        onAddSensorToSensorList: \"onAddSensorToSensorList\"\n    },\n    components: [\n        // SubMenuBar\n        { name: \"TabBar\", kind: FittableRows, classes: \"sub-menu-bar\", components: [\n            { name: \"TabBarName\", classes: \"name\", content: \"WIRING CONFIGURATION:\"},\n            //{ name: \"TabBarContent\", kind: \"pl.TabBar\", style: \"position: absolute;\", style: \"position: absolute;\", classes: \"tab-bar\", path: [\"AUTO-SETUP\", \"DEVICE WIRING\"], onActivate: \"tabActivated\"},\n            { name: \"TabBarContent\", kind: plWrSubBreadcrumbs, style: \"position: absolute;\", onActivate: \"tabActivated\" },\n            { name: \"TabBarChop\", classes: \"chop\"}\n        ]},\n        // MainPanels\n        { name: \"MainPanels\", kind: Panels, fit: true, arrangerKind: CollapsingArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: \"main-panels\", components: [\n            { name: \"LeftColumn\", kind: FittableRows, classes: \"widget enyo-fit\", components: [\n                { name: \"FolderBar\", kind: plWrFolderBar, fit: true, onDrag: \"dragHandler\" },\n                { classes: \"footer\"}\n            ]},\n            { name: \"ContentPanels\", kind: Panels, arrangerKind: CardArranger, draggable: false, narrowFit: false, classes: \"enyo-fit box-shadow\", onTransitionStart: 'panelTransitionStart', onTransitionFinish: \"panelTransitionFinish\", components: [\n                { kind: FittableRows, classes: \"enyo-fit auto-setup border-left\", index: 0, components: [\n                    { kind: FittableRows, fit: true, classes: \"outer-box content\", components: [\n                        { classes: \"drawer-title\", drawer: \"DrawerBox1\", content: \"HARDWARE RECOMMENDATIONS\", ontap: \"drawerActivated\"},\n                        { kind: FittableColumns, fit: true, components: [\n                            { kind: FittableRows, fit: true, components: [\n                                { name: \"DrawerBox1\", kind: Drawer, open: true, classes: \"content inner-box hardware-recommendations\", components: [\n                                    { tag: \"table\", components: [\n                                        {tag: \"tr\", classes: \"odd\", components: [\n                                            {tag: \"td\", content: \"HARDWARE\"},\n                                            {tag: \"td\", content: \"QTY\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"even\", components: [\n                                            {tag: \"td\", kind: FittableColumns, components: [\n                                                { kind: Checkbox, classes: \"checkbox-style3\", checked: true, onchange: \"\"},\n                                                { content: \"CONTROLLER\"}\n                                            ]},\n                                            {tag: \"td\", content: \"1\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"odd\", components: [\n                                            {tag: \"td\", kind: FittableColumns, components: [\n                                                { kind: Checkbox, classes: \"checkbox-style3\", checked: true, onchange: \"\"},\n                                                { content: \"24 PORT I/O MODULE\"}\n                                            ]},\n                                            {tag: \"td\", content: \"1\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"even\", components: [\n                                            {tag: \"td\", kind: FittableColumns, components: [\n                                                { kind: Checkbox, classes: \"checkbox-style3\", checked: true, onchange: \"\"},\n                                                { content: \"12 PORT RELAY MODULE\"}\n                                            ]},\n                                            {tag: \"td\", content: \"2\"}\n                                        ]}\n                                    ]},\n                                    { name: 'AutoConfigure', kind: Button, content: \"AUTO-CONFIGURE\", attributes: {title: \"AUTO-CONFIGURE\"}, classes: \"bt-default\", ontap: \"buttonTapped\"}\n                                ]},\n                                { classes: \"drawer-title\", drawer: \"DrawerBox2\", content: \"AUTOMATIC SYSTEM WIRING\", ontap: \"drawerActivated\"},\n                                { name: \"DrawerBox2\", kind: Drawer, open: true, classes: \"content inner-box automatic-system\", components: [\n                                    { name:'AutoWire', kind: Button, content: \"AUTOWIRE\", attributes: {title: \"AUTOWIRE\"}, classes: \"bt-default\", ontap: \"buttonTapped\"},\n                                    { tag: \"table\", components: [\n                                        {tag: \"tr\", classes: \"odd\", components: [\n                                            {tag: \"td\", content: \"HARDWARE\"},\n                                            {tag: \"td\", content: \"PORTS USED\"},\n                                            {tag: \"td\", content: \"PORTS REMAINING\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"even\", components: [\n                                            {tag: \"td\", content: \"CONTROLLER\"},\n                                            {name: \"ctrl_1\", tag: \"td\", content: \"\"},\n                                            {name: \"ctrl_2\", tag: \"td\", content: \"\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"odd\", components: [\n                                            {tag: \"td\", content: \"SENSOR MODULE\"},\n                                            {name: \"ctrl_3\", tag: \"td\", allowHtml: true, content: \"\"},\n                                            {name: \"ctrl_4\", tag: \"td\", allowHtml: true, content: \"\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"even\", components: [\n                                            {tag: \"td\", content: \"RELAY MODULE - 24VAC\"},\n                                            {name: \"ctrl_5\", tag: \"td\", allowHtml: true, content: \"\"},\n                                            {name: \"ctrl_6\", tag: \"td\", allowHtml: true, content: \"\"}\n                                        ]},\n                                        {tag: \"tr\", classes: \"odd\", components: [\n                                            {tag: \"td\", content: \"RELAY MODULE - 120VAC\"},\n                                            {name: \"ctrl_7\", tag: \"td\", allowHtml: true, content: \"\"},\n                                            {name: \"ctrl_8\", tag: \"td\", allowHtml: true, content: \"\"}\n                                        ]}\n                                    ]}\n                                ]}\n                            ]},\n                            { name:\"PreviewArea\", kind: FittableColumns, classes:\"system-preview\", components:[\n                                { classes: \"frame\", components:[\n                                    { classes: \"title\", content: \"SYSTEM PREVIEW\"},\n                                    { name:'PreviewPanel', kind: Panels, classes: \"preview-area enyo-fit\", components:[\n                                        {name: \"PreviewSvg\", tag: \"svg\", classes: \"enyo-fit\"}\n                                    ]}\n                                ]}\n                            ]}\n                        ]}\n                    ]},\n                    { classes: \"footer\", kind: FittableColumns, components: [\n                        { kind: Grabber, attributes: {title: \"Collapsing\"}, classes: \"bt bt-collapsing\", ontap: \"toggleFullScreen\", ondragstart: \"toggleFullScreen\", ondragfinish: \"toggleFullScreen\" }\n                    ]}\n                ]},\n                { name: \"NetworkPanel\", kind: FittableColumns, fit: true, classes: \"device-wiring border-left\", index: 1, components: [\n                    { kind: FittableRows, fit: true, style: \"background:#FFF;\", components: [\n                        { name: \"DrawAreaWrapper\", kind: Panels, fit: true, draggable: false, narrowFit: false, style: \"background:#FFF\", components: [\n                            {name: \"DrawArea\", classes: \"enyo-fit\", components: [\n                                { name: \"Svg\", tag: \"svg\", classes: \"enyo-fit\" },\n                                { name: \"Input\", tag: \"input\", attributes: {value: \"\", type: \"text\"}, classes: \"enyo-input onyx-input insert-text\", style: \"display:none\"}\n                            ]}\n                        ]},\n                        { classes: \"footer\", kind: FittableColumns, components: [\n                            { kind: Grabber, attributes: {title: \"Collapsing\"}, classes: \"bt bt-collapsing\", ontap: \"toggleFullScreen\", ondragstart: \"toggleFullScreen\", ondragfinish: \"toggleFullScreen\" },\n                            { fit: true},\n                            { classes: \"text\", content: \"VIEW:\"},\n                            { kind: ToggleButton, onContent: \"Group\", offContent: \"Group\", onChange: \"toggleChanged\", value: true}\n                        ]}\n                    ]},\n                    { name: \"DeviceListSetup\", kind: plWrDeviceListSetup, classes: \"device-list-setup box-shadow\" }\n                ]}\n            ]}\n        ]}\n    ],\n    breadcrumbHack: function(key, page, percentToAdd) {\n        // Hack to add breadcrumb percentage\n        var percent = PROGRESS[key];\n        percent += percentToAdd;\n//        var percent = percentToAdd;\n\n        if(PROGRESS[key] < 100) {\n            Signals.send(\"onProgress\", {page: page, key: key, value: percent});\n        } else {\n            PROGRESS[key] = 100;\n        }\n    },\n    constructor: function() {\n        this.inherited(arguments);\n        // Set graphic\n        wiringGraphic.panel = this;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        this.fixSubPipeLine();\n    },\n    init: function() {\n        if(this.ready !== true || WIRING_SETTING.RELOAD === true) {\n            // Init Default\n            this.$.TabBarContent.setActive(0);\n            this.$.ContentPanels.setIndex(0);\n\n            // Remove from stack list\n            STACK_LIST.removePanel(this.name);\n\n            // Graphic reset\n            wiringGraphic.reset();\n\n            // Init data\n            var data = [];\n            for(var controllerId in DEVICE_LIST) {\n                var adaptors = [];\n                for(var adaptorId in DEVICE_LIST[controllerId].adaptors) {\n                    // Hashcode clear data if existing\n                    DEVICE_LIST[controllerId].adaptors[adaptorId].sensors = [];\n\n                    adaptors.push(DEVICE_LIST[controllerId].adaptors[adaptorId])\n                }\n                data.push({\n                    id: DEVICE_LIST[controllerId].id,\n                    name: DEVICE_LIST[controllerId].name,\n                    adaptors: adaptors\n                });\n            }\n\n            // Init value for graphic\n            wiringGraphic.deviceList = data;\n\n            // Init FolderBar\n            this.$.FolderBar.loadData(plProject.floors);\n\n            // Init device list setup\n            this.$.DeviceListSetup.loadData(data);\n\n            this.render();\n\n            // Init Preview\n            // this.initPreview();\n        }\n\n        // Ready\n        this.ready = true;\n\n        // Disable render\n        WIRING_SETTING.RELOAD = false;\n\n        //if(this.ready !== true) {\n        //    // Init data\n        //    var me = this;\n        //    wiringService.find(PL.baseUrl + \"assets/jsons/wiring.json\", {}, function(inSender, inResponse) {\n        //        me.$.FolderBar.loadData(inResponse);\n        //        // Init device list setup\n        //        var data = [];\n        //        for(var controllerId in DEVICE_LIST) {\n        //            var adaptors = [];\n        //            for(var adaptorId in DEVICE_LIST[controllerId].adaptors) {\n        //                adaptors.push(DEVICE_LIST[controllerId].adaptors[adaptorId])\n        //            }\n        //            data.push({\n        //                id: DEVICE_LIST[controllerId].id,\n        //                name: DEVICE_LIST[controllerId].name,\n        //                adaptors: adaptors\n        //            });\n        //        }\n        //        me.$.DeviceListSetup.loadData(data);\n        //\n        //        // Value to draw\n        //        wiringGraphic.deviceList = data;\n        //\n        //        me.ready = true;\n        //        me.initPreview();\n        //    });\n        //}\n    },\n    setProgress: function(percent){\n        Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_WIRING, key: 'WIRING', value: percent});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.fixSubPipeLine();\n    },\n    resizeComplete: function() {\n        this.dimension();\n        this.initDrawArea();\n    },\n    // Dimension\n    dimension: function() {\n        this.headerHeight = utils.getCSSProperty(this.parent.parent.$.Header, \"offsetHeight\", false);\n        this.tabBarHeight = utils.getCSSProperty(this.$.TabBar, \"offsetHeight\", false);\n        this.leftWidth = utils.getCSSProperty(this.$.LeftColumn, \"offsetWidth\", false);\n        this.contentTop = this.headerHeight + this.tabBarHeight;\n    },\n    // Calculate area\n    initDrawArea: function() {\n        var width = utils.getCSSProperty(this.$.DrawAreaWrapper, \"offsetWidth\", false);\n        var height = utils.getCSSProperty(this.$.DrawAreaWrapper, \"offsetHeight\", false);\n        wiringGraphic.setSize(width, height);\n    },\n    // Draw\n    initViewPort: function() {\n        if(!!this.ready && !wiringGraphic.g) {\n            wiringGraphic.init(this.$.Svg, this.$.Input);\n        }\n    },\n    initPreview: function() {\n        if(!!wiringGraphic.g) {\n            var width = utils.getCSSProperty(this.$.PreviewSvg, 'offsetWidth');\n            var dx = width / 2 - this.previewSize.cx;\n            var dy = this.previewSize.y <= 50 ? 0 : (-this.previewSize.y + 50);\n            $('#' + this.$.PreviewSvg.getId()).html(wiringGraphic.g.paper.node.innerHTML);\n            this.preview = $('#' + this.$.PreviewSvg.getId());\n            this.preview.find('filter').remove();\n            this.preview.find('*').css('filter', '');\n            this.pNodeRoot = this.preview.find('.svg-root');\n            this.pNodeRoot.find(\"g[controllerid!='\" + wiringGraphic.currentController.id + \"']\").remove();\n            this.pNodeRoot.find(\"path[controllerid!='\" + wiringGraphic.currentController.id + \"']\").remove();\n            this.pNodeRoot.find(\"image[controllerid!='\" + wiringGraphic.currentController.id + \"']\").remove();\n            this.pNodeRoot[0].setAttribute('transform', 'matrix(1,0,0,1,' + dx + ',' + dy + ')');\n\n            // Set Enable\n            if(!!this.autoConfigure) {\n                this.pNodeRoot.find('g[controllerid]').css('display', '');\n                this.pNodeRoot.find('g[adaptorid]').css('display', '');\n                this.pNodeRoot.find('path.svg-path-adaptor[controllerid]').css('display', '');\n            } else {\n                this.pNodeRoot.find('g[controllerid]').css('display', 'none');\n                this.pNodeRoot.find('g[adaptorid]').css('display', 'none');\n                this.pNodeRoot.find('path.svg-path-adaptor[adaptorid]').css('display', 'none');\n            }\n\n            if(!!this.autoWire) {\n                this.pNodeRoot.find('image[sensorid]').css('display', '');\n            } else {\n                this.pNodeRoot.find('image[sensorid]').css('display', 'none');\n            }\n\n            if(!!this.autoConfigure && !!this.autoWire) {\n                this.pNodeRoot.find('path.svg-path-sensor[sensorid]').css('display', '');\n            } else {\n                this.pNodeRoot.find('path.svg-path-sensor[sensorid]').css('display', 'none');\n            }\n        }\n    },\n    initAutoSetup: function(type) {\n        var width = utils.getCSSProperty(this.$.PreviewPanel, 'offsetWidth');\n        var height = utils.getCSSProperty(this.$.PreviewPanel, 'offsetHeight');\n        if(type === 1) {\n            wiringPreview.init(this.$.PreviewSvg.getId(), width, height, false);\n        } else {\n            wiringPreview.init(this.$.PreviewSvg.getId(), width, height, true);\n        }\n    },\n    panelTransitionStart: function(inSender, inEvent) {\n        if(inEvent.fromIndex == 1 && inEvent.toIndex == 0) {\n            this.previewSize = wiringGraphic.g.rootNode.getBBox();\n        }\n    },\n    panelTransitionFinish: function(inSender, inEvent) {\n        if(inEvent.originator.name === 'ContentPanels') {\n            if(inEvent.fromIndex == 0 && inEvent.toIndex == 1 && this.$.TabBarContent.index == 1) {\n                this.initDrawArea();\n                this.initViewPort();\n            } else if(inEvent.fromIndex == 1 && inEvent.toIndex == 0) {\n                this.initPreview();\n            }\n        }\n    },\n    tapHandler: function(inSender, inEvent) {\n        if(inEvent.originator.name == 'AutoConfigure') {\n            this.autoConfigure = true;\n            //if(this.pNodeRoot) {\n            //    this.pNodeRoot.find('g[controllerid]').css('display', '');\n            //    this.pNodeRoot.find('g[adaptorid]').css('display', '');\n            //    this.pNodeRoot.find('path.svg-path-adaptor[adaptorid]').css('display', '');\n            //    if(!!this.autoWire) {\n            //        this.pNodeRoot.find('path.svg-path-sensor[sensorid]').css('display', '');\n            //    }\n            //}\n\n            this.breadcrumbHack('WIRING', APP_PROGRESS.PR_WIRING, 25);\n            this.breadcrumbHack('WIRING_AUTO_SETUP', APP_PROGRESS.PR_WIRING_AUTO_SETUP, 50);\n\n            this.initAutoSetup(1);\n        } else if(inEvent.originator.name == 'AutoWire') {\n            this.autoWire = true;\n\n            this.$.ctrl_3.content = \"<span class='badge red'>17</span>\";\n            this.$.ctrl_4.content = \"<span class='badge blue'>7</span>\";\n            this.$.ctrl_5.content = \"<span class='badge red'>6</span>\";\n            this.$.ctrl_6.content = \"<span class='badge blue'>2</span>\";\n            this.$.ctrl_7.content = \"<span class='badge red'>5</span>\";\n            this.$.ctrl_8.content = \"<span class='badge blue'>2</span>\";\n            this.render();\n\n            //if(this.pNodeRoot) {\n            //    this.pNodeRoot.find('image[sensorid]').css('display', '');\n            //    if(!!this.autoConfigure) {\n            //        this.pNodeRoot.find('path.svg-path-sensor[sensorid]').css('display', '');\n            //    }\n            //}\n\n            this.breadcrumbHack('WIRING', APP_PROGRESS.PR_WIRING, 25);\n            this.breadcrumbHack('WIRING_AUTO_SETUP', APP_PROGRESS.PR_WIRING_AUTO_SETUP, 50);\n\n            this.initAutoSetup(2);\n        }\n    },\n    fixSubPipeLine: function() {\n        var offset = $('#' + this.parent.parent.$.Breadcrumb.$[\"Item_\" + APP_PROGRESS.PR_WIRING].getId()).offset();\n        var offsetLeft = offset.left;\n        var offsetWidth = utils.getCSSProperty(this.parent.parent.$.Breadcrumb.$[\"Item_\" + APP_PROGRESS.PR_WIRING], \"offsetWidth\", false);\n        var chopWidth = utils.getCSSProperty(this.parent.parent.$.Chop, \"offsetWidth\", false);\n        var contentWidth = utils.getCSSProperty(this.$.TabBarContent, \"offsetWidth\", false);\n        this.parent.parent.$.Chop.applyStyle(\"left\", ((offsetLeft + offsetWidth / 2 + chopWidth / 2 - 8) - 20) + \"px\");\n        this.$.TabBarContent.applyStyle(\"left\", ((offsetLeft + offsetWidth / 2 - contentWidth / 2 + 25) - 20) + \"px\");\n    },\n    // Full Screen\n    toggleFullScreen: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case \"tap\":\n                this.$.MainPanels.setIndex(this.$.MainPanels.index ? 0 : 1);\n                break;\n            case \"dragstart\":\n                this.$.MainPanels.setDraggable(true);\n                break;\n            case \"dragfinish\":\n                this.$.MainPanels.setDraggable(false);\n                break;\n        }\n    },\n    tabActivated: function(inSender, inEvent) {\n        this.$.ContentPanels.setIndex(inEvent.originator.index);\n    },\n    drawerActivated: function(inSender, inEvent) {\n        if(this.$[inSender.drawer].open === true) {\n            inSender.addClass(\"unactive\");\n        } else if(inSender.hasClass(\"unactive\")) {\n            inSender.removeClass(\"unactive\");\n        }\n\n        this.$[inSender.drawer].setOpen(!this.$[inSender.drawer].open);\n    },\n    // Folder Drag\n    dragHandler: function(inSender, inEvent) {\n        if(inEvent.type == \"dragstart\") {\n            this.itemSender = inEvent.sender;\n            this.offset = utils.getOffset(this.itemSender);\n            this.offset.x = inEvent.pageX - this.offset.left;\n            this.offset.y = inEvent.pageY - this.offset.top;\n            var pos = {\n                x: inEvent.pageX - this.offset.x,\n                y: inEvent.pageY - this.offset.y\n            };\n            var images = ['assets/images/temps/wiring/a.png', 'assets/images/temps/wiring/b.png', 'assets/images/temps/wiring/plus.png', 'assets/images/temps/wiring/dash.png'];\n            var content = '';\n            //content += '<div class=\"drag-item-content quantity-' + this.itemSender.sensor.type + '\" style=\"background-color:' + utils.getRgbaString(this.itemSender.zone.color, SITE_SETTING.transparency) + ';animation-duration:' + WIRING_SETTING.ANIMATION_DURATION + 's\">';\n            content += '<div class=\"drag-item-content quantity-' + this.itemSender.sensor.type + '\" style=\"background-color:' + utils.getRgbaString(this.itemSender.zone.color, SITE_SETTING.transparency) + '\">';\n            content += '    <div class=\"column-1\" style=\"' + PREFIX.css + 'transition: visibility 0s, opacity ' + WIRING_SETTING.ANIMATION_DURATION + 's ease-out\">';\n            for(var i = 1; i <= this.itemSender.sensor.type; i++) {\n                content += '        <div class=\"image\" style=\"background-image: url(' + images[i % 4] + ')\"></div>';\n            }\n            content += '    </div>';\n            content += '    <div class=\"column-2\"><img src=\"' + this.itemSender.sensor.url + '\"></div>';\n            content += '    <div class=\"column-3\" style=\"' + PREFIX.css + 'transition: opacity ' + WIRING_SETTING.ANIMATION_DURATION + 's ease-in\">' + this.itemSender.getContent() + '</div>';\n            content += '    <div class=\"column-4\"><span>' + this.itemSender.sensor.type + '</span></div>';\n            content += '</div>';\n            Signals.send(\"onDragItem\", {\n                content: content,\n                pos: pos,\n                classes: 'wiring-drag-popup'\n            });\n            Signals.send(\"onDragItem\", {showing: true});\n\n            var height = this.itemSender.sensor.type * 30;\n            setTimeout(function() {\n                Signals.send(\"onDragItem\", {\n                    styles: [\n                        {transition: 'height ' + WIRING_SETTING.ANIMATION_DURATION + 's, line-height ' + WIRING_SETTING.ANIMATION_DURATION + 's, ' + PREFIX.css + 'transform ' + WIRING_SETTING.ANIMATION_DURATION + 's ease-in'},\n                        {height: (height + 2) + 'px'},\n                        {'line-height': height + 'px'}\n                    ]\n                });\n            }, 50);\n            setTimeout(function() {\n                Signals.send(\"onDragItem\", {classes: 'dragging'});\n            }, WIRING_SETTING.ANIMATION_DURATION * 1000 + 50);\n        } else if(inEvent.type == \"drag\") {\n            var pos = {\n                x: inEvent.pageX - this.offset.x,\n                y: inEvent.pageY - this.offset.y\n            };\n            Signals.send(\"onDragItem\", {pos: pos});\n        } else if(inEvent.type == \"dragfinish\") {\n            Signals.send(\"onDragItem\", {content: '', showing: false});\n\n            // Send to panel\n            Signals.send('onWiringDeviceListItem', {\n                controllerId: this.$.DeviceListSetup.controllerId,\n                adaptorId: this.$.DeviceListSetup.adaptorId,\n                sensorId: this.itemSender.sensorId,\n                zone: this.itemSender.zone,\n                sensor: this.itemSender.sensor,\n                quantity: this.itemSender.quantity,\n                sender: this.itemSender\n            });\n\n            // Remove temp\n            delete this.itemSender;\n        }\n    },\n    // Insert sensor to current device list\n    onAddSensorToSensorList: function(inSender, inEvent) {\n        // Add to list\n        var data =  {\n            controllerId: inEvent.controllerId,\n            adaptorId: inEvent.adaptorId,\n            sensorId: inEvent.sensorId,\n            zone: inEvent.zone,\n            sensor: inEvent.sensor,\n            position: inEvent.position,\n            quantity: inEvent.quantity,\n            sender: inEvent.sender\n        };\n\n        // Add to device List\n        this.$.DeviceListSetup.pAddSensorToDeviceList(data);\n\n        // Add to graphic\n        wiringGraphic.createSensorByAdaptor(data, function() {\n            //console.log('test');\n        });\n    },\n    undo: function() {\n        var stack = STACK_LIST.getStackByParentPanel(this.name);\n        if(stack) {\n            if(stack.type === STACK_TYPES.SVG) {\n                wiringGraphic.undo();\n            } else if(stack.type === STACK_TYPES.ENYO) {\n                STACK_LIST.undo(this.name);\n            }\n        }\n    }\n});\n","// Button Setting\n\nvar kind = require('enyo/kind'),\n    Group = require('enyo/Group');\n\nvar IconButton = require('onyx/IconButton'),\n    Tooltip = require('onyx/Tooltip')\n    MenuDecorator = require('onyx/MenuDecorator'),\n    Input = require('onyx/Input')\n    TooltipDecorator = require('onyx/TooltipDecorator')\n    Input = require('onyx/Input')\n    ContextualPopup = require('onyx/ContextualPopup')\n    Checkbox = require('onyx/Checkbox')\n;\n\nexports.Setting = kind({\n    name: \"pl.btn.Setting\",\n    kind: MenuDecorator,\n    classes: \"bt\",\n    style: \"display:inline-block;\",\n    attributes: {title: \"Setting\"},\n    components: [\n        {kind: IconButton, classes: \"btn btn-setting\"},\n        {\n            kind: ContextualPopup,\n            floating: true,\n            classes: \"setting-tool\",\n            components: [\n                {classes: \"title\", content: \"SETTINGS\"},\n                {\n                    name: \"SettingCheckbox\",\n                    kind: Group,\n                    defaultKind: Checkbox,\n                    classes: \"checkgroup-box\",\n                    onActivate: \"settingHandler\",\n                    components: [\n                        {content: \"option 1\", value: false, classes: \"checkbox-style2\", checked: true},\n                        {content: \"option 2\", value: true, classes: \"checkbox-style2\"}\n                    ]\n                }\n            ]\n        }\n    ],\n    settingHandler: function() {\n\n    }\n});\n\n// Button Help\nexports.Help = kind({\n    name: \"pl.btn.Help\",\n    kind: TooltipDecorator,\n    attributes: {title: \"Help\"},\n    components: [\n        {kind: IconButton, classes: \"btn btn-help\"},\n        {kind: Tooltip, content: \"help\"}\n    ]\n});\n\n// Button Locked\nexports.Locked = kind({\n    name: \"pl.btn.Locked\",\n    kind: MenuDecorator,\n    attributes: {title: \"Lock\"},\n    events: {\n        onClick: \"\",\n        onChange: \"\"\n    },\n    components: [\n        {kind: IconButton, name: \"BtLock\", classes: \"btn btn-lock\", ontap: \"buttonTap\"},\n        {\n            kind: ContextualPopup,\n            title: \"UNLOCK TO MAKE CHANGES\",\n            floating: true,\n            classes: \"popup-locked\",\n            components: [\n                {kind: Input, type: \"password\", placeholder: \"enter password\", onchange: \"\"}\n            ]\n        }\n    ],\n    buttonTap: function(inSender, inEvent) {\n        this.doClick(inSender);\n    },\n    inputChanged: function(inSender, inEvent) {\n        this.doChange(inSender);\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableColumns = require('layout/FittableColumns'),\n    FittableRows = require('layout/FittableRows'),\n    Icon = require('onyx/Icon'),\n    IconButton = require('onyx/IconButton'),\n    Image = require('enyo/Image'),\n    MenuDecorator = require('onyx/MenuDecorator'),\n    ContextualPopup = require('onyx/ContextualPopup');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar SubMenuItemSetting = kind({\n    name: \"pl.cm.SubMenuItemSetting\",\n    kind: MenuDecorator,\n    style: \"display:inline-block;\",\n    published: {\n        type: \"apply\",\n        info: {\n            name: 'DINING TEMP',\n            class: 'sensor',\n            kind: 'temperature',\n            type: '1-wire',\n            url: 'assets/images/temps/sensor/t.svg',\n            currentValue: '66'\n        }\n    },\n    create: function() {\n        this.inherited(arguments);\n\n        var currentValue = '';\n        if(this.info.kind === SENSOR_KINDS.TEMPERATURE) {\n            currentValue = this.info.currentValue + \" <span>°F</span>\";\n        } else if(this.info.kind === SENSOR_KINDS.HUMIDITY) {\n            currentValue = this.info.currentValue + \" <span>%</span>\";\n        }\n\n        this.createComponents([\n            {name: \"Button\", kind: IconButton, classes: \"bt\"},\n            {\n                kind: ContextualPopup,\n                classes: \"popup-commission\",\n                maxHeight: \"500\",\n                floating: true,\n                location: \"right\",\n                components: [\n                    {\n                        kind: FittableRows, classes: \"popup-commission-content\",\n                        components: [\n                            {\n                                kind: FittableRows, style: \"overflow: hidden;\",\n                                components: [\n                                    {classes: \"heading-title\", content: \"COMMISSIONING\"},\n                                    {\n                                        kind: FittableColumns,\n                                        components: [\n                                            {\n                                                tag: \"table\", fit: true,\n                                                components: [\n                                                    {\n                                                        tag: \"tr\", components: [\n                                                        {tag: \"td\", content: \"NAME:\"},\n                                                        {tag: \"td\", content: this.info.name}\n                                                    ]\n                                                    },\n                                                    {\n                                                        tag: \"tr\", components: [\n                                                        {tag: \"td\", content: \"CLASS:\"},\n                                                        {tag: \"td\", content: this.info.class}\n                                                    ]\n                                                    },\n                                                    {\n                                                        tag: \"tr\", components: [\n                                                        {tag: \"td\", content: \"KIND:\"},\n                                                        {tag: \"td\", content: this.info.kind}\n                                                    ]\n                                                    },\n                                                    {\n                                                        tag: \"tr\", components: [\n                                                        {tag: \"td\", content: \"TYPE:\"},\n                                                        {tag: \"td\", content: this.info.type + '-WIRE'}\n                                                    ]\n                                                    }\n                                                ]\n                                            },\n                                            {\n                                                kind: Image,\n                                                src: this.info.url,\n                                                style: \"width: 110px;float:right\"\n                                                //src: \"assets/images/temps/commission-sensor.png\",\n                                                //style: \"width: 110px;height: 130px;float:right\"\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            {\n                                kind: FittableRows,\n                                components: [\n                                    {\n                                        kind: FittableColumns,\n                                        components: [\n                                            {\n                                                kind: FittableRows, components: [\n                                                {classes: \"heading-title\", content: \"CURRENT VALUE\"},\n                                                {classes: \"temperature\", content: currentValue, allowHtml: true}\n                                            ]\n                                            },\n                                            {\n                                                classes: \"chart\", kind: FittableRows,\n                                                components: [\n                                                    {content: \"RANGE OF EXPECTED VALUES\"},\n                                                    {\n                                                        style: \"height:130px;text-align: center;\",\n                                                        components: [\n                                                            {\n                                                                kind: Image,\n                                                                src: \"assets/images/temps/commission-chart.png\",\n                                                                style: \"width: 180px;height: 130px;\"\n                                                            }\n                                                        ]\n                                                    }\n                                                ]\n                                            }\n                                        ]\n                                    }\n                                ]\n                            },\n                            {\n                                kind: FittableRows,\n                                components: [\n                                    {classes: \"heading-title\", content: \"ANALYSIS\"},\n                                    {classes: \"text\", content: \"SENSOR APPEARS OK\"},\n                                    {\n                                        classes: \"button-row\", kind: FittableRows,\n                                        components: [\n                                            {\n                                                kind: Icon,\n                                                content: \"ACCEPT\",\n                                                attributes: {title: \"\"},\n                                                classes: \"bt bt-accept\"\n                                            },\n                                            {\n                                                kind: Icon,\n                                                content: \"REJECT\",\n                                                attributes: {title: \"\"},\n                                                classes: \"bt bt-reject\"\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ], {owner: this});\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        this.$.Button.addClass(\"bt-commission-\" + this.type);\n    }\n});\nexports.SubMenuItemSetting = SubMenuItemSetting;\n\nvar SubMenuItem = kind({\n    name: \"pl.cm.SubMenuItem\",\n    kind: FittableRows,\n    classes: \"device-item\",\n    published: {\n        start: 1,\n        quantity: 2,\n        title: \"ENTRY TEMP\",\n        value: \"68°F\",\n        images: ['assets/images/temps/wiring/a.png', 'assets/images/temps/wiring/b.png', 'assets/images/temps/wiring/plus.png', 'assets/images/temps/wiring/dash.png'],\n        setting: \"apply\",\n        color: \"#a5b4da\",\n        height: \"30\",\n        unused: false,\n        info: {\n            name: 'DINING TEMP',\n            class: 'sensor',\n            kind: 'temperature',\n            type: '1-wire',\n            url: 'assets/images/temps/sensor/t.svg'\n        }\n    },\n    create: function() {\n        this.inherited(arguments);\n        if(!this.unused) {\n            var childComponent = [];\n            for(var i = 0; i < this.quantity; i++) {\n                childComponent.push(\n                    {\n                        kind: FittableColumns,\n                        components: [\n                            {classes: \"number\", style: \"height: \" + this.height + \"px;\", content: this.start + i},\n                            {classes: \"image\", style: \"height: \" + this.height + \"px;background-image:url(\" + this.images[i % 4] + \");\"}\n                        ]\n                    }\n                );\n            }\n            this.createComponent({\n                name: \"DeviceList\",\n                kind: FittableColumns,\n                classes: \"device-detail quantity-\" + this.quantity,\n                style: \"background-color: \" + utils.getRgbaString(this.color, SITE_SETTING.transparency) + \";\",\n                components: [\n                    {\n                        kind: FittableRows,\n                        classes: \"column-1\",\n                        components: childComponent\n                    },\n                    {\n                        classes: \"column-2\",\n                        content: this.title,\n                        allowHtml: true,\n                        style: \"height: \" + this.height * this.quantity + \"px;line-height: \" + this.height * this.quantity + \"px\"\n                    },\n                    {\n                        allowHtml: true,\n                        classes: \"column-3\",\n                        style: \"height: \" + this.height * this.quantity + \"px\",\n                        content: \"<span>\" + this.value + \"</span>\"\n                    },\n                    {\n                        classes: \"column-4\",\n                        style: \"height: \" + this.height * this.quantity + \"px\",\n                        components: [\n                            {kind: \"pl.cm.SubMenuItemSetting\", type: this.setting, info: this.info}\n                        ]\n                    }\n                ]\n            });\n        } else {\n            this.createComponent({\n                name: \"DeviceList\", kind: FittableColumns, classes: \"device-detail quantity-unused\",\n                components: [\n                    {classes: \"number\", style: \"height: \" + this.height + \"px;\", content: this.start},\n                    {classes: \"unused\", style: \"height: \" + this.height + \"px;\", content: \"unused\"}\n                ]\n            });\n        }\n    }\n});\nexports.SubMenuItem = SubMenuItem;\n\nvar SubMenu = kind({\n    name: \"pl.cm.SubMenu\",\n    kind: FittableRows,\n    published: {\n        componentContents: []\n    },\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents(this.componentContents, {owner: this});\n    }\n});\nexports.SubMenu = SubMenu;\n","//\n\nvar kind = require('enyo/kind'),\n    bind = require('enyo/utils').bind,\n    Signals = require('enyo/Signals'),\n    Animator = require('enyo/Animator'),\n    Button = require('onyx/Button'),\n    Drawer = require('onyx/Drawer'),\n    FileInputDecorator = require('enyo-external/FileInputDecorator'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableRows = require('layout/FittableRows'),\n    FittableColumnsLayout = require('layout/FittableLayout').Columns,\n    FittableRowsLayout = require('layout/FittableLayout').Rows,\n    Input = require('onyx/Input'),\n    TextArea = require('onyx/TextArea'),\n    Picker = require('onyx/Picker'),\n    PickerButton = require('onyx/PickerButton'),\n    PickerDecorator = require('onyx/PickerDecorator'),\n    Scroller = require('enyo/Scroller'),\n    plSuInput = require('./input.js');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar INPUT_SIZE = 35;\nvar FLOOR_SIZE = 220;\nvar chart1;\n\nmodule.exports = kind({\n    name: 'pl.su.Building',\n    kind: FittableRows,\n    classes: 'building-info enyo-fit',\n    handlers: {\n        onmouseover: 'onHandle'\n    },\n    components: [\n        { name:'BuildingOption', kind: FittableRows, classes: 'building-option', components: [\n            { name: 'ImportBuildingTitle', drawer: 'ImportBuildingContent', classes: 'drawer-title', content: 'IMPORT BUILDING MODEL OPTION<div class=\"ok\"></div>',\n                allowHtml: true, ontap: 'activateDrawer'},\n            { name: 'ImportBuildingContent', kind: Drawer, classes: 'building-option-data', open: true, onDrawerAnimationEnd: 'resize', components: [\n                { kind: FittableRows, components: [\n                    {classes: 'item-title', content: 'IMPORT BUILDING MODEL'},\n                    {classes: 'file-input-group', components: [\n                        { name: 'FileName', kind: Input, placeholder: 'open file', classes: 'txt-open-file', value: '',\n                            oninput: 'valueChanged', ontap: 'oldValueChange'},\n                        { name: 'FileInput', kind: FileInputDecorator, classes: 'bt bt-file-input', onSelect: 'valueChanged' }\n                    ]},\n                    {classes: 'item-note', content: 'IMPORT GBXML, IFC, RESCheck, OR COMCheck files'}\n                ]}\n            ]}\n        ]},\n        { name:'BuildingData', kind: FittableRows, classes: 'building-data', components: [\n            { name: 'BuildingDataTitle', drawer: 'BuildingDataDrawer', classes: 'drawer-title', content: 'MANUAL BUILDING DATA<div class=\"ok\"></div>',\n                allowHtml: true, ontap: 'activateDrawer'},\n            { name: 'BuildingDataDrawer', kind: Drawer, open: true, classes: 'building-data-drawer', components: [\n                { name:'BuildingDataScroller', style:'overflow-x: auto;overflow-y: auto;', components: [\n                    { name:'BuildingDataContent', kind: FittableColumns, classes:'building-data-content', components: [\n                        { name:'DataInner', kind: FittableRows, classes: 'manual-build', components: [\n                            { name:'FloorWrap', kind: FittableRows, style:'margin-bottom:10px', components:[\n                                { name: 'FloorTitle', drawer: 'FloorContent', classes: 'drawer-title', content: 'BUILDING INFORMATION<div class=\"ok\"></div>', allowHtml: true, ontap: 'activateDrawer'},\n                                { name: 'FloorContent', kind: Drawer, open: true, components: [\n                                    { kind: FittableRows, classes: 'inner-box building-information-content', components: [\n                                        { classes: 'manual-build-title', content: 'TOTAL BUILDING FLOOR AREA'},\n                                        { kind: FittableColumns, components: [\n                                            { kind: FittableColumns, classes: '', components: [\n                                                {\n                                                    name: 'TotalBuildingFloorArea', kind: Input, placeholder: 'unknown', classes: 'sumfloor-input',\n                                                    oninput: 'valueChanged',\n                                                    onfocus: 'onSaveFocus',\n                                                    onkeydown: 'onSaveKeyDown',\n                                                    onchange: 'onSaveChange'\n                                                },\n                                                { classes: 'txt-name', content: 'SQFT'}\n                                            ]},\n                                            { kind: FittableColumns, classes: 'manual-build-total', style: 'position: absolute;top:0;right:0;', components: [\n                                                { classes: 'text', content: 'TOTAL BUILDING LEVELS'},\n                                                {\n                                                    name: 'TotalBuildingLevels',\n                                                    kind: Input,\n                                                    placeholder: '1',\n                                                    onfocus: 'onSaveFocus',\n                                                    onkeydown: 'onSaveKeyDown',\n                                                    onchange: 'onSaveChange'\n                                                }\n                                            ]}\n                                        ]},\n                                        {name: 'LevelWrap', kind: FittableRows, classes: 'floors', style: 'overflow: auto;', components: [\n                                            {kind: FittableColumns, classes: 'floor-level line', allowHtml: true, content: '<span class=\"line\"></span>'},\n                                            {name: 'Levels', kind: FittableRows},\n                                            {kind: FittableColumns, classes: 'floor-level add', components: [\n                                                { name: 'AddButton', classes: 'add', ontap: 'createLevel', allowHtml:true, content:'<span class=\"line\"></span><span class=\"img\"></span>' },\n                                                { name: 'FloorName', classes: 'level-title', content: 'Add level'}\n                                            ]}\n                                        ]}\n                                    ]}\n                                ]}\n                            ]},\n                            { name:'MechanicalWrap', kind: FittableRows, components:[\n                                {\n                                    name: 'MechanicalTitle',\n                                    classes: 'drawer-title',\n                                    content: 'BUILDING MECHANICAL LOAD INFORMATION<div class=\"ok\"></div>',\n                                    drawer: 'MechanicalContent',\n                                    allowHtml: true,\n                                    ontap: 'activateDrawer'\n                                },\n                                { name: 'MechanicalContent', kind: Drawer, open: true, onDrawerAnimationEnd: 'resize', components: [\n                                    { classes: 'inner-box', components: [\n                                        { tag: 'table', classes: '', components: [\n                                            { tag: 'tr', components: [\n                                                { tag: 'td', components: [\n                                                    { classes: 'item-title', content: 'U-VALUE • AREA'},\n                                                    { kind: FittableColumns, components: [\n                                                        { classes: 'u-value-wrap', components: [\n                                                            {\n                                                                name: 'UValueAreaInput',\n                                                                kind: Input,\n                                                                classes: 'building-mechanical-input u-value',\n                                                                placeholder: 'unknown',\n                                                                oninput: 'mechanicalValueChanged',\n                                                                ontap: 'mechanicalFocus',\n                                                                onfocus: 'onSaveFocus',\n                                                                onkeydown: 'onSaveKeyDown',\n                                                                onchange: 'onSaveChange'\n                                                            },\n                                                            { name: 'UValueAreaCheck', showing: false, classes: 'bg-check estimate'},\n                                                            { name: 'UValueGroupBox', kind: FittableColumns, classes: 'button-style-wrap', showing: false, components: [\n                                                                { name: 'ButtonEstimate', kind: Button, input: 'UValueAreaInput', classes: 'bt bt-estimate', content: 'Estimate', ontap: 'uValueGroupButtonTap'},\n                                                                { name: 'ButtonAccurate', kind: Button, input: 'UValueAreaInput', classes: 'bt bt-accurate', content: 'Accurate', ontap: 'uValueGroupButtonTap'}\n                                                            ]}\n                                                        ]},\n                                                        { classes: 'txt-name', content: 'UA'}\n                                                    ]}\n                                                ]},\n                                                { tag: 'td'},\n                                                { tag: 'td'}\n                                            ]},\n                                            {tag: 'tr', components: [\n                                                {tag: 'td', components: [\n                                                    { classes: 'item-title', content: 'HEATING DESIGN DAY'},\n                                                    { layoutKind: FittableColumnsLayout, components: [\n                                                        {\n                                                            name: 'HeatingDesignDayInput',\n                                                            kind: Input,\n                                                            classes: 'building-mechanical-input',\n                                                            placeholder: 'unknown',\n                                                            oninput: 'mechanicalValueChanged',\n                                                            onfocus: 'onSaveFocus',\n                                                            onkeydown: 'onSaveKeyDown',\n                                                            onchange: 'onSaveChange'\n                                                        },\n                                                        { classes: 'txt-name', content: 'kBTU'}\n                                                    ]}\n                                                ]},\n                                                { tag: 'td', components: [\n                                                    {classes: 'item-title', content: 'COOLING DESIGN DAY'},\n                                                    { layoutKind: FittableColumnsLayout, components: [\n                                                        {\n                                                            name: 'CoolingDesignDayInput',\n                                                            kind: Input,\n                                                            classes: 'building-mechanical-input',\n                                                            placeholder: 'unknown',\n                                                            oninput: 'mechanicalValueChanged',\n                                                            onfocus: 'onSaveFocus',\n                                                            onkeydown: 'onSaveKeyDown',\n                                                            onchange: 'onSaveChange'\n                                                        },\n                                                        { classes: 'txt-name', content: 'kBTU'}\n                                                    ]}\n                                                ]},\n                                                { tag: 'td', components: [\n                                                    { name: 'PickerDesignDay', kind: PickerDecorator, onChange: 'mechanicalValueChanged', components: [\n                                                        { name: 'ButtonPickerDesignDay', kind: PickerButton, classes: 'bt-select', content: '99% DESIGN DAY'},\n                                                        { kind: Picker, components: [\n                                                            { content: '99% DESIGN DAY'},\n                                                            { content: '99.6% DESIGN DAY'}\n                                                        ]}\n                                                    ]}\n                                                ]}\n                                            ]}\n                                        ]}\n                                    ]}\n                                ]}\n                            ]}\n                        ]},\n                        { kind: Scroller, layoutKind: FittableRowsLayout, classes: 'chart', components: [\n                            { classes: 'text', content: 'Building Floor Area Ranking Compared to Commercial Stock' },\n                            { name: 'BuildingFARankingChart', classes: 'draw-area' },\n                            { classes: 'text', content: 'Building UA Ranking Compared to Commercial Stock' },\n                            { name: 'BuildingUaRankingChart', classes: 'draw-area' }\n                        ]}\n                    ]}\n                ]}\n            ]}\n        ]}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n        // Item focus\n        this.inputFocus = undefined;\n        // Available\n        this.project = plProject2;\n        this.floors = plProject2.floors;\n        this.floors.sort('id');\n    },\n    create: function() {\n        this.inherited(arguments);\n\n        // Set fields\n        this.inputFields = {\n            fileName: this.$.FileName,\n            fileInput: this.$.FileInput,\n            totalBuildingFloorArea: this.$.TotalBuildingFloorArea,\n            totalBuildingLevels: this.$.TotalBuildingLevels\n        };\n\n        // Button Action\n        this.actionButtons = {\n            addLevel: this.$.AddButton\n        };\n\n        // Create level list from data\n        this.floors.sort('id');\n        for(var i = 0; i < this.floors.count; i++) {\n            this.createLevel(this.floors.item(i));\n        }\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        if(this.project.uValueArea) {\n            this.$.UValueAreaInput.setValue(this.project.uValueArea);\n        }\n        if(this.project.heatingDesignDay) {\n            this.$.HeatingDesignDayInput.setValue(this.project.heatingDesignDay);\n        }\n        if(this.project.coolingDesignDay) {\n            this.$.CoolingDesignDayInput.setValue(this.project.coolingDesignDay);\n        }\n        if(this.project.pickerDesignDay) {\n            this.$.ButtonPickerDesignDay.setContent(this.project.pickerDesignDay + '% DESIGN DAY');\n        }\n        // Set height\n        this.resize();\n        // Scroll to bottom\n        this.scrollToBottom();\n    },\n    resize: function() {\n        // Set height for building data\n        var height = utils.getCSSProperty(this, 'offsetHeight', false) - utils.getCSSProperty(this.$.BuildingOption, 'offsetHeight', false);\n        this.$.BuildingData.applyStyle('height', height + 'px');\n\n        // Set height for building data content\n        var heightContent = height - utils.getCSSProperty(this.$.BuildingDataTitle, 'offsetHeight', false);\n        this.$.BuildingDataScroller.applyStyle('height', heightContent + 'px');\n\n        // Set max heigr for floor\n        if(heightContent < 400) heightContent = 400;\n        var maxHeight = heightContent - utils.getCSSProperty(this.$.MechanicalWrap, 'offsetHeight', false);\n        this.$.LevelWrap.applyStyle('max-height', (maxHeight - 110) + 'px'); // 110 is height not floor\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.resize();\n    },\n    //resizeComplete: function() {\n    //    this.resize();\n    //},\n    breadcrumbHack: function(key, page, percentToAdd) {\n        // Hack to add breadcrumb percentage\n        var percent = PROGRESS[key];\n        percent += percentToAdd;\n\n        if(PROGRESS[key] < 100){\n            Signals.send('onProgress', {page: page, key: key, value: percent});\n        } else {\n            PROGRESS[key] = 100;\n        }\n    },\n    updateGraphHack: function(value) {\n        var areaRanking1 = chart1.getContainer().getElementsByTagName('svg')[0];\n        var width1 = parseInt(areaRanking1.getAttribute('width'));\n        var height1 = parseInt(areaRanking1.getAttribute('height'));\n\n        // console.log(areaRanking1.getElementById('column').getElementsByTagName('rect'));\n        // console.log(areaRanking1.childNodes);\n        // console.log(areaRanking1.getElementById('column'));\n\n        var lineColumn = areaRanking1.getElementById('column');\n        var columnLabel = areaRanking1.getElementById('label');\n        areaRanking1.removeChild(lineColumn);\n        areaRanking1.removeChild(columnLabel);\n\n        var column1 = utils.makeSVG(\n            'rect',\n            {\n                id: 'column',\n                x: width1 * (value / 10000),//width1 * 63 / 100,\n                y: 0,\n                width: 15,\n                height: height1,\n                fill: '#615f95',\n                stroke: '#615f95',\n                'fill-opacity': 0.2\n            }\n        );\n        areaRanking1.appendChild(column1);\n\n        var percentage = (value / 100).toString() + '%';\n\n        var label1 = utils.makeSVG(\n            'text',\n            {\n                id: 'label',\n                x: width1 * (value / 10000) + 15 / 2,\n                y: 50,\n                stroke: 'none',\n                fill: '#615f95',\n                'font-size': '12px',\n                'text-anchor': 'middle'\n            },\n            percentage\n        );\n        label1.style.fontWeight = 'bold';\n        areaRanking1.appendChild(label1);\n    },\n    // Chart Building Floor Area Ranking\n    createChart: function() {\n        // Create and populate the data table.\n        var data1 = new google.visualization.DataTable();\n        data1.addColumn('number', 'x');\n        // Line 1\n        data1.addColumn('number', 'y');\n        data1.addColumn({type: 'number', role: 'interval'});\n        data1.addColumn({type: 'number', role: 'interval'});\n        // Add data\n        data1.addRows([\n            [0.0, 0.0, 0.0, 0.0],\n            [0.2, 0.3, 0.3, 0.0],\n            [0.4, 0.4, 0.4, 0.0],\n            [0.6, 0.7, 0.7, 0.0],\n            [0.8, 0.5, 0.5, 0.0],\n            [1.0, 0.0, 0.0, 0.0]\n        ]);\n        // Create and draw the visualization.\n        chart1 = new google.visualization.LineChart(document.getElementById(this.$.BuildingFARankingChart.getId()));\n        chart1.draw(data1, {\n            width: '100%',\n            height: '100%',\n            chartArea: {width: '100%', height: '100%'},\n            curveType: 'function',\n            legend: {position: 'none'},\n            lineWidth: 3,\n            vAxis: {\n                textPosition: 'none',\n                textStyle: {color: '#303282', bold: 1},\n                minValue: 0,\n                maxValue: 1,\n                format: '#,#%',\n                gridlines: {count: 3},\n                minorGridlines: {count: 4},\n                baselineColor: 'grey'\n            },\n            hAxis: {\n                textPosition: 'in',\n                textStyle: {color: '#303282', bold: 1},\n                minValue: 0,\n                maxValue: 1,\n                format: '#,#%',\n                gridlines: {count: 3},\n                minorGridlines: {count: 4},\n                baselineColor: 'grey'\n            },\n            series: {\n                0: {color: '#83c7ef'}\n            },\n            intervals: {'style': 'area', fillOpacity: 0.5}\n        });\n        // Custom chart1\n        var areaRanking1 = chart1.getContainer().getElementsByTagName('svg')[0];\n\n        var width1 = parseInt(areaRanking1.getAttribute('width'));\n        var height1 = parseInt(areaRanking1.getAttribute('height'));\n\n        var text11 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: 15,\n                y: height1 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: '#ffffff',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '0%'\n        );\n        var text12 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: 15,\n                y: height1 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: 'none',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '0%'\n        );\n        var text21 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: width1,\n                y: height1 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: '#ffffff',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '100%'\n        );\n        var text22 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: width1,\n                y: height1 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: 'none',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '100%'\n        );\n        areaRanking1.appendChild(text11);\n        areaRanking1.appendChild(text12);\n        areaRanking1.appendChild(text21);\n        areaRanking1.appendChild(text22);\n        var column1 = utils.makeSVG(\n            'rect',\n            {\n                id: 'column',\n                x: width1*1/100,//width1 * 63 / 100,\n                y: 0,\n                width: 15,\n                height: height1,\n                fill: '#615f95',\n                stroke: '#615f95',\n                'fill-opacity': 0.2\n            }\n        );\n        areaRanking1.appendChild(column1);\n\n        var label1 = utils.makeSVG(\n            'text',\n            {\n                id: 'label',\n                x: width1 * 63 / 100 + 15 / 2,\n                y: 50,\n                stroke: 'none',\n                fill: '#615f95',\n                'font-size': '12px',\n                'text-anchor': 'middle'\n            },\n            '63%'\n        );\n        label1.style.fontWeight = 'bold';\n        areaRanking1.appendChild(label1);\n        // Waiting chart rendered\n        setTimeout(function() {\n            var bb1 = label1.getBBox();\n            var mask1 = utils.makeSVG(\n                'rect',\n                {\n                    id: 'mask',\n                    x: bb1.x - 2,\n                    y: bb1.y - 2,\n                    height: bb1.height + 4,\n                    width: bb1.width + 4,\n                    fill: '#ffffff',\n                    stroke: 'none',\n                    'fill-opacity': 0.3\n                }\n            );\n            areaRanking1.appendChild(mask1);\n        }, 1000);\n        // End Custom chart1\n\n        // Chart Building Ua Ranking\n        var data2 = new google.visualization.DataTable();\n        data2.addColumn('number', 'x');\n        // Line 1\n        data2.addColumn('number', 'y');\n        data2.addColumn({type: 'number', role: 'interval'});\n        data2.addColumn({type: 'number', role: 'interval'});\n        // Add data\n        data2.addRows([\n            [0.0, 0.0, 0.0, 0.0],\n            [0.2, 0.3, 0.3, 0.0],\n            [0.4, 0.4, 0.4, 0.0],\n            [0.6, 0.7, 0.7, 0.0],\n            [0.8, 0.5, 0.5, 0.0],\n            [1.0, 0.0, 0.0, 0.0]\n        ]);\n        // Create and draw the visualization.\n        var chart2 = new google.visualization.LineChart(document.getElementById(this.$.BuildingUaRankingChart.getId()));\n        chart2.draw(data2, {\n            width: '100%',\n            height: '100%',\n            chartArea: {width: '100%', height: '100%'},\n            curveType: 'function',\n            legend: {position: 'none'},\n            lineWidth: 3,\n            vAxis: {\n                textPosition: 'none',\n                textStyle: {color: '#853b3a', bold: 1},\n                minValue: 0,\n                maxValue: 1,\n                format: '#,#%',\n                gridlines: {count: 3},\n                minorGridlines: {count: 4},\n                baselineColor: 'grey'\n            },\n            hAxis: {\n                textPosition: 'in',\n                textStyle: {color: '#303282', bold: 1},\n                minValue: 0,\n                maxValue: 1,\n                format: '#,#%',\n                gridlines: {count: 3},\n                minorGridlines: {count: 4},\n                baselineColor: 'grey'\n            },\n            series: {\n                0: {color: '#dfc496'}\n            },\n            intervals: {'style': 'area', fillOpacity: 0.5}\n        });\n\n        // Custom chart2\n        var areaRanking2 = chart2.getContainer().getElementsByTagName('svg')[0];\n\n        var width2 = parseInt(areaRanking2.getAttribute('width'));\n        var height2 = parseInt(areaRanking2.getAttribute('height'));\n\n        var text11 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: 15,\n                y: height2 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: '#ffffff',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '0%'\n        );\n        var text12 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: 15,\n                y: height2 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: 'none',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '0%'\n        );\n        var text21 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: width2,\n                y: height2 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: '#ffffff',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '100%'\n        );\n        var text22 = utils.makeSVG(\n            'text',\n            {\n                'text-anchor': 'end',\n                x: width2,\n                y: height2 - 4.5,\n                'font-family': 'Arial',\n                'font-size': 10,\n                'font-weight': 'bold',\n                stroke: 'none',\n                'stroke-width': 3,\n                fill: '#303282'\n            },\n            '100%'\n        );\n        areaRanking2.appendChild(text11);\n        areaRanking2.appendChild(text12);\n        areaRanking2.appendChild(text21);\n        areaRanking2.appendChild(text22);\n\n        var column2 = utils.makeSVG(\n            'rect',\n            {\n                id: 'column',\n                x: width2 * 42 / 100,\n                y: 0,\n                width: 15,\n                height: height2,\n                fill: '#8d4f3d',\n                stroke: '#8d4f3d',\n                'fill-opacity': 0.2\n            }\n        );\n        areaRanking2.appendChild(column2);\n\n        var label2 = utils.makeSVG(\n            'text',\n            {\n                id: 'label',\n                x: width2 * 42 / 100 + 15 / 2,\n                y: 50,\n                stroke: 'none',\n                fill: '#8d4f3d',\n                'font-size': '12px',\n                'text-anchor': 'middle'\n            },\n            '42%'\n        );\n        label2.style.fontWeight = 'bold';\n        areaRanking2.appendChild(label2);\n        // Waiting chart rendered\n        setTimeout(function() {\n            var bb2 = label2.getBBox();\n            var mask2 = utils.makeSVG(\n                'rect',\n                {\n                    id: 'mask',\n                    x: bb2.x - 2,\n                    y: bb2.y - 2,\n                    height: bb2.height + 4,\n                    width: bb2.width + 4,\n                    fill: '#ffffff',\n                    stroke: 'none',\n                    'fill-opacity': 0.3\n                }\n            );\n            areaRanking2.appendChild(mask2);\n        }, 1000);\n        // End Custom chart2\n    },\n    // Handle\n    onHandle: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case 'mouseover':\n                // Floor GroupButton Hide\n                var items = ['FloorTitle', 'MechanicalTitle', 'BuildingDataDrawer'];\n                if(items.indexOf(inEvent.originator.name) != -1) {\n                    if(this.$[this.inputFocus] != undefined) this.$[this.inputFocus].popupOff();\n                }\n                // UValue GroupButton Hide\n                items = ['MechanicalTitle', 'BuildingDataDrawer', 'HeatingDesignDayInput', 'CoolingDesignDayInput', 'ButtonPickerDesignDay'];\n                if(items.indexOf(inEvent.originator.name) != -1) {\n                    this.$.UValueGroupBox.setShowing(false);\n                }\n                break;\n            case 'mouseout':\n                break;\n        }\n    },\n    // Up <-> Down Drawer\n    activateDrawer: function(inSender) {\n        if(this.$[inSender.drawer].open === true) {\n            inSender.addClass('unactive');\n        } else if(inSender.hasClass('unactive')) {\n            inSender.removeClass('unactive');\n        }\n        this.$[inSender.drawer].setOpen(!this.$[inSender.drawer].open);\n    },\n    // Other change\n    valueChanged: function(inSender, inEvent) {\n        if(inSender.name == 'FileName') {\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.EDIT,\n                inSender,\n                inSender.oldValue\n            );\n        } else if(inSender.name == 'FileInput') {\n            if(inEvent.files.length > 0) {\n                inSender.files = inEvent.files;\n                // Set value for input name\n                this.oldValueChange(this.inputFields.fileName);\n                this.inputFields.fileName.setValue(inEvent.files[0].name);\n\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    this.inputFields.fileName,\n                    this.inputFields.fileName.oldValue\n                );\n            } else {\n                inSender.files = null;\n                // Set value for input name\n                this.oldValueChange(this.inputFields.fileName);\n                this.inputFields.fileName.setValue('');\n\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    this.inputFields.fileName,\n                    this.inputFields.fileName.oldValue\n                );\n            }\n        } else if(inSender.name == 'TotalBuildingFloorArea') {\n            this.updateLevelByTotalBuildingFloorArea();\n        } else if(inSender.parent.name == 'Levels') {\n            this.levelChange();\n        }\n\n        // Check Mark\n        this.checkMark();\n    },\n    // Resize Floor Wrap\n    scrollToBottom: function() {\n        var levelWrap = document.getElementById(this.$.LevelWrap.getId());\n        if(levelWrap) {\n            levelWrap.scrollTop = levelWrap.scrollHeight - levelWrap.offsetHeight;\n        }\n    },\n    // Add Level\n    createLevel: function(inSender) {\n        var value = '', type = FLOOR_TYPES.ACCURATE, floorId = -1, removed = false;\n        if(typeof inSender.$ !== 'object') { // Not Enyo Object\n            value = inSender.value;\n            type = inSender.type;\n            floorId = inSender.id;\n\n            inSender.removed = inSender.removed ? true : false;\n            removed = inSender.removed;\n        } else {\n            var temFloor = new FLOOR('Floor #2', FLOOR_TYPES.ACCURATE, '');\n            plFloorList2.add(temFloor, true);\n            //plProject2.floors.add(temFloor);\n\n            value = temFloor.value;\n            type = temFloor.type;\n            floorId = temFloor.id;\n\n            temFloor.removed = false;\n            removed = false;\n        }\n        var targetName = 'FloorItem_' + this.$.Levels.children.length;\n        this.$.Levels.createComponent({\n            name: targetName,\n            kind: plSuInput,\n            classes: 'floor-level',\n            value: value,\n            type: type,\n            floorId: floorId,\n            style: 'height:0;',\n            removed: removed,\n            onInput: 'valueChanged',\n            onRemove: 'disableLevel',\n            onType: 'levelChangeType',\n            onFocus: 'levelFocus',\n            onAddStack: 'levelAddStack'\n        }, {owner: this});\n        this.$[targetName].render();\n        // Rename\n        this.renameList();\n        // Animation\n        var anim = new Animator({\n            duration: 200,\n            startValue: 0,\n            endValue: INPUT_SIZE,\n            onStep: bind(this, function(data) {\n                this.$[targetName].applyStyle('height', data.value + 'px');\n            }),\n            onEnd: bind(this, function() {\n                var that = this;\n                setTimeout(function() {\n                    that.scrollToBottom();\n                }, 200);\n            })\n        });\n        anim.play();\n        // Check Value\n        this.levelChange();\n\n        // Add stack list\n        STACK_LIST.addStack(\n            this.owner.name,\n            this.owner.name,\n            STACK_TYPES.ENYO,\n            STACK_METHODS.CREATE,\n            this.$[targetName],\n            undefined,\n            this,\n            'disableLevel'\n        );\n    },\n    // Disable Level\n    disableLevel: function(inSender, inEvent) {\n        // Animation\n        var anim = new Animator({\n            duration: 200,\n            startValue: INPUT_SIZE,\n            endValue: 0,\n            onStep: bind(this, function(data) {\n                inSender.applyStyle('height', data.value + 'px');\n            }),\n            onEnd: bind(this, function() {\n                var that = this;\n                setTimeout(function() {\n                    inSender.hide();\n                    inSender.removed = true;\n                    that.renameList();\n                    // Check Value\n                    that.levelChange();\n                }, 200);\n            })\n        });\n        anim.play();\n\n        // Add stack list\n        if(!!inEvent) { // Not Callback\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.CALLBACK,\n                inSender,\n                undefined,\n                this,\n                'enableLevel'\n            );\n        }\n    },\n    // Enable Level\n    enableLevel: function(stack) {\n        stack.sender.applyStyle('height', '0px');\n        stack.sender.show();\n        stack.sender.removed = false;\n        var anim = new Animator({\n            duration: 200,\n            startValue: 0,\n            endValue: INPUT_SIZE,\n            onStep: bind(this, function(data) {\n                stack.sender.applyStyle('height', data.value + 'px');\n            }),\n            onEnd: bind(this, function() {\n                //var that = this;\n                //setTimeout(function() {\n                //    that.scrollToBottom();\n                //}, 200);\n            })\n        });\n        anim.play();\n        this.renameList();\n        // Check Value\n        this.levelChange();\n    },\n    // Rename indicator and update length for levels\n    renameList: function() {\n        this.$.Levels.length = 0;\n        for(var i = 0, j = 1; i < this.$.Levels.children.length; i++) {\n            var child = this.$.Levels.children[i];\n            if(!child.removed) {\n                child.setIndex(j);\n                this.$.Levels.length = j;\n                j++;\n            }\n        }\n    },\n    // GroupButton hide when not focus\n    levelFocus: function(inSender, inEvent) {\n        // Disable Popup\n        if(this.inputFocus != undefined && this.$[this.inputFocus] != undefined) {\n            this.$[this.inputFocus].popupOff();\n        }\n        // Store\n        this.inputFocus = inEvent.name;\n        // Show Popup\n        this.$[this.inputFocus].popupOn();\n    },\n    levelAddStack: function(inSender, inEvent) {\n        STACK_LIST.addStack(\n            this.owner.name,\n            this.owner.name,\n            STACK_TYPES.ENYO,\n            STACK_METHODS.EDIT,\n            inSender,\n            inEvent.valueFocus,\n            this,\n            'levelChange'\n        );\n    },\n    // Record type changed\n    levelChangeType: function(inSender, inEvent) {\n        STACK_LIST.addStack(\n            this.owner.name,\n            this.owner.name,\n            STACK_TYPES.ENYO,\n            STACK_METHODS.EDIT,\n            inEvent.originator,\n            inEvent.originator.type,\n            this,\n            'levelReverseType'\n        );\n    },\n    // Undo type\n    levelReverseType: function(stack) {\n        stack.sender.reverseType(stack.value);\n    },\n    // Floor Input Change and Event undo\n    levelChange: function() {\n        this.updateIndicator();\n        this.checkMarkData();\n    },\n    // Update Level Input Value By Total Building Floor Area\n    updateLevelByTotalBuildingFloorArea: function() {\n        var inSender = this.inputFields.totalBuildingFloorArea;\n\n        if(!utils.isNumber(inSender.getValue()) || inSender.getValue() <= 0) {\n            for(var i = 0; i < this.$.Levels.children.length; i++) {\n                var child = this.$.Levels.children[i];\n                if(!child.removed) {\n                    child.onUpdate('');\n                }\n            }\n        } else {\n            this.updateGraphHack(inSender.getValue());\n\n            var value = Math.floor(inSender.getValue() * 1000 / this.$.Levels.length) / 1000;\n            for(var i = 0; i < this.$.Levels.children.length; i++) {\n                var child = this.$.Levels.children[i];\n                if(!child.removed) {\n                    child.onUpdate(value);\n                }\n            }\n        }\n    },\n    // Update Floor By Total\n    totalBuildingLevelsUpdate: function(total) {\n        total = parseInt(total);\n\n        if(this.$.Levels.length == total) {\n            return false;\n        } else if(this.$.Levels.length < total) {\n            while(this.$.Levels.length < total) {\n                this.actionButtons.addLevel.triggerHandler('ontap');\n            }\n        } else {\n            var sum = this.$.Levels.length - total;\n            for(var i = this.$.Levels.children.length - 1; i >= 0; i--) {\n                var child = this.$.Levels.children[i];\n                if(!child.removed) {\n                    child.removeInput();\n                    sum--;\n                    if(sum <= 0) break;\n                }\n            }\n        }\n\n        // Update value for each floor\n        this.updateLevelByTotalBuildingFloorArea();\n\n        // Check Value\n        this.levelChange();\n    },\n    // Check validation and update\n    totalBuildingLevelsValid: function() {\n        var val = this.inputFields.totalBuildingLevels.getValue();\n        if(!val || !utils.isNumber(val)) {\n            this.inputFields.totalBuildingLevels.setValue(this.inputFields.totalBuildingLevels.valueFocus);\n            return false;\n        }\n        val = parseInt(val);\n        if(val < 1 || 100 < val) {\n            this.inputFields.totalBuildingLevels.setValue(this.inputFields.totalBuildingLevels.valueFocus);\n            return false;\n        }\n        this.totalBuildingLevelsUpdate(val);\n        return true;\n    },\n    mechanicalValueChanged: function(inSender) {\n        switch(inSender.name) {\n            case 'UValueAreaInput':\n                if(!inSender.hasClass(this.project.uValueType)) {\n                    inSender.addClass(this.project.uValueType);\n                }\n                if(utils.isNumber(inSender.getValue())) {\n                    if(!inSender.hasClass('check')) {\n                        inSender.addClass('check');\n                        this.$.UValueGroupBox.setShowing(true);\n                    }\n                } else {\n                    if(inSender.hasClass('check')) {\n                        inSender.removeClass('check');\n                        this.$.UValueGroupBox.setShowing(false);\n                    }\n                }\n                this.project.uValueArea = inSender.getValue();\n                this.mechanicalFocus(inSender);\n                break;\n            case 'HeatingDesignDayInput':\n                this.project.heatingDesignDay = inSender.getValue();\n                break;\n            case 'CoolingDesignDayInput':\n                this.project.coolingDesignDay = inSender.getValue();\n                break;\n            case 'PickerDesignDay':\n                if(inSender.activator.getContent() == '99% DESIGN DAY') {\n                    this.project.pickerDesignDay = 99;\n                }\n                if(inSender.activator.getContent() == '99.6% DESIGN DAY') {\n                    this.project.pickerDesignDay = 99.6;\n                }\n                break;\n        }\n        // Check Value\n        this.checkMarkData();\n    },\n    mechanicalUnChanged: function(stack) {\n        if(stack.sender.name == 'UValueAreaInput') {\n            stack.sender.setValue(stack.value);\n            if(utils.isNumber(stack.value)) {\n                if(!stack.sender.hasClass('check')) {\n                    stack.sender.addClass('check');\n                    this.project.uValueArea = stack.value;\n                }\n            } else {\n                if(stack.sender.hasClass('check')) {\n                    stack.sender.removeClass('check');\n                    this.project.uValueArea = '';\n                }\n            }\n            this.mechanicalFocus(stack.sender);\n        }\n    },\n    mechanicalFocus: function(inSender) {\n        if(utils.isNumber(inSender.getValue())) {\n            if(this.project.uValueArea != undefined) {\n                this.$.UValueAreaCheck.setShowing(true);\n            }\n            this.$.UValueGroupBox.setShowing(true);\n        } else {\n            this.$.UValueAreaCheck.setShowing(false);\n            this.$.UValueGroupBox.setShowing(false);\n        }\n    },\n    uValueGroupButtonTap: function(inSender) {\n        if(this.$[inSender.input].hasClass(this.project.uValueType)) {\n            this.$[inSender.input].removeClass(this.project.uValueType);\n        }\n        if(this.$.UValueAreaCheck.hasClass(this.project.uValueType)) {\n            this.$.UValueAreaCheck.removeClass(this.project.uValueType);\n        }\n        var oldType = false;\n        if(inSender.name == 'ButtonEstimate') {\n            if(this.project.uValueType != FLOOR_TYPES.ESTIMATE) {\n                oldType = this.project.uValueType;\n            }\n            this.project.uValueType = FLOOR_TYPES.ESTIMATE;\n        } else if(inSender.name == 'ButtonAccurate') {\n            if(this.project.uValueType != FLOOR_TYPES.ACCURATE) {\n                oldType = this.project.uValueType;\n            }\n            this.project.uValueType = FLOOR_TYPES.ACCURATE;\n        }\n\n        if(!this.$[inSender.input].hasClass(this.project.uValueType)) {\n            this.$[inSender.input].addClass(this.project.uValueType);\n        }\n        if(!this.$.UValueAreaCheck.hasClass(this.project.uValueType)) {\n            this.$.UValueAreaCheck.addClass(this.project.uValueType);\n        }\n        // Add Stack\n        if(oldType) {\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.EDIT,\n                this.$[inSender.input],\n                oldType,\n                this,\n                'unChangeUValue'\n            );\n        }\n    },\n    unChangeUValue: function(stack) {\n        var oldType = stack.value;\n        var newType = stack.value;\n        if(oldType == FLOOR_TYPES.ACCURATE) {\n            newType = FLOOR_TYPES.ESTIMATE;\n        } else {\n            newType = FLOOR_TYPES.ACCURATE;\n        }\n        if(stack.sender.hasClass(newType)) {\n            stack.sender.removeClass(newType);\n        }\n        if(this.$.UValueAreaCheck.hasClass(newType)) {\n            this.$.UValueAreaCheck.removeClass(newType);\n        }\n        if(!stack.sender.hasClass(oldType)) {\n            stack.sender.addClass(oldType);\n        }\n        if(!this.$.UValueAreaCheck.hasClass(oldType)) {\n            this.$.UValueAreaCheck.addClass(oldType);\n        }\n        this.project.uValueType = oldType;\n    },\n    // Update indicator\n    updateIndicator: function() {\n        var total = 0;\n        var length = 0;\n        for(var i = 0; i < this.$.Levels.children.length; i++) {\n            var child = this.$.Levels.children[i];\n            if(!child.removed) {\n                total += (!utils.isNumber(child.value) ? 0 : parseFloat(child.value));\n                length++;\n            }\n        }\n        if(total == 0) {\n            total = '';\n        } else {\n            total = Math.floor(total * 1000) / 1000;\n        }\n        this.inputFields.totalBuildingFloorArea.setValue(total);\n        this.inputFields.totalBuildingLevels.setValue(length);\n    },\n    checkFloor: function() {\n        var percent = 0;\n        if(this.$.Levels.length == 0) {\n            if(this.$.FloorTitle.hasClass('check')) {\n                this.$.FloorTitle.removeClass('check');\n\n                // Hack to add breadcrumb percentage\n                // percent = PROGRESS['SETUP'];\n                // percent-=25;\n                // Signals.send('onProgress', {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, -25);\n                this.breadcrumbHack('SETUP_BUILDING_INFO', APP_PROGRESS.PR_SETUP_BUILDING_INFO, -25);\n                // END HACK\n            }\n            return false;\n        } else {\n            for(var i = 0; i < this.$.Levels.children.length; i++) {\n                var child = this.$.Levels.children[i];\n                if(!child.removed) {\n                    if(!utils.isNumber(child.getValue()) || child.getValue() == 0) {\n                        if(this.$.FloorTitle.hasClass('check')) {\n                            this.$.FloorTitle.removeClass('check');\n\n                            // Hack to add breadcrumb percentage\n                            // percent = PROGRESS['SETUP'];\n                            // percent-=25;\n                            // Signals.send('onProgress', {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                            this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, -25);\n                            this.breadcrumbHack('SETUP_BUILDING_INFO', APP_PROGRESS.PR_SETUP_BUILDING_INFO, -25);\n                            // END HACK\n                        }\n                        return false;\n                    }\n                }\n            }\n        }\n        if(!this.$.FloorTitle.hasClass('check')) {\n            // Hack to add breadcrumb percentage\n            // percent = PROGRESS['SETUP'];\n            // percent+=25;\n            // Signals.send('onProgress', {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n            this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, 25);\n            this.breadcrumbHack('SETUP_BUILDING_INFO', APP_PROGRESS.PR_SETUP_BUILDING_INFO, 25);\n            // END HACK\n\n            this.$.FloorTitle.addClass('check');\n        }\n        return true;\n    },\n    checkMechanical: function() {\n        var percent = 0;\n        if(!!this.project.uValueArea || (!!this.project.heatingDesignDay && !!this.project.coolingDesignDay && !!this.project.pickerDesignDay)) {\n            if(!this.$.MechanicalTitle.hasClass('check')) {\n                // Hack to add breadcrumb percentage\n                // percent = PROGRESS['SETUP'];\n                // percent+=25;\n                // Signals.send('onProgress', {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n                this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, 25);\n                this.breadcrumbHack('SETUP_BUILDING_INFO', APP_PROGRESS.PR_SETUP_BUILDING_INFO, 25);\n                // END HACK\n\n                this.$.MechanicalTitle.addClass('check');\n            }\n            return true;\n        }\n\n        if(this.$.MechanicalTitle.hasClass('check')) {\n            // Hack to add breadcrumb percentage\n            // percent = PROGRESS['SETUP'];\n            // percent-=25;\n            // Signals.send('onProgress', {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n\n            this.breadcrumbHack('SETUP', APP_PROGRESS.PR_SETUP, -25);\n            this.breadcrumbHack('SETUP_BUILDING_INFO', APP_PROGRESS.PR_SETUP_BUILDING_INFO, -25);\n            // END HACK\n\n            this.$.MechanicalTitle.removeClass('check');\n        }\n        return false;\n    },\n    checkMarkImport: function() {\n        var percent = 0;\n        var fileName = this.inputFields.fileName.getValue();\n        var files = this.inputFields.fileInput.files;\n        if(!!fileName && !!files) {\n            if(!this.$.ImportBuildingTitle.hasClass('check')) {\n                this.$.ImportBuildingTitle.addClass('check');\n            }\n            return true;\n        } else {\n            if(this.$.ImportBuildingTitle.hasClass('check')) {\n                this.$.ImportBuildingTitle.removeClass('check');\n            }\n            return false;\n        }\n    },\n    checkMarkData: function() {\n        if(this.checkFloor() && this.checkMechanical()) {\n            if(!this.$.BuildingDataTitle.hasClass('check')) {\n                this.$.BuildingDataTitle.addClass('check');\n            }\n        } else {\n            if(this.$.BuildingDataTitle.hasClass('check')) {\n                this.$.BuildingDataTitle.removeClass('check');\n            }\n        }\n    },\n    // Check mark for information\n    checkMark: function() {\n        var case1 = this.checkMarkImport();\n        var case2 = this.checkMarkData();\n        if(case1 && case2) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    // Save old value\n    oldValueChange: function(inSender) {\n//        if(inSender.kind == 'onyx.TextArea' || inSender.kind == 'onyx.Input') {\n        if(inSender instanceof TextArea || inSender instanceof Input) {\n            inSender.oldValue = inSender.getValue();\n        }\n    },\n    // Save old\n    onSaveFocus: function(inSender) {\n        if(inSender.name === 'UValueAreaInput') {\n            this.mechanicalFocus(inSender);\n        }\n        var value = inSender.getValue();\n        if(typeof value === 'string') {\n            value = value.trim();\n        }\n        inSender.valueFocus = value;\n        inSender.isFocus = true;\n    },\n    // Save in progress\n    onSaveKeyDown: function(inSender, inEvent) {\n        if(inEvent.keyCode === 13) {\n            var currentValue = inSender.getValue();\n            if(typeof currentValue === 'string') {\n                currentValue = currentValue.trim();\n            }\n            if(inSender.isFocus && inSender.valueFocus != currentValue) {\n                if(inSender.name === 'UValueAreaInput') {\n                    STACK_LIST.addStack(\n                        this.owner.name,\n                        this.owner.name,\n                        STACK_TYPES.ENYO,\n                        STACK_METHODS.EDIT,\n                        inSender,\n                        inSender.valueFocus,\n                        this,\n                        'mechanicalUnChanged'\n                    );\n                } else if(inSender.name === 'TotalBuildingLevels') {  // Change TotalBuildingLevels\n                    this.totalBuildingLevelsValid();\n                } else {\n                    STACK_LIST.addStack(\n                        this.owner.name,\n                        this.owner.name,\n                        STACK_TYPES.ENYO,\n                        STACK_METHODS.EDIT,\n                        inSender,\n                        inSender.valueFocus\n                    );\n                }\n                inSender.valueFocus = currentValue;\n            }\n        }\n    },\n    // Save to stack\n    onSaveChange: function(inSender) {\n        if(inSender.isFocus) {\n            if(inSender.name === 'UValueAreaInput') {\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    inSender,\n                    inSender.valueFocus,\n                    this,\n                    'mechanicalUnChanged'\n                );\n            } else if(inSender.name === 'TotalBuildingLevels') {  // Change TotalBuildingLevels\n                this.totalBuildingLevelsValid();\n            } else {\n                STACK_LIST.addStack(\n                    this.owner.name,\n                    this.owner.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.EDIT,\n                    inSender,\n                    inSender.valueFocus\n                );\n            }\n            inSender.isFocus = false;\n        }\n    },\n    undo: function(stack) {\n\n    }\n});\n","//\n\nvar kind = require('enyo/kind'),\n    bind = require('enyo/utils').bind;\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Drawer = require('onyx/Drawer'),\n    Grabber = require('onyx/Grabber'),\n    Button = require('onyx/Button'),\n    IconButton = require('onyx/IconButton'),\n    Input = require('onyx/Input'),\n    Picker = require('onyx/Picker'),\n    PickerButton = require('onyx/PickerButton'),\n    PickerDecorator = require('onyx/PickerDecorator'),\n    Scroller = require('enyo/Scroller'),\n    Signals = require('enyo/Signals'),\n    Animator = require('enyo/Animator'),\n    plSiteInput = require('./input'),\n    plSiteListSettingContent = require('./list-setting-content.js'),\n    plSiteSensor = require('./sensor.js');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nvar siteGraphic = require('../../../views/progress/site/graphic.js');\n\nmodule.exports = kind({\n    name: 'pl.site.ListSetting',\n    kind: FittableColumns,\n    classes: 'zone-list-setup',\n    events: {\n        onFloorTap: '',\n        onZoneTap: '',\n        onZoneSetting: ''\n    },\n    components: [\n        { name: 'FloorSetting', kind: FittableRows, classes: 'floor-setting', components: [\n            { name: 'FloorSettingContent', classes: 'menu-bar', fit: true },\n            { name: 'FloorSettingFooter', kind: FittableColumns, classes: 'footer border-right', components: [\n                { name:'Collapsing', kind: Grabber, attributes: {title: 'Collapsing'}, classes: 'bt bt-collapsing',\n                    ontap: 'toggleFullScreen',\n                    ondragstart: 'toggleFullScreen',\n                    ondragfinish: 'toggleFullScreen'\n                },\n                { classes: 'action', components:[\n                    {kind: IconButton, classes: 'btn btn-add-new', ontap: 'zoneAdd'}\n                ]}\n            ]}\n        ]},\n        { name: 'ZoneSetting', kind: FittableRows, showing: false, classes: 'room-setting box-shadow', components: [\n            { name: 'ZoneSettingContent', kind: FittableRows, classes: 'border-left', style: 'width:100%;height:100%;overflow:hidden;', fit: true, components: [\n                { name: 'ZoneSettingName', classes: 'sub-menu-title', components: [\n                    {name: 'ZoneName', content: 'KITCHEN SENSOR LIST', style: 'width:100%;height:100%;', fit: true},\n                    {name: 'ZoneSettingClose', classes: 'sub-menu-close', attributes: {title: 'Close'}, ontap: 'zoneSettingClose'}\n                ]},\n                { name: 'SensorList', kind: FittableRows, fit: true, classes: 'sub-menu-content' },\n                { name: 'SensorOption', kind: FittableRows, showing: false, classes: 'border-left sub-menu-option', style: 'height:100%;', components: [\n                    { name: 'SensorName', classes: 'heading-title', content: 'TEMPERATURE SENSOR', onclick: 'offSensorOption'},\n                    { name: 'TemperatureSensor', kind: FittableRows, classes: 'content', components: [\n                        { classes: 'title', content: 'SENSOR OPTIONS'},\n                        { kind: PickerDecorator, onChange: 'sensorHandleOption', components: [\n                            { name: 'SensorOptionOpt', kind: PickerButton, classes: 'option', content: '10k RTD'},\n                            { kind: Picker, components: [\n                                { content: '10k RTD'},\n                                { content: '10k RTD'},\n                                { content: '10k RTD'}\n                            ]}\n                        ]},\n                        { classes: 'drawer-advanced-header', content: 'ADVANCED OPTIONS', drawer: 'advancedOptions', ontap: 'optionDrawer'},\n                        { name: 'advancedOptions', kind: Drawer, open: true, classes: 'drawer-advanced-options', components: [\n                            { classes: 'row1', components: [\n                                { classes: 'input-name', content: 'Coefficient A'},\n                                { name: 'SensorOptionCoefficientA', kind: Input, placeholder: 'default value', oninput: 'sensorHandleOption'}\n                            ]},\n                            { classes: 'row2', components: [\n                                { classes: 'input-name', content: 'Coefficient B'},\n                                { name: 'SensorOptionCoefficientB', kind: Input, placeholder: 'default value', oninput: 'sensorHandleOption'}\n                            ]}\n                        ]}\n                    ]}\n                ]},\n                { name: 'SensorLine', kind: FittableColumns, showing: false, classes: 'sensor-line', components: [\n                    { name: 'SensorBegin', classes: 'begin' },\n                    { name: 'SensorEnd', classes: 'line' }\n                ]}\n            ]},\n            { name: 'ZoneSettingFooter', classes: 'footer' },\n            { kind: Signals, onSiteMenu: 'onSiteMenu' }\n        ]}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n        // Variables\n        this.project = {};\n        this.floors = [];\n\n        this.currentFloorId = -1;\n        this.currentZoneId = -1;\n        this.currentSensorKey = -1;\n        this.oldFloorId = -1;\n        this.oldZoneId = -1;\n        \n        // Tests to see if add zone is clicked for the first time \n        this.ZoneListBullshit = true;\n\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.dimension();\n\n        // Disable option\n        this.sensorHideOption();\n    },\n    dimension: function() {\n        this.maxHeight = utils.getCSSProperty(this.$.FloorSettingContent, 'offsetHeight', false);\n        this.$.FloorSettingContent.applyStyle('width', TOOLBARS.SITE_BUILDER / 2 + 'px');\n        this.$.FloorSettingFooter.applyStyle('width', TOOLBARS.SITE_BUILDER / 2 + 'px');\n        // Option Fix\n        this.zoneSettingNameHeight = utils.getCSSProperty(this.$.ZoneSettingName, 'offsetHeight', false);\n        this.zoneSettingContentHeight = utils.getCSSProperty(this.$.ZoneSettingContent, 'offsetHeight', false);\n        this.sensorListHeight = this.zoneSettingContentHeight - this.zoneSettingNameHeight;\n        this.$.SensorList.applyStyle('height', this.sensorListHeight + 'px');\n    },\n    onSiteMenu: function(inSender, inEvent) {\n        if(inEvent.method === STACK_METHODS.CREATE) {\n            this.sensorAdd({\n                floorId: inEvent.vals.floorId,\n                zoneId: inEvent.vals.zoneId,\n                sensorId: inEvent.sensorId,\n                name: inEvent.name,\n                classes: inEvent.classes,\n                kind: inEvent.kind,\n                type: inEvent.type,\n                url: inEvent.url,\n                w: inEvent.w,\n                h: inEvent.h,\n                color: inEvent.vals.color,\n                objectSensor: inEvent.objectSensor\n            }, 'addToSVG');\n        } else if(inEvent.method === STACK_METHODS.DELETE) {\n            this.sensorRemove({\n                floorId: inEvent.vals.floorId,\n                zoneId: inEvent.vals.zoneId,\n                sensorId: inEvent.sensorId\n            });\n        } else if(inEvent.method === STACK_METHODS.TAP) {\n            if(this.currentZoneId !== inEvent.vals.zoneId) {\n                this.$['Zone_' + inEvent.vals.floorId + '_' + inEvent.vals.zoneId].triggerHandler('ontap');\n            }\n        } else if(inEvent.method === STACK_METHODS.MOVE) { // Change zone parent for sensor in floor\n            this.sensorChangeParent(inEvent);\n        }\n    },\n    init: function(data) {\n        this.project = data;\n        this.floors = data.floors;\n\n        // Destroy if exist\n        this.$.FloorSettingContent.destroyClientControls();\n\n        // Init Floors\n        var floor, zone, zoneChildren;\n        for(var index = 0; index < this.floors.count; index++) {\n            floor = this.floors.item(index);\n            zoneChildren = new Array();\n            for(var i = 0; i < floor.zones.length; i++) {\n                zone = floor.zones.item(i);\n                zoneChildren.push({\n                    name: 'Zone_' + floor.id + '_' + zone.id,\n                    kind: plSiteInput,\n                    tag: 'li',\n                    floorId: floor.id,\n                    zoneId: zone.id,\n                    classes: i % 2 == 0 ? 'even' : 'odd',\n                    zoneObject: zone,\n                    value: zone.name,\n                    color: zone.color,\n                    ontap: 'zoneTap',\n                    ondblclick: 'zoneDblClick',\n                    onChanged: 'zoneChanged',\n                    onDelete: 'zoneRemove'\n                });\n            }\n            this.$.FloorSettingContent.createComponent({\n                name: 'Floor_' + floor.id,\n                floorId: floor.id,\n                components: [\n                    {\n                        name: 'Floor_' + floor.id + '_Name',\n                        classes: 'title',\n                        floorId: floor.id,\n                        ontap: 'floorTap',\n                        //content: (index == 0 ? 'outdoor zone' : utils.getOrdinal(index) + ' FLOOR ZONES'),\n                        content: floor.name\n                    },\n                    {\n                        name: 'Floor_' + floor.id + '_Drawer',\n                        kind: Drawer,\n                        floorId: floor.id,\n                        open: false,\n                        animated: true,\n                        onDrawerAnimationEnd: 'floorDrawerEnd',\n                        classes: 'floor-content',\n                        components: [\n                            {\n                                name: 'Floor_' + floor.id + '_Content',\n                                kind: plSiteListSettingContent,\n                                tag: 'ul',\n                                //kind: Scroller,\n                                //touch: true,\n                                //horizontal: 'hidden',\n                                //style: 'max-height:' + (this.maxHeight - this.floors.count * 31) + 'px',\n                                components: zoneChildren\n                            }\n                        ]\n                    }\n                ]\n            }, {owner: this});\n        }\n        this.render();\n\n        // Selected default\n        //if(floor) {\n        //    this.floorSelect(floor.id);\n        //    this.currentFloorId = floor.id;\n        //\n        //    if(floor.zones.count > 0) {\n        //        this.currentZoneId = floor.zones.item(0).id;\n        //        this.zoneSelect(floor.zones.item(0).id);\n        //        this.zoneSettingShow(true);\n        //    }\n        //}\n    },\n    toggleFullScreen: function() {\n        console.log(\"here\");\n        this.turnOnPanel = this.turnOnPanel != undefined ? !!this.turnOnPanel : false;\n        if(this.currentZoneId != undefined && this.currentZoneId != -1) {\n            this.zoneSettingShow(!this.turnOnPanel);\n        } else {\n            this.zoneSettingShow(false);\n        }\n    },\n    floorDrawerEnd: function(inSender) {\n        inSender.applyStyle('overflow', 'visible');\n    },\n    floorSelect: function(floorId) {\n        // Remove the selection on the previously selected item\n        if(!!this.$['Floor_' + this.currentFloorId] && this.currentFloorId !== floorId) {\n            // Add Floor Style\n            this.$['Floor_' + this.currentFloorId + '_Drawer'].applyStyle('overflow', 'hidden');\n            this.$['Floor_' + this.currentFloorId + '_Name'].removeClass('selected');\n            if(this.$['Floor_' + this.currentFloorId + '_Drawer'].getOpen()) {\n                this.$['Floor_' + this.currentFloorId + '_Drawer'].setOpen(false);\n            }\n\n            // Backup\n            this.$['Floor_' + this.currentFloorId + '_Name'].currentZoneId = this.currentZoneId;\n            this.$['Floor_' + this.currentFloorId + '_Name'].oldZoneId = this.oldZoneId;\n        }\n        // If item exist then select it\n        if(!!this.$['Floor_' + floorId]) {\n            // Add Floor Style\n            this.$['Floor_' + floorId + '_Drawer'].applyStyle('overflow', 'hidden');\n            this.$['Floor_' + floorId + '_Name'].addClass('selected');\n            if(!this.$['Floor_' + floorId + '_Drawer'].getOpen()) {\n                this.$['Floor_' + floorId + '_Drawer'].setOpen(true);\n            }\n        }\n    },\n    floorTap: function(inSender) {\n        // Add Stack List\n        STACK_LIST.addStack(\n            this.owner.name,\n            this.owner.name,\n            STACK_TYPES.ENYO,\n            STACK_METHODS.DEFAULT,\n            undefined,\n            {\n                oldFloorId: this.oldFloorId,\n                floorId: this.currentFloorId\n            },\n            this,\n            'floorTapCallBack'\n        );\n\n        if(this.currentFloorId === inSender.floorId) { // Disable if ready\n            this.floorSelect(-1);\n\n            // Update available\n            this.oldFloorId = this.currentFloorId;\n            this.oldZoneId = this.currentZoneId;\n            this.currentFloorId = -1;\n            this.currentZoneId = -1;\n        } else {\n            this.floorSelect(inSender.floorId);\n\n            // Update available\n            this.oldFloorId = this.currentFloorId;\n            this.currentFloorId = inSender.floorId;\n\n            this.oldZoneId = inSender.oldZoneId;\n            this.currentZoneId = inSender.currentZoneId;\n        }\n\n        // Check select default zone and restore if select floor\n        if(!!this.$['Zone_' + this.currentFloorId + '_' + inSender.currentZoneId]) {\n            this.$['Zone_' + this.currentFloorId + '_' + inSender.currentZoneId].isfloorTap = true;\n            this.$['Zone_' + this.currentFloorId + '_' + inSender.currentZoneId].triggerHandler('ontap');\n        } else {\n            this.zoneSettingClose(); // Close panel\n        }\n\n        this.doFloorTap({floorId: this.currentFloorId});\n    },\n    floorTapCallBack: function(values) {\n        this.floorSelect(values.floorId);\n\n        // Update available\n        this.currentFloorId = values.floorId;\n        this.oldFloorId = values.oldFloorId;\n\n        if(!!this.$['Floor_' + this.currentFloorId + '_Name']) {\n            this.currentZoneId = this.$['Floor_' + this.currentFloorId + '_Name'].currentZoneId;\n            this.oldZoneId = this.$['Floor_' + this.currentFloorId + '_Name'].oldZoneId;\n        } else {\n            this.currentZoneId = -1;\n            this.oldZoneId = -1;\n        }\n\n        // Check select default zone and restore if select floor\n        if(!!this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId]) {\n            this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId].isfloorTap = true;\n            this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId].triggerHandler('ontap');\n        } else {\n            this.zoneSettingClose(); // Close panel\n        }\n\n        this.doFloorTap({floorId: this.currentFloorId});\n    },\n    // Undo if floorTap\n    floorCallBack: function(floorId) {\n        this.$['Floor_' + floorId + '_Name'].isCallBack = true;\n        this.$['Floor_' + floorId + '_Name'].triggerHandler('ontap');\n    },\n    zoneSettingShow: function(flag) {\n        this.turnOnPanel = flag;\n\n        if(this.flagPullOut !== flag) {\n            this.flagPullOut = flag;\n            this.$.ZoneSetting.setShowing(flag);\n            this.$.ZoneSetting.render();\n            if(flag == false) {\n                this.currentSensorKey = -1;\n            }\n            this.doZoneSetting({open: flag});\n        }\n    },\n    zoneSettingClose: function() {\n        this.zoneSettingShow(false);\n    },\n    zoneAdd: function(inSender) {\n        if(this.currentFloorId > -1) {\n            // Button Disable\n            inSender.disabled = true;\n\n            var floorObject = this.floors.itemByID(this.currentFloorId);\n\n            var fillColor = this.owner.fillColor ? this.owner.fillColor : SITE_SETTING.fillColor;\n            this.fillColor = utils.colorHsvIncrementing(fillColor, SITE_SETTING.hue, SITE_SETTING.saturation, SITE_SETTING.brightness);\n\n            // Add to plZoneList\n            var zone = new ZONE(\n                this.currentFloorId,\n                'Zone ' + (floorObject.zones.count + 1),\n                this.fillColor\n            );\n\n            plZoneList.add(zone, true);\n            // Add to plProject\n            floorObject.zones.add(zone);\n\n            // Render Node\n            var node = this.$['Floor_' + this.currentFloorId + '_Content'].createComponent({\n                name: 'Zone_' + this.currentFloorId + '_' + zone.id,\n                kind: plSiteInput,\n                tag: 'li',\n                floorId: this.currentFloorId,\n                zoneId: zone.id,\n                oldZoneId: this.oldZoneId,\n                currentZoneId: this.currentZoneId,\n                classes: this.$['Floor_' + this.currentFloorId + '_Content'].children.length % 2 == 0 ? 'even' : 'odd',\n                zoneObject: zone,\n                value: 'Zone ' + (floorObject.zones.count),\n                color: zone.color,\n                ontap: 'zoneTap',\n                ondblclick: 'zoneDblClick',\n                onChanged: 'zoneChanged',\n                onDelete: 'zoneRemove'\n            }, {owner: this});\n\n            node.render();\n            //node.scrollToBottom();\n\n            // Select zone\n            node.isAddNew = true;\n            node.triggerHandler('ontap');\n\n            // Add Stack List\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.CREATE,\n                node,\n                undefined,\n                this,\n                'zoneRemoveCallBack'\n            );\n\n            // Waiting tapHandler - Pass onCheckInput\n            setTimeout(function() {\n                // Enable node input\n                node.setEnable();\n\n                // Button Enable\n                inSender.disabled = false;\n            }, 200);\n        }\n        \n        // Automatically opens the zone panel when a new zone is added\n        this.turnOnPanel = true;\n        this.zoneSettingShow(true);\n        this.ZoneListBullshit = false;\n    },\n    zoneChanged: function(inSender, inEvent) {\n        // Update Floor\n        var floorObject = this.floors.itemByID(inSender.floorId);\n        var zoneObject = floorObject.zones.itemByID(inSender.zoneId);\n        zoneObject.name = inEvent.value;\n        // Update Zone Name\n        this.$.ZoneName.setContent(inEvent.value);\n\n        // Make zone list reorder-able\n        floorObject.zones.sortAlphabet('name');\n        this.$['Floor_' + inSender.floorId + '_Content'].sortAlphabet();\n    },\n    zoneRemove: function(inSender) {\n        // Remove from list store\n        this.floors.itemByID(inSender.floorId).zones.removeById(inSender.zoneId);\n        // Destroy\n        inSender.destroy();\n    },\n    zoneRemoveCallBack: function(inSender) {\n        this.currentZoneId = inSender.currentZoneId;\n        this.oldZoneId = inSender.oldZoneId;\n\n        this.zoneSelect(inSender.currentZoneId);\n\n        // Remove from list store\n        this.floors.itemByID(inSender.floorId).zones.removeById(inSender.zoneId);\n        // Destroy\n        inSender.destroy();\n    },\n    zoneSelect: function(zoneId) {\n        if(!!this.$['Zone_' + this.currentFloorId + '_' + zoneId]) {\n            // Set zone name\n            this.$.ZoneName.setContent(this.$['Zone_' + this.currentFloorId + '_' + zoneId].value);\n            this.zoneActiveCurrent();\n        } else {\n            this.zoneSettingShow(false);\n        }\n    },\n    zoneActiveCurrent: function() {\n        // Remove Class\n        if(!!this.floors.itemByID(this.oldFloorId) && this.floors.itemByID(this.oldFloorId).zones.count > 0) {\n            for(var i = 0; i < this.floors.itemByID(this.oldFloorId).zones.count; i++) {\n                var zone = this.floors.itemByID(this.oldFloorId).zones.item(i);\n                if(this.$['Zone_' + this.oldFloorId + '_' + zone.id].hasClass('active')) {\n                    this.$['Zone_' + this.oldFloorId + '_' + zone.id].removeClass('active');\n                }\n            }\n        }\n        // Active Class\n        if(!!this.floors.itemByID(this.currentFloorId) && this.floors.itemByID(this.currentFloorId).zones.count > 0) {\n            for(var i = 0; i < this.floors.itemByID(this.currentFloorId).zones.count; i++) {\n                var zone = this.floors.itemByID(this.currentFloorId).zones.item(i);\n                if(this.$['Zone_' + this.currentFloorId + '_' + zone.id].hasClass('active')) {\n                    this.$['Zone_' + this.currentFloorId + '_' + zone.id].removeClass('active');\n                }\n            }\n            if(!this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId].hasClass('active')) {\n                this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId].addClass('active');\n            }\n            // Destroy Sensor List\n            this.$.SensorList.destroyClientControls();\n            // Add Sensor\n            for(var i = 0, sensor; sensor = this.floors.itemByID(this.currentFloorId).zones.itemByID(this.currentZoneId).sensors.item(i); i++) {\n                this.$.SensorList.createComponent({\n                    name: 'Sensor_' + this.currentFloorId + '_' + this.currentZoneId + '_' + sensor.id,\n                    kind: plSiteSensor,\n                    title: sensor.name,\n                    url: sensor.url,\n                    floorId: this.currentFloorId,\n                    zoneId: this.currentZoneId,\n                    sensorKey: sensor.id,\n                    sensorId: sensor.sensorId,\n                    onSelect: 'sensorEnableOption',\n                    onRemove: 'sensorRemove'\n                }, {owner: this});\n            }\n            this.$.SensorList.render();\n            // Hide option\n            this.sensorDisableOption();\n        }\n    },\n    zoneTap: function(inSender, inEvent) {\n        // Add Stack List\n        if(inSender.isfloorTap !== true && inSender.isAddNew !== true && inSender.isCallBack !== true) {\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.DEFAULT,\n                inSender,\n                {\n                    currentZoneId: this.currentZoneId,\n                    oldZoneId: this.oldZoneId\n                },\n                this,\n                'zoneTapCallBack'\n            );\n        }\n\n        if(inSender.isCallBack !== true) {\n            this.oldZoneId = this.currentZoneId;\n            this.currentZoneId = inSender.zoneId;\n        }\n\n        this.$.ZoneName.setContent(inSender.value);\n\n        this.zoneActiveCurrent();\n        this.sensorDisableOption();\n\n        // Backup\n        this.$['Floor_' + this.currentFloorId + '_Name'].currentZoneId = inSender.zoneId;\n        this.$['Floor_' + this.currentFloorId + '_Name'].oldZoneId = inSender.oldZoneId;\n\n        // Send Current Zone Info\n        this.doZoneTap({\n            floorId: inSender.floorId,\n            zoneId: inSender.zoneId,\n            color: inSender.color,\n            sender: inSender\n        });\n\n        delete inSender.isfloorTap;\n        delete inSender.isAddNew;\n        delete inSender.isCallBack;\n    },\n    zoneTapCallBack: function(values) {\n        this.currentZoneId = values.currentZoneId;\n        this.oldZoneId = values.oldZoneId;\n\n        this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId].isCallBack = true;\n        this.$['Zone_' + this.currentFloorId + '_' + this.currentZoneId].triggerHandler('ontap');\n    },\n    zoneExisting: function(floorId, zoneId) {\n        return !!this.$['Zone_' + floorId + '_' + zoneId];\n    },\n    // Show Panel List\n    zoneDblClick: function(inSender) {\n        //this.zoneSettingShow(true);\n    },\n    sensorAdd: function(data, type) {\n        if(data.floorId === this.currentFloorId) {\n            var zones = this.floors.itemByID(data.floorId).zones.itemByID(data.zoneId),\n                sensors = zones.sensors;\n            var sensor = new SENSOR(\n                data.sensorId,\n                data.zoneId,\n                this.currentFloorId,\n                data.name,\n                data.classes,\n                data.kind,\n                data.type,\n                66,\n                data.url\n            );\n\n            plSensorList.add(sensor, true);\n            this.currentSensorKey = sensor.id;\n\n            // Add sensor\n            sensors.add(sensor);\n\n            // Draw\n            var objectSensor, node;\n            if(type === 'addToList') { // Drag to SensorList\n                if((objectSensor = siteGraphic.createSensor2({\n                        floorId: data.floorId,\n                        zoneId: data.zoneId,\n                        sensorId: data.sensorId,\n                        name: data.name,\n                        classes: data.classes,\n                        kind: data.kind,\n                        type: data.type,\n                        url: data.url,\n                        w: data.w,\n                        h: data.h\n                    }))) {\n                    if(data.zoneId === this.currentZoneId) {\n                        node = this.$.SensorList.createComponent({\n                            name: 'Sensor_' + this.currentFloorId + '_' + data.zoneId + '_' + this.currentSensorKey,\n                            kind: plSiteSensor,\n                            title: sensor.name,\n                            url: sensor.url,\n                            floorId: this.currentFloorId,\n                            zoneId: data.zoneId,\n                            sensorId: sensor.sensorId,\n                            sensorKey: sensor.id,\n                            objectSensor: objectSensor,\n                            onSelect: 'sensorEnableOption',\n                            onRemove: 'sensorRemove'\n                        }, {owner: this});\n\n                        this.$.SensorList.render();\n                    }\n                }\n            } else if(type === 'addToSVG') {  // Drag to SVG\n                objectSensor = data.objectSensor;\n                if(data.zoneId === this.currentZoneId) {\n                    node = this.$.SensorList.createComponent({\n                        name: 'Sensor_' + this.currentFloorId + '_' + data.zoneId + '_' + this.currentSensorKey,\n                        kind: plSiteSensor,\n                        title: sensor.name,\n                        url: sensor.url,\n                        floorId: this.currentFloorId,\n                        zoneId: data.zoneId,\n                        sensorId: sensor.sensorId,\n                        sensorKey: sensor.id,\n                        objectSensor: objectSensor,\n                        onSelect: 'sensorEnableOption',\n                        onRemove: 'sensorRemove'\n                    }, {owner: this});\n\n                    this.$.SensorList.render();\n                }\n            }\n\n            // Add Stack List\n            STACK_LIST.addStack(\n                this.owner.name,\n                this.owner.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.DEFAULT,\n                node,\n                {\n                    floorId: data.floorId,\n                    zoneId: data.zoneId,\n                    sensorKey: sensor.id,\n                    sensorId: sensor.sensorId,\n                    objectSensor: objectSensor\n                },\n                this,\n                'sensorAddCallBack'\n            );\n        }\n    },\n    sensorAddCallBack: function(values) {\n        // Remove Form Store List\n        if(this.floors.itemByID(values.floorId).zones.itemByID(values.zoneId)) {\n            this.floors.itemByID(values.floorId).zones.itemByID(values.zoneId).sensors.removeById(values.sensorKey);\n        }\n        plSensorList.removeById(values.sensorKey);\n\n        // Remove SVG Object\n        siteGraphic.removeSensorByObject(values.objectSensor);\n\n        // Remove sensor from list\n        if(values.floorId == this.currentFloorId && values.zoneId == this.currentZoneId) {\n            for(var i = 0; i < this.$.SensorList.children.length; i++) {\n                if(this.$.SensorList.children[i].sensorKey === values.sensorKey) {\n                    this.$.SensorList.children[i].destroy();\n                    break;\n                }\n            }\n\n            this.$.SensorList.render();\n        }\n\n        // Hide option\n        this.sensorDisableOption();\n    },\n    sensorRemove: function(inSender, inEvent) {\n        var floorId = this.currentFloorId,\n            zoneId = this.currentZoneId,\n            sensorId;\n        if(inSender.floorId != undefined) {\n            floorId = inSender.floorId;\n        }\n        if(inSender.zoneId != undefined) {\n            zoneId = inSender.zoneId;\n        }\n        if(inSender.sensorId != undefined) {\n            sensorId = inSender.sensorId;\n        }\n        if(sensorId != undefined) {\n            // Remove sensor from store\n            for(var i = 0; i < this.floors.itemByID(floorId).zones.itemByID(zoneId).sensors.count; i++) {\n                var sensor = this.floors.itemByID(floorId).zones.itemByID(zoneId).sensors.item(i);\n                if(sensor.sensorId == sensorId) {\n                    this.floors.itemByID(floorId).zones.itemByID(zoneId).sensors.remove(sensor);\n                    break;\n                }\n            }\n\n            // Remove sensor from list\n            if(floorId == this.currentFloorId && zoneId == this.currentZoneId) {\n                for(var i = 0; i < this.$.SensorList.children.length; i++) {\n                    if(this.$.SensorList.children[i].sensorId === sensorId) {\n                        this.$.SensorList.children[i].destroy();\n                        break;\n                    }\n                }\n                this.$.SensorList.render();\n            }\n\n            // Hide option\n            this.sensorDisableOption();\n\n            // Remove sensor from panel => Remove SVG and add to Stack list\n            if(!!inEvent) {\n                siteGraphic.removeSensorByOption({\n                    floorId: floorId,\n                    zoneId: zoneId,\n                    sensorId: sensorId\n                });\n            }\n        }\n    },\n    // Change zone parent for sensor in floor\n    sensorChangeParent: function(option) {\n        var sensorId = option.sensorId,\n            from = option.from,\n            to = option.to,\n            sensor;\n\n        var formZones = this.floors.itemByID(from.floorId).zones.itemByID(from.zoneId);\n        var toZones = this.floors.itemByID(to.floorId).zones.itemByID(to.zoneId);\n\n        // Remove From List\n        for(var i = 0; i < formZones.sensors.count; i++) {\n            if(formZones.sensors.item(i).sensorId === sensorId) {\n                sensor = formZones.sensors.item(i);\n                formZones.sensors.remove(sensor);\n                break;\n            }\n        }\n\n        if(!!sensor) {\n            // Remove sensor from list\n            if(from.floorId == this.currentFloorId && from.zoneId == this.currentZoneId) {\n                for(var i = 0; i < this.$.SensorList.children.length; i++) {\n                    if(this.$.SensorList.children[i].sensorId === sensor.sensorId) {\n                        this.$.SensorList.children[i].destroy();\n                        break;\n                    }\n                }\n\n                this.$.SensorList.render();\n            }\n\n            // Add sensor to list\n            if(to.floorId == this.currentFloorId && to.zoneId == this.currentZoneId) {\n                this.$.SensorList.createComponent({\n                    name: 'Sensor_' + this.currentFloorId + '_' + this.zoneId + '_' + sensor.id,\n                    kind: plSiteSensor,\n                    title: sensor.name,\n                    url: sensor.url,\n                    floorId: this.currentFloorId,\n                    zoneId: this.currentZoneId,\n                    sensorId: sensor.sensorId,\n                    sensorKey: sensor.id,\n                    onSelect: 'sensorEnableOption',\n                    onRemove: 'sensorRemove'\n                }, {owner: this});\n\n                this.$.SensorList.render();\n            }\n\n            // Add New parent\n            toZones.sensors.add(sensor);\n        }\n    },\n    sensorUpdateOption: function(option) {\n        this.$.SensorOptionOpt.setContent(option.opt);\n        this.$.SensorOptionCoefficientA.setValue(option.coefficientA);\n        this.$.SensorOptionCoefficientB.setValue(option.coefficientB);\n    },\n    sensorHandleOption: function(inSender, inEvent) {\n        var sensors = this.floors.itemByID(this.currentFloorId).zones.itemByID(this.currentZoneId).sensors,\n            sensor;\n        for(var i = 0; i < sensors.count; i++) {\n            if(sensors.item(i).id === this.currentSensorKey) {\n                sensor = sensors.item(i);\n                break;\n            }\n        }\n        if(!!sensor) {\n            switch(inSender.name) {\n                case 'pickerDecorator':\n                    sensor.option.opt = inSender.activator.content;\n                    break;\n                case 'SensorOptionCoefficientA':\n                    sensor.option.coefficientA = inSender.getValue();\n                    break;\n                case 'SensorOptionCoefficientB':\n                    sensor.option.coefficientB = inSender.getValue();\n                    break;\n            }\n        }\n    },\n    // Add Active Class\n    sensorActiveCurrent: function() {\n        for(var i = 0; i < this.$.SensorList.children.length; i++) {\n            if(this.$.SensorList.children[i].sensorKey === this.currentSensorKey) {\n                if(!this.$.SensorList.children[i].hasClass('active')) {\n                    this.$.SensorList.children[i].addClass('active');\n                }\n            } else {\n                if(this.$.SensorList.children[i].hasClass('active')) {\n                    this.$.SensorList.children[i].removeClass('active');\n                }\n            }\n        }\n    },\n    sensorEnableOption: function(inSender) {\n        this.currentSensorKey = inSender.sensorKey;\n        this.$.SensorName.setContent(inSender.title);\n        var sensors = this.floors.itemByID(inSender.floorId).zones.itemByID(inSender.zoneId).sensors,\n            sensor,\n            index = 0;\n        for(var i = 0; i < sensors.count; i++) {\n            if(sensors.item(i).id === inSender.sensorKey) {\n                sensor = sensors.item(i);\n                index = i;\n                break;\n            }\n        }\n        if(!!sensor) {\n            this.sensorUpdateOption(sensor.option);\n            this.sensorActiveCurrent();\n            // Option Animation\n            this.$.SensorOption.show();\n            var optionAni = new Animator({\n                duration: 500,\n                startValue: 0,\n                endValue: 300,\n                onStep: bind(this, function(data) {\n                    this.$.SensorOption.applyStyle('top', Math.floor(this.zoneSettingContentHeight - data.value) + 'px');\n                }),\n                onEnd: bind(this, function() {\n                })\n            });\n            optionAni.play();\n            // Line Animation\n            var itemHeight = utils.getCSSProperty(inSender, 'offsetHeight', false);\n            var itemTop = itemHeight * index + itemHeight / 3;\n            var sensorLineTop = Math.floor(this.zoneSettingNameHeight + itemTop);\n            this.$.SensorLine.applyStyle('height', '0px');\n            this.$.SensorLine.applyStyle('top', sensorLineTop + 'px');\n            this.$.SensorLine.show();\n            var lineAni = new Animator({\n                duration: 500,\n                startValue: 0,\n                endValue: Math.floor(this.zoneSettingContentHeight - 300),\n                onStep: bind(this, function(data) {\n                    this.$.SensorLine.applyStyle('height', data.value + 'px');\n                }),\n                onEnd: bind(this, function() {\n                })\n            });\n            lineAni.play();\n        }\n    },\n    sensorDisableOption: function() {\n        // Available\n        var optionTop = utils.getCSSProperty(this.$.SensorOption, 'offsetTop', false);\n        var optionHeight = utils.getCSSProperty(this.$.SensorOption, 'offsetHeight', false);\n        var lineHeight = utils.getCSSProperty(this.$.SensorLine, 'offsetHeight', false);\n\n        // Option Animation\n        var optionAni = new Animator({\n            duration: 200,\n            startValue: optionTop,\n            endValue: optionHeight,\n            onStep: bind(this, function(data) {\n                this.$.SensorOption.applyStyle('top', data.value + 'px');\n            }),\n            onEnd: bind(this, function() {\n                this.$.SensorOption.hide();\n            })\n        });\n        optionAni.play();\n\n        // Line Animation\n        var lineAni = new Animator({\n            duration: 300,\n            startValue: lineHeight,\n            endValue: 0,\n            onStep: bind(this, function(data) {\n                this.$.SensorLine.applyStyle('height', data.value + 'px');\n            }),\n            onEnd: bind(this, function() {\n                this.$.SensorLine.hide();\n            })\n        });\n        lineAni.play();\n\n        // Reset\n        this.currentSensorKey = -1;\n    },\n    sensorHideOption: function() {\n        this.$.SensorOption.hide();\n        this.$.SensorLine.hide();\n    },\n    offSensorOption: function(inSender, inEvent) {\n        if(inEvent.offsetX <= 25 && inEvent.offsetY <= 30) {\n            this.sensorDisableOption();\n        }\n    },\n    optionDrawer: function(inSender, inEvent) {\n        if(this.$[inSender.drawer].open === true) {\n            inSender.removeClass('unactive');\n        } else {\n            inSender.addClass('unactive');\n        }\n        this.$[inSender.drawer].setOpen(!this.$[inSender.drawer].open);\n    },\n\n    //*** Public\n    pFloorTap: function(floorId) {\n        if(floorId !== this.currentFloorId) {\n            this.$['Floor_' + floorId + '_Name'].triggerHandler('ontap');\n        }\n    },\n    pSensorAddToSensorList: function(option) {\n        option = option || {};\n\n        // Check position in SensorList Panel\n        if(utils.isInside(this.$.SensorList)) {\n            if(this.currentFloorId > -1 && this.currentZoneId > -1) {\n                option.floorId = this.currentFloorId;\n                option.zoneId = this.currentZoneId;\n\n                this.sensorAdd(option, 'addToList');\n\n                return true;\n            }\n        } else {\n            // Check menu\n            if(!!this.$['Floor_' + this.currentFloorId + '_Content']) {\n                var node;\n                for(var i = 0; i < this.$['Floor_' + this.currentFloorId + '_Content'].children.length; i++) {\n                    if(utils.isInside(this.$['Floor_' + this.currentFloorId + '_Content'].children[i])) {\n                        node = this.$['Floor_' + this.currentFloorId + '_Content'].children[i];\n                    }\n                }\n                if(!!node) {\n                    option.floorId = node.floorId;\n                    option.zoneId = node.zoneId;\n\n                    this.sensorAdd(option, 'addToList');\n\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n});\n","//\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals');\n\nvar Drawer = require('onyx/Drawer'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableRows = require('layout/FittableRows'),\n    FittableColumnsLayout = require('layout/FittableLayout').Columns,\n    FittableRowsLayout = require('layout/FittableLayout').Rows,\n    IconButton = require('onyx/IconButton'),\n    Input = require('onyx/Input'),\n    MenuBar = require('../../../components/menubar').MenuBar,\n    MenuItem = require('../../../components/menubar').MenuItem,\n    Picker = require('onyx/Picker'),\n    PickerButton = require('onyx/PickerButton'),\n    PickerDecorator = require('onyx/PickerDecorator'),\n    Slideable = require('layout/Slideable');\n\nvar ZoneStackItem = kind({\n    name: \"pl.st.ZoneStackItem\",\n    published: {\n        title: ''\n    },\n    create: function() {\n        this.inherited(arguments);\n        this.createComponents([\n            {content: this.title},\n            {classes: \"remove\", ontap: \"remove\"}\n        ]);\n    },\n    remove: function() {\n        this.destroy();\n    }\n});\nexports.ZoneStackItem = ZoneStackItem;\n\nvar TankSettings = kind({\n    name: \"pl.st.TankSettings\",\n    kind: Slideable,\n    layoutKind: FittableRowsLayout,\n    min: 0,\n    max: 200,\n    value: 200,\n    unit: \"px\",\n    flag: false,\n    showing: false,\n    draggable: false,\n    style: \"right:0; position:absolute;\",\n    handlers: {\n        onAnimateFinish: \"animateFinish\"\n    },\n    components: [\n        {\n            name: \"MainContent\", kind: FittableRows, fit: true, classes: \"border-left\",\n            components: [\n                {\n                    kind: FittableRows, classes: \"enyo-fit\",\n                    components: [\n                        {classes: \"heading-title\", content: \"TANK SETTINGS\"},\n                        {\n                            classes: \"box\",\n                            components: [\n                                {classes: \"title\", content: \"TANK INFORMATION\"},\n                                {\n                                    classes: \"box-content\",\n                                    components: [\n                                        {classes: \"item\", content: \"INPUT NAME\"},\n                                        {\n                                            kind: Input,\n                                            classes: \"input-name\",\n                                            placeholder: \"Stratification Tank\",\n                                            onchange: \"\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            classes: \"box\",\n                            components: [\n                                {classes: \"title\", content: \"COMPONENT KIND\"},\n                                {\n                                    classes: \"box-content bg\",\n                                    components: [\n                                        {classes: \"item\", content: \"MANUFACTURER\"},\n                                        {\n                                            kind: PickerDecorator,\n                                            components: [\n                                                {kind: PickerButton, classes: \"option mfg\", content: \"MFG A\"},\n                                                {\n                                                    kind: Picker, components: [\n                                                    {content: \"MFG A!\"},\n                                                    {content: \"MFG A\"},\n                                                    {content: \"MFG A\"}\n                                                ]\n                                                }\n                                            ]\n                                        },\n                                        {classes: \"text-mode\", content: \"MODEL\"},\n                                        {\n                                            kind: PickerDecorator,\n                                            components: [\n                                                {\n                                                    kind: PickerButton,\n                                                    classes: \"option model\",\n                                                    content: \"MODEL A\"\n                                                },\n                                                {\n                                                    kind: Picker,\n                                                    components: [\n                                                        {content: \"MODEL A!\"},\n                                                        {content: \"MODEL A\"},\n                                                        {content: \"MODEL A\"}\n                                                    ]\n                                                }\n                                            ]\n                                        },\n                                        {classes: \"text-volume\", content: \"VOLUME\"},\n                                        {\n                                            layoutKind: FittableColumnsLayout,\n                                            components: [\n                                                {\n                                                    kind: Input,\n                                                    classes: \"mfg-input\",\n                                                    placeholder: \"80\",\n                                                    onchange: \"\"\n                                                },\n                                                {classes: \"mfg-text\", content: \"GALLONS\"}\n                                            ]\n                                        },\n                                        {\n                                            content: \"ADVANCED OPTIONS\",\n                                            ontap: \"drawerActivated\",\n                                            drawer: \"DrawerAdvancedOption\",\n                                            classes: \"heading-advanced-option\"\n                                        },\n                                        {\n                                            name: \"DrawerAdvancedOption\",\n                                            kind: Drawer,\n                                            open: true,\n                                            classes: \"drawer-advanced-option\",\n                                            components: [\n                                                {classes: \"text-variable-1\", content: \"VARIABLE 1\"},\n                                                {\n                                                    layoutKind: FittableColumnsLayout,\n                                                    classes: \"input-control\",\n                                                    components: [\n                                                        {\n                                                            kind: Input,\n                                                            classes: \"mfg-input\",\n                                                            placeholder: \"A\",\n                                                            onchange: \"\"\n                                                        },\n                                                        {classes: \"mfg-text\", content: \"UNITS\"}\n                                                    ]\n                                                },\n                                                {classes: \"text-variable-2\", content: \"VARIABLE 2\"},\n                                                {\n                                                    layoutKind: FittableColumnsLayout,\n                                                    classes: \"input-control\",\n                                                    components: [\n                                                        {\n                                                            kind: Input,\n                                                            classes: \"mfg-input\",\n                                                            placeholder: \"B\",\n                                                            onchange: \"\"\n                                                        },\n                                                        {classes: \"mfg-text\", content: \"UNITS\"}\n                                                    ]\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {name: \"Footer\", classes: \"footer\"}\n    ],\n    handleResize: function() {\n        this.inherited(arguments);\n        if(document.body.clientWidth <= 768) this.max = this.value = 150;\n        else this.max = this.value = 200;\n    },\n    toggle: function(flag) {\n        if(this.flag != flag) {\n            this.show();\n            if(flag === true) this.animateToMin();\n            else this.animateToMax();\n            this.flag = flag;\n        }\n    },\n    valueChanged: function() {\n        this.inherited(arguments);\n    },\n    animateFinish: function() {\n        if(this.isAtMax()) this.hide();\n    },\n    drawerActivated: function(inSender, inEvent) {\n        if(this.$[inSender.drawer].open === true) {\n            inSender.addClass(\"unactive\");\n        }\n        else if(inSender.hasClass(\"unactive\")) {\n            inSender.removeClass(\"unactive\");\n        }\n\n        this.$[inSender.drawer].setOpen(!this.$[inSender.drawer].open);\n    }\n});\nexports.TankSettings = TankSettings;\n\nvar ZoneSettings = kind({\n    name: \"pl.st.ZoneSettings\",\n    kind: Slideable,\n    layoutKind: FittableColumnsLayout,\n    min: 0,\n    max: 450,\n    value: 450,\n    unit: \"px\",\n    flag: false,\n    showing: false,\n    draggable: false,\n    style: \"right:0; position:absolute\",\n    handlers: {\n        onAnimateFinish: \"animateFinish\"\n    },\n    components: [\n        {\n            kind: FittableRows, classes: \"zone-manifold-settings\",\n            components: [\n                {\n                    name: \"MainSetting\", kind: FittableRows, fit: true, classes: \"border-left\",\n                    components: [\n                        {\n                            name: \"MainSettingContent\", kind: FittableRows, classes: \"enyo-fit\",\n                            components: [\n                                {classes: \"heading-title\", content: \"ZONE MANIFOLD SETTINGS\"},\n                                {\n                                    classes: \"box\",\n                                    components: [\n                                        {classes: \"title\", content: \"MANIFOLD INFORMATION\"},\n                                        {\n                                            classes: \"box-content\",\n                                            components: [\n                                                {classes: \"item\", content: \"NAME\"},\n                                                {kind: Input, placeholder: \"HYDRONIC MANIFOLD\", onchange: \"\"}\n                                            ]\n                                        }\n                                    ]\n                                },\n                                {\n                                    name: \"ZoneTable\", classes: \"box\",\n                                    onmouseover: \"handleMouseOver\",\n                                    components: [\n                                        {classes: \"title\", content: \"ZONES\"},\n                                        {\n                                            classes: \"box-content\",\n                                            components: [\n                                                {classes: \"zone-table-name\", content: \"ZONES\"},\n                                                {\n                                                    name: \"ZoneStack\",\n                                                    kind: FittableRows,\n                                                    classes: \"zone-table-content\",\n                                                    components: []\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {name: \"Footer\", classes: \"footer\"}\n            ]\n        },\n        {\n            kind: FittableRows, classes: \"zone-list box-shadow\",\n            components: [\n                {\n                    name: \"ZoneList\", kind: FittableRows, fit: true, classes: \"border-left\",\n                    components: [\n                        {\n                            kind: FittableRows, classes: \"enyo-fit\",\n                            components: [\n                                {classes: \"heading-title\", content: \"ZONE LIST\"},\n                                {\n                                    name: \"MenuBar\",\n                                    kind: MenuBar,\n                                    fit: true,\n                                    classes: \"menu\",\n                                    onItemTap: \"handleTap\",\n                                    onItemDrag: \"handleDrag\",\n                                    resizeContent: false,\n                                    contentComponents: dataMenuSystem()\n                                }\n                            ]\n                        }\n                    ]\n                },\n                { kind: FittableColumns, classes: \"footer\", components: [\n                    { classes: \"action\", components:[\n                        {kind: IconButton, classes: 'btn btn-add-new', ontap: ''}\n                    ]}\n                ]}\n            ]\n        }\n    ],\n    rendered: function() {\n        this.inherited(arguments);\n        // Temp\n        this.$.ZoneStack.destroyClientControls();\n        this.addZoneStack({content:'ENTRY'});\n        this.addZoneStack({content:'DINING'});\n        this.addZoneStack({content:'SITTING'});\n        this.addZoneStack({content:'KITCHEN'});\n        this.addZoneStack({content:'LIVING'});\n        this.addZoneStack({content:'EXERCISE'});\n        this.addZoneStack({content:'ART STUDIO'});\n        this.addZoneStack({content:'BATH'});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        if(document.body.clientWidth <= 768) {\n            this.max = this.value = 350;\n        } else {\n            this.max = this.value = 450;\n        }\n    },\n    toggle: function(flag) {\n        if(this.flag != flag) {\n            this.show();\n            if(flag === true) this.animateToMin();\n            else this.animateToMax();\n            this.flag = flag;\n        }\n    },\n    valueChanged: function() {\n        this.inherited(arguments);\n    },\n    animateFinish: function() {\n        if(this.isAtMax()) {\n            this.hide();\n        }\n        if(this.isAtMin()) { // Fix size\n            var height = utils.getCSSProperty(this.$.MainSettingContent, \"offsetHeight\", false);\n            for(var i = 0; i < this.$.MainSettingContent.children.length - 1; i++) {\n                height -= utils.getCSSProperty(this.$.MainSettingContent.children[i], \"offsetHeight\", false);\n            }\n            height -= 100;\n            this.$.ZoneStack.applyStyle(\"height\", height + \"px\");\n        }\n    },\n    handleDrag: function(inSender, inEvent) {\n        if(inEvent.type == \"dragstart\") {\n            this.itemSender = inEvent.originator;\n            this.offset = $('#' + this.itemSender.getId()).offset();\n            this.offset.x = inEvent.pageX - this.offset.left;\n            this.offset.y = inEvent.pageY - this.offset.top;\n            var pos = {\n                x: inEvent.pageX - this.offset.x,\n                y: inEvent.pageY - this.offset.y\n            };\n            Signals.send(\"onDragItem\", {content: this.itemSender.content, pos: pos, classes: \"file-popup\"});\n            Signals.send(\"onDragItem\", {showing: true});\n        } else if(inEvent.type == \"drag\") {\n            var pos = {\n                x: inEvent.pageX - this.offset.x,\n                y: inEvent.pageY - this.offset.y\n            };\n            Signals.send(\"onDragItem\", {pos: pos});\n        } else if(inEvent.type == \"dragfinish\") {\n            this.isDragFinish = true;\n            Signals.send(\"onDragItem\", {showing: false});\n        }\n    },\n    handleMouseOver: function() {\n        if(this.itemSender != undefined && this.isDragFinish === true) {\n            this.addZoneStack(this.itemSender);\n\n            this.itemSender = undefined;\n            this.isDragFinish = false;\n        }\n    },\n    addZoneStack: function(info) {\n        this.$.ZoneStack.createComponent({kind: ZoneStackItem, title: info.content});\n        this.$.ZoneStack.render();\n\n        //$(\"#\" + this.$.ZoneStack.getId()).sortable();\n    }\n});\nexports.ZoneSettings = ZoneSettings;\n\nfunction dataMenuSystem() {\n    return [\n        [\"1ST FLOOR ZONES\", [\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"OFFICE\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"even\",\n                title: \"OFFICE 2\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"BATH\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"even\",\n                title: \"ENTRY\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"RECEPTION\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            }\n        ]],\n        [\"2ND FLOOR ZONES\", [\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"OFFICE\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"even\",\n                title: \"OFFICE 2\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"BATH\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"even\",\n                title: \"ENTRY\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"RECEPTION\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            }\n        ]],\n        [\"3RD FLOOR ZONES\", [\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"OFFICE\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"even\",\n                title: \"OFFICE 2\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"BATH\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"even\",\n                title: \"ENTRY\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            },\n            {\n                kind: MenuItem,\n                classes: \"odd\",\n                title: \"RECEPTION\",\n                ontap: \"handleItemTap\",\n                ondragstart: \"handleItemDrag\",\n                ondrag: \"handleItemDrag\",\n                ondragfinish: \"handleItemDrag\"\n            }\n        ]]\n    ];\n}\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableRowsLayout = require('layout/FittableLayout').Rows,\n    FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Picker = require('onyx/Picker'),\n    Drawer = require('onyx/Drawer'),\n    Checkbox = require('onyx/Checkbox'),\n    Slideable = require('layout/Slideable'),\n    PickerDecorator = require('onyx/PickerDecorator'),\n    PickerButton = require('onyx/PickerButton');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar Control = module.exports = kind({\n    name: \"pl.it.po.Control\",\n    kind: Slideable,\n    layoutKind: FittableRowsLayout,\n    min: 0,\n    max: 200,\n    value: 200,\n    unit: \"px\",\n    flag: false,\n    showing: false,\n    style: \"right:0; position:absolute\",\n    classes: \"control box-shadow\",\n    handlers: {\n        onAnimateFinish: \"animateFinish\"\n    },\n    events: {\n        onUpdate: \"\"\n    },\n    components: [\n        {classes: \"heading-title border-left\", content: \"FLOOR ZONE CONTROL\"},\n        {\n            name: \"MainContent\", kind: FittableRows, classes: \"border-left\", style: \"overflow:hidden\",\n            components: [\n                {classes: \"title\", content: \"ZONE CONTROL SETUP\"},\n                {\n                    kind: FittableRows, classes: \"zone-content\",\n                    components: [\n                        {classes: \"name\", content: \"FLOOR\"},\n                        {\n                            name: \"FloorPicker\", kind: PickerDecorator, onChange: \"valueUpdate\",\n                            components: [\n                                {\n                                    name: \"FloorPickerButton\",\n                                    kind: PickerButton,\n                                    classes: \"bt-floor\",\n                                    content: \"1ST FLOOR\"\n                                },\n                                {name: \"FloorPickerContent\", kind: Picker}\n                            ]\n                        },\n                        {classes: \"drawer-zone-heading\", content: \"ADVANCED OPTIONS\", ontap: \"drawerActivated\", drawer: \"DrawerAdvancedOption\"},\n                        {\n                            name: \"DrawerAdvancedOption\",\n                            kind: Drawer,\n                            open: true,\n                            classes: \"drawer-zone-option\",\n                            components: [\n                                {classes: \"zone-name\", content: \"ZONES\"},\n                                {name: \"ZoneList\", classes: \"zone-option\"}\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {classes: \"footer\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n        for(var i = 1; i <= 3; i++) {\n            this.$.FloorPickerContent.createComponent([\n                {content: utils.getOrdinal(i) + \" FLOOR\"}\n            ], {owner: this});\n        }\n        for(var i = 0; i < 10; i++) {\n            this.$.ZoneList.createComponent([\n                {\n                    name: \"ZoneItem-\" + i,\n                    kind: FittableColumns,\n                    classes: (i % 2 == 0 ? \"even\" : \"odd\"),\n                    components: [\n                        {kind: Checkbox, classes: \"checkbox-style3\", checked: true, onchange: \"zoneChanged\"},\n                        {fit: true, content: \"ENTRY\"}\n                    ]\n                }\n            ], {owner: this});\n        }\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    toggle: function(flag) {\n        if(this.flag != flag) {\n            this.show();\n            if(flag === true) this.animateToMin();\n            else this.animateToMax();\n            this.flag = flag;\n        }\n    },\n    valueChanged: function() {\n        this.inherited(arguments);\n    },\n    animateFinish: function() {\n        if(this.isAtMax()) this.hide();\n    },\n    valueUpdate: function(inSender, inEvent) {\n        this.doUpdate(inEvent);\n    },\n    drawerActivated: function(inSender, inEvent) {\n        if(this.$[inSender.drawer].open === true) {\n            inSender.addClass(\"unactive\");\n        } else if(inSender.hasClass(\"unactive\")) {\n            inSender.removeClass(\"unactive\");\n        }\n\n        this.$[inSender.drawer].setOpen(!this.$[inSender.drawer].open);\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableLayout = require('layout/FittableLayout'),\n    FittableRows = require('layout/FittableRows'),\n    Slideable = require('layout/Slideable')\n    IconButton = require('onyx/IconButton'),\n    Picker = require('onyx/Picker'),\n    PickerButton = require('onyx/PickerButton'),\n    PickerDecorator = require('onyx/PickerDecorator'),\n    ContextualPopup = require('onyx/ContextualPopup'),\n    MenuDecorator = require('onyx/MenuDecorator'),\n    ColorPicker = require('enyo-external/ColorPicker');\n\n\nmodule.exports = kind({\n    name: \"pl.it.po.Indicator\",\n    kind: Slideable,\n    layoutKind: FittableLayout.Rows,\n    min: 0,\n    max: 200,\n    value: 200,\n    unit: \"px\",\n    flag: false,\n    showing: false,\n    style: \"right:0; position:absolute\",\n    classes: \"control box-shadow\",\n    handlers: {\n        onAnimateFinish: \"animateFinish\"\n    },\n    events: {\n        onUpdate: \"\", onColorPark: \"\"\n    },\n    components: [\n        {classes: \"heading-title border-left\", content: \"TEMPERATURE INDICATOR\"},\n        {\n            name: \"MainContent\", kind: FittableRows, classes: \"border-left\", style: \"overflow: hidden\",\n            components: [\n                {classes: \"title\", content: \"INDICATIOR SETUP\"},\n                {\n                    kind: FittableRows, classes: \"tein-content\",\n                    components: [\n                        {classes: \"name\", content: \"LOCATION\"},\n                        {\n                            name: \"LocationPicker\", kind: PickerDecorator, onChange: \"valueUpdate\",\n                            components: [\n                                {\n                                    name: \"LocationPickerButton\",\n                                    kind: PickerButton,\n                                    classes: \"bt-floor\",\n                                    content: \"OUTSIDE ZONE\"\n                                },\n                                {\n                                    name: \"LocationPickerContent\", kind: Picker,\n                                    components: [\n                                        {content: \"1\"},\n                                        {content: \"2\"},\n                                        {content: \"3\"}\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            classes: \"sensor\",\n                            components: [\n                                {classes: \"item-name\", content: \"SENSOR\"},\n                                {\n                                    name: \"SensorPicker\",\n                                    kind: PickerDecorator,\n                                    onChange: \"valueUpdate\",\n                                    components: [\n                                        {\n                                            name: \"SensorPickerButton\",\n                                            kind: PickerButton,\n                                            classes: \"bt-sensor\",\n                                            content: \"Kitchen Sensor\"\n                                        },\n                                        {\n                                            name: \"SensorPickerContent\", kind: Picker,\n                                            components: [\n                                                {content: \"1\"},\n                                                {content: \"2\"},\n                                                {content: \"3\"}\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {classes: \"title\", content: \"COLOR\"},\n                {\n                    classes: \"tein-content\", kind: FittableRows,\n                    components: [\n                        {\n                            name: \"ColorPicker\", kind: PickerDecorator, onChange: \"valueUpdate\",\n                            components: [\n                                {\n                                    name: \"ColorPickerButton\",\n                                    kind: PickerButton,\n                                    classes: \"bt-temperature\",\n                                    content: \"TEMPERATURE\"\n                                },\n                                {\n                                    name: \"ColorPickerContent\", kind: Picker,\n                                    components: [\n                                        {content: \"1\"},\n                                        {content: \"2\"},\n                                        {content: \"3\"}\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            classes: \"color\",\n                            components: [\n                                {\n                                    classes: \"color-box\",\n                                    components: [\n                                        {classes: \"item-name\", content: \"MIN COLOR\"},\n                                        {\n                                            kind: MenuDecorator, classes: \"bt\",\n                                            components: [\n                                                {\n                                                    kind: IconButton, classes: \"bt-select-color\",\n                                                    components: [\n                                                        {\n                                                            name: \"MinColorContent\",\n                                                            classes: \"min-color\",\n                                                            style: \"background-color:#443ec6;\"\n                                                        }\n                                                    ]\n                                                },\n                                                {\n                                                    name: \"MinColorContextualPopup\",\n                                                    kind: ContextualPopup,\n                                                    classes: \"color-picker-popup\",\n                                                    floating: true,\n                                                    maxHeight: \"500\",\n                                                    components: [\n                                                        {\n                                                            name: \"MinColorPicker\",\n                                                            kind: ColorPicker,\n                                                            drawer: \"MinColorContent\",\n                                                            parentPopup: \"MinColorContextualPopup\",\n                                                            color: \"443ec6\",\n                                                            classes: \"color-picker\",\n                                                            onColorPick: \"colorPick\",\n                                                            onColorSlide: \"colorPick\",\n                                                            onColorButton: \"colorPick\"\n                                                        }\n                                                    ]\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                },\n                                {\n                                    classes: \"color-box\",\n                                    components: [\n                                        {classes: \"item-name\", content: \"MAX COLOR\"},\n                                        {\n                                            kind: MenuDecorator, classes: \"bt\",\n                                            components: [\n                                                {\n                                                    kind: IconButton, classes: \"bt-select-color\",\n                                                    components: [\n                                                        {\n                                                            name: \"MaxColorContent\",\n                                                            classes: \"max-color\",\n                                                            style: \"background-color:#c8312a;\"\n                                                        }\n                                                    ]\n                                                },\n                                                {\n                                                    name: \"MaxColorContextualPopup\",\n                                                    kind: ContextualPopup,\n                                                    classes: \"color-picker-popup\",\n                                                    floating: true,\n                                                    maxHeight: \"500\",\n                                                    components: [\n                                                        {\n                                                            name: \"MaxColorPicker\",\n                                                            kind: ColorPicker,\n                                                            drawer: \"MaxColorContent\",\n                                                            parentPopup: \"MaxColorContextualPopup\",\n                                                            color: \"c8312a\",\n                                                            classes: \"color-picker\",\n                                                            onColorPick: \"colorPick\",\n                                                            onColorSlide: \"colorPick\",\n                                                            onColorButton: \"colorPick\"\n                                                        }\n                                                    ]\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {classes: \"footer\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    toggle: function(flag) {\n        if(this.flag != flag) {\n            this.show();\n            if(flag === true) this.animateToMin();\n            else this.animateToMax();\n            this.flag = flag;\n        }\n    },\n    valueChanged: function() {\n        this.inherited(arguments);\n    },\n    animateFinish: function() {\n        if(this.isAtMax()) this.hide();\n    },\n    valueUpdate: function(inSender, inEvent) {\n        this.doUpdate(inEvent);\n    },\n    colorPick: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case \"onColorPick\":\n                break;\n            case \"onColorSlide\":\n                break;\n            case \"onColorButton\":\n                this.doColorPark(inEvent);\n                this.$[inSender.parentPopup].hide();\n                break;\n        }\n        this.$[inSender.drawer].applyStyle(\"background-color\", inEvent.originator.color);\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableRowsLayout = require('layout/FittableLayout').Rows,\n    Checkbox = require('onyx/Checkbox'),\n    Input = require('onyx/Input'),\n    Picker = require('onyx/Picker'),\n    PickerDecorator = require('onyx/PickerDecorator'),\n    PickerButton = require('onyx/PickerButton'),\n    Signals = require('enyo/Signals'),\n    Slideable = require('layout/Slideable');\n\nmodule.exports = kind({\n    name: \"pl.it.po.UserInput\",\n    kind: Slideable,\n    layoutKind: FittableRowsLayout,\n    min: 0,\n    max: 200,\n    value: 200,\n    unit: \"px\",\n    flag: false,\n    showing: false,\n    style: \"right:0; position:absolute\",\n    classes: \"control box-shadow\",\n    handlers: {\n        onAnimateFinish: \"animateFinish\"\n    },\n    events: {\n        onUpdate: \"\"\n    },\n    components: [\n        {name: \"Header\", classes: \"heading-title border-left\", content: \"SNOWMELT SWITCH\"},\n        {\n            name: \"MainContent\", kind: FittableRows, classes: \"border-left\", style: \"overflow: hidden\",\n            components: [\n                {classes: \"title\", content: \"SWITCH SETUP\"},\n                {\n                    kind: FittableRows, classes: \"snowmelt-content\",\n                    components: [\n                        {classes: \"name\", content: \"INPUT NAME\"},\n                        {\n                            name: \"NameInput\",\n                            kind: Input,\n                            clases: \"switch-name\",\n                            placeholder: \"Snowmelt\",\n                            oninput: \"valueUpdate\"\n                        },\n                        {\n                            kind: FittableRows, classes: \"switch-style\",\n                            components: [\n                                {\n                                    kind: FittableColumns, clases: \"switch-style-checkbox\",\n                                    components: [\n                                        {\n                                            name: \"PointerStyleCheckbox\",\n                                            kind: Checkbox,\n                                            classes: \"checkbox-style3\",\n                                            checked: true,\n                                            onchange: \"valueUpdate\"\n                                        },\n                                        {classes: \"switch-style-checkbox-name\", content: \"POINTER STYLE\"}\n                                    ]\n                                },\n                                {classes: \"item-name\", content: \"POINTER ANGLE\"},\n                                {\n                                    kind: FittableColumns, classes: \"pointer-angle-input\",\n                                    components: [\n                                        {\n                                            name: \"PointerAngleInput\",\n                                            kind: Input,\n                                            clases: \"switch-name\",\n                                            oninput: \"valueUpdate\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {classes: \"title\", content: \"SYSTEM TO TRIGGER\"},\n                {\n                    kind: FittableRows, classes: \"snowmelt-content\",\n                    components: [\n                        {classes: \"name\", content: \"SYSTEM\"},\n                        {\n                            name: \"SystemPicker\", kind: PickerDecorator, onChange: \"valueUpdate\",\n                            components: [\n                                {\n                                    name: \"SystemPickerButton\",\n                                    kind: PickerButton,\n                                    classes: \"bt-system\",\n                                    content: \"SNOW MELT\"\n                                },\n                                {\n                                    name: \"SystemPickerContent\", kind: Picker,\n                                    components: [\n                                        {content: \"1\"},\n                                        {content: \"2\"},\n                                        {content: \"3\"}\n                                    ]\n                                }\n                            ]\n                        },\n                        {\n                            classes: \"trigger-action\",\n                            components: [\n                                {classes: \"item-name\", content: \"TRIGGER ACTION\"},\n                                {\n                                    name: \"TriggerActionPicker\",\n                                    kind: PickerDecorator,\n                                    onChange: \"valueUpdate\",\n                                    components: [\n                                        {\n                                            name: \"TriggerActionPickerButton\",\n                                            kind: PickerButton,\n                                            classes: \"bt-trigger-action\",\n                                            value: true,\n                                            content: \"TURN ON\"\n                                        },\n                                        {\n                                            name: \"TriggerActionPickerContent\", kind: Picker,\n                                            components: [\n                                                {value: true, content: \"TURN ON\"},\n                                                {value: false, content: \"TURN OFF\"}\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {classes: \"title\", content: \"TIMER STYLE\"},\n                {\n                    kind: FittableRows, classes: \"snowmelt-content\",\n                    components: [\n                        {\n                            kind: FittableRows, classes: \"switch-style\",\n                            components: [\n                                {\n                                    kind: FittableColumns, classes: \"switch-style-checkbox\",\n                                    components: [\n                                        {\n                                            name: \"TimerStyleCheckbox\",\n                                            kind: Checkbox,\n                                            classes: \"checkbox-style3\",\n                                            checked: true,\n                                            onchange: \"valueUpdate\"\n                                        },\n                                        {classes: \"switch-style-checkbox-name\", content: \"TIMER STYLE\"}\n                                    ]\n                                },\n                                {classes: \"item-name\", content: \"DEFAULT TIME\"},\n                                {\n                                    kind: FittableColumns, classes: \"switch-style-picker\",\n                                    components: [\n                                        {\n                                            name: \"TimeStylePicker\",\n                                            kind: PickerDecorator,\n                                            onChange: \"valueUpdate\",\n                                            components: [\n                                                {\n                                                    name: \"TimeStylePickerButton\",\n                                                    kind: PickerButton,\n                                                    content: \"30\"\n                                                },\n                                                {\n                                                    name: \"TimeStylePickerContent\", kind: Picker, components: [\n                                                    {content: \"1\"},\n                                                    {content: \"2\"},\n                                                    {content: \"3\"}\n                                                ]\n                                                }\n                                            ]\n                                        },\n                                        {classes: \"switch-style-checkbox-unit\", content: \"min\"}\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {classes: \"title\", content: \"PHYSICAL SWITCH\"},\n                {\n                    kind: FittableRows, classes: \"snowmelt-content\",\n                    components: [\n                        {\n                            kind: FittableRows, classes: \"switch-style\",\n                            components: [\n                                {\n                                    kind: FittableColumns, classes: \"switch-style-checkbox\",\n                                    components: [\n                                        {\n                                            name: \"PhysicalSwitchCheckbox\",\n                                            kind: Checkbox,\n                                            classes: \"checkbox-style3\",\n                                            checked: true,\n                                            onchange: \"valueUpdate\"\n                                        },\n                                        {classes: \"switch-style-checkbox-name\", content: \"PHYSICAL SWITCH\"}\n                                    ]\n                                },\n                                {classes: \"item-name\", content: \"KIND\"},\n                                {\n                                    classes: \"switch-style-picker\", kind: FittableColumns,\n                                    components: [\n                                        {\n                                            name: \"PhysicalSwitchPicker\",\n                                            kind: PickerDecorator,\n                                            onChange: \"valueUpdate\",\n                                            components: [\n                                                {\n                                                    name: \"PhysicalSwitchPickerButton\",\n                                                    classes: \"bt-kind\",\n                                                    kind: PickerButton,\n                                                    content: \"2-WIRE\"\n                                                },\n                                                {\n                                                    name: \"PhysicalSwitchPickerContent\", kind: Picker,\n                                                    components: [\n                                                        {content: \"1\"},\n                                                        {content: \"2\"},\n                                                        {content: \"3\"}\n                                                    ]\n                                                }\n                                            ]\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {classes: \"footer\"},\n        {kind: Signals, onPointAngleUpdate: \"onPointAngleUpdate\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    initData: function(snapObject) {\n        this.snapObject = snapObject;\n        this.snapInfo = snapObject.info;\n\n        if(typeof this.snapInfo.pointerStyle === 'undefined') {\n            this.snapInfo.pointerStyle = true;\n        }\n        if(typeof this.snapInfo.pointerAngle === 'undefined') {\n            this.snapInfo.pointerAngle = 0;\n        }\n        if(typeof this.snapInfo.system === 'undefined') {\n            this.snapInfo.system = \"Snow melt\";\n        }\n        if(typeof this.snapInfo.action === 'undefined') {\n            this.snapInfo.action = false;\n        }\n        if(typeof this.snapInfo.timerStyle === 'undefined') {\n            this.snapInfo.timerStyle = false;\n        }\n        if(typeof this.snapInfo.defaultTime === 'undefined') {\n            this.snapInfo.defaultTime = 30;\n        }\n\n        // Build html\n        this.$.Header.setContent(this.snapInfo.name + ' SWITCH');\n        // Setup\n        this.$.NameInput.setValue(this.snapInfo.name);\n        this.$.PointerStyleCheckbox.setChecked(this.snapInfo.pointerStyle);\n        this.$.PointerAngleInput.setValue(this.snapInfo.pointerAngle);\n        // System\n        this.$.SystemPicker.children[0].setContent(this.snapInfo.name.toUpperCase());\n        if(this.snapInfo.action) {\n            this.$.TriggerActionPicker.children[0].setContent('TURN ON');\n        } else {\n            this.$.TriggerActionPicker.children[0].setContent('TURN OFF');\n        }\n        // Time Style\n        this.$.TimerStyleCheckbox.setChecked(this.snapInfo.timerStyle);\n        this.$.TimeStylePicker.children[0].setContent(this.snapInfo.defaultTime);\n        // Physical switch\n        this.$.PhysicalSwitchCheckbox.setChecked(false);\n        this.$.PhysicalSwitchPicker.children[0].setContent('2-WIRE');\n    },\n    toggle: function(flag, snapObject) {\n        if(!!snapObject) {\n            this.initData(snapObject);\n        }\n        if(this.flag != flag) {\n            this.show();\n            if(flag === true) {\n                this.animateToMin();\n            } else {\n                this.animateToMax();\n            }\n            this.flag = flag;\n        }\n    },\n    valueChanged: function() {\n        this.inherited(arguments);\n    },\n    animateFinish: function() {\n        if(this.isAtMax()) this.hide();\n    },\n    valueUpdate: function(inSender, inEvent) {\n        if(!this.snapInfo) {\n            return false;\n        }\n        switch (inSender.name) {\n            case 'NameInput':\n                this.snapInfo.name = inSender.getValue();\n                break;\n            case 'PointerStyleCheckbox':\n                this.snapInfo.pointerStyle = inSender.getChecked();\n                this.snapObject.changeInfo('pointerStyle');\n                break;\n            case 'PointerAngleInput':\n                var angle = parseInt(inSender.getValue());\n                if(!utils.isNumber(angle)) {\n                    angle = 0;\n                }\n                if(angle < 0) {\n                    angle = 0\n                } else if(angle > 360) {\n                    angle = 360;\n                }\n                inSender.setValue(angle);\n                this.snapInfo.pointerAngle = angle;\n                // Redraw\n                interfaceGraphic.setPointerAngle(this.snapInfo);\n\n                break;\n            case 'SystemPicker':\n                //inSender.activator.getContent()\n                break;\n            case 'TriggerActionPicker':\n                //inSender.activator.getContent()\n                break;\n            case 'TimerStyleCheckbox':\n                this.snapInfo.timerStyle = inSender.getChecked();\n                this.snapObject.changeInfo('timerStyle');\n                break;\n            case 'TimeStylePicker':\n                break;\n            case 'PhysicalSwitchCheckbox':\n                break;\n            case 'PhysicalSwitchPicker':\n                break;\n        }\n        //this.doUpdate(inEvent);\n    },\n    onPointAngleUpdate: function(inSender, inEvent) {\n        this.snapInfo.pointerAngle = inEvent.pointerAngle;\n        this.$.PointerAngleInput.setValue(this.snapInfo.pointerAngle);\n    }\n});\n","//\n\nvar kind = require('enyo/kind');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns');\n\nvar plCmSubMenuItem = require('./submenu.js').SubMenuItem,\n    plCmSubMenu = require('./submenu.js').SubMenu;\n\nvar MenuItem = require('../../../components/menubar.js').MenuItem,\n    Scroller = require('enyo/Scroller');\n\nmodule.exports = kind({\n    name: \"pl.cm.SideBar\",\n    kind: FittableRows,\n    classes: \"widget enyo-fit setup\",\n    selected: -1,\n    oldSelect: undefined,\n    currentItem: undefined,\n    components: [\n        {classes: \"heading-title\", content: \"ZONE LIST SETUP\"},\n        {\n            fit: true, kind: FittableColumns,\n            components: [\n                {\n                    name: \"MenuMain\", classes: \"setup-menu\", kind: FittableRows,\n                    components: [\n                        {name: \"MenuContent\", kind: FittableRows, fit: true}\n                    ]\n                },\n                {\n                    name: \"Setting\", fit: true, kind: FittableColumns, classes: \"setup-submenu\",\n                    components: [\n                        {\n                            name: \"SubMenu\",\n                            kind: Scroller,\n                            touch: true,\n                            horizontal: \"hidden\",\n                            classes: \"device-list enyo-fit\"\n                        }\n                    ]\n                }\n            ]\n        },\n        {classes: \"footer\"}\n    ],\n    create: function() {\n        this.inherited(arguments);\n    },\n    loadData: function() {\n        var components = [];\n        var controllerIndex = 0;\n        for(var controllerId in DEVICE_LIST) {\n            var controller = DEVICE_LIST[controllerId];\n            var adapters = controller.adaptors;\n            var adapterComponents = [];\n            var adapterIndex = 0;\n            for(var adapterId in adapters) {\n                var adapter = adapters[adapterId];\n                var sensors = adapter.sensors;\n                var sensorComponents = [];\n                var start = 1;\n                for(var sensorIndex = 0; sensorIndex < sensors.length; sensorIndex++) {\n                    var sensor = sensors[sensorIndex];\n\n                    var currentValue = '';\n                    if(sensor.sensor.kind === SENSOR_KINDS.TEMPERATURE) {\n                        currentValue = sensor.sensor.currentValue + \"°F\";\n                    } else if(sensor.sensor.kind === SENSOR_KINDS.HUMIDITY) {\n                        currentValue = sensor.sensor.currentValue + \"%\";\n                    }\n\n                    /* Hack code */\n                    if(sensorIndex == 1) {\n                        sensorComponents.push(\n                            {\n                                kind: plCmSubMenuItem,\n                                start: start,\n                                quantity: sensor.sensor.type,\n                                title: sensor.content,\n                                value: \"Error\",\n                                setting: \"exit\",\n                                color: sensor.color,\n                                info: sensor.sensor,\n                                style: \"z-index:\" + (sensorIndex + 1)\n                            }\n                        );\n                    } else if(sensorIndex == 2) {\n                        sensorComponents.push(\n                            {\n                                kind: plCmSubMenuItem,\n                                start: start,\n                                quantity: sensor.sensor.type,\n                                title: sensor.content,\n                                value: currentValue,\n                                setting: \"setting\",\n                                color: sensor.color,\n                                info: sensor.sensor,\n                                style: \"z-index:\" + (sensorIndex + 1)\n                            }\n                        );\n                    } else {\n                        sensorComponents.push(\n                            {\n                                kind: plCmSubMenuItem,\n                                start: start,\n                                quantity: sensor.sensor.type,\n                                title: sensor.content,\n                                value: currentValue,\n                                setting: \"apply\",\n                                color: sensor.color,\n                                info: sensor.sensor,\n                                style: \"z-index:\" + (sensorIndex + 1)\n                            }\n                        );\n                    }\n                    start += sensor.sensor.type;\n                }\n\n                // Default\n                while(start <= 50) {\n                    sensorComponents.push({kind: plCmSubMenuItem, start: start++, unused: true});\n                }\n\n                adapterComponents.push(\n                    {\n                        kind: MenuItem,\n                        classes: (adapterIndex % 2 == 0) ? \"even\" : \"odd\",\n                        title: adapter.title + \"<span class='apply'></span>\",\n                        componentContents: sensorComponents,\n                        ontap: \"handleSubMenuTap\"\n                    }\n                );\n                adapterIndex++;\n            }\n\n            components.push({\n                name: \"Item_\" + controllerIndex, index: controllerIndex, classes: \"item\", components: [\n                    {\n                        name: \"Item_\" + controllerIndex + \"_Name\",\n                        content: controller.name,\n                        index: controllerIndex,\n                        classes: \"item-name\",\n                        ontap: \"handleMenuTap\"\n                    },\n                    {\n                        name: \"Item_\" + controllerIndex + \"_Content\",\n                        tag: \"ul\",\n                        showing: false,\n                        components: adapterComponents\n                    }\n                ]\n            });\n            controllerIndex++;\n        }\n\n        // Check destroy\n        this.$.MenuContent.destroyClientControls();\n        this.$.MenuContent.createComponents(components, {owner: this});\n\n        // Rebuild\n        this.render();\n        this.loaded = true;\n\n        // Select default\n        if(!!this.$[\"Item_0_Content\"] && !!this.$[\"Item_0_Content\"].children[0]) {\n            this.selected = 0;\n            this.selectItem(this.selected);\n            this.handleSubMenuTap(this.$[\"Item_0_Content\"].children[0]);\n        }\n    },\n    rendered: function() {\n        this.inherited(arguments);\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    selectItem: function(index) {\n        // Remove\n        if(this.selected > -1) {\n            this.$[\"Item_\" + this.selected + \"_Name\"].removeClass(\"selected\");\n            this.$[\"Item_\" + this.selected + \"_Content\"].hide()\n        }\n        // Select Item\n        this.$[\"Item_\" + index + \"_Name\"].addClass(\"selected\");\n        this.$[\"Item_\" + index + \"_Content\"].show();\n        this.selected = index;\n    },\n    disableItem: function(index) {\n        this.$[\"Item_\" + index + \"_Name\"].removeClass(\"selected\");\n        this.$[\"Item_\" + index + \"_Content\"].hide()\n        this.selected = -1;\n    },\n    handleMenuTap: function(inSender, inEvent) {\n        if(inSender.hasClass(\"item-name\") && this.selected != inSender.index) {\n            this.selectItem(inSender.index);\n        } else {\n            this.disableItem(inSender.index);\n        }\n    },\n    handleSubMenuTap: function(inSender) {\n        if(this.currentItem != undefined) {\n            if(this.currentItem.hasClass(\"active\")) {\n                this.currentItem.removeClass(\"active\");\n            }\n        }\n        // Save\n        this.currentItem = inSender;\n        // Active\n        inSender.addClass(\"active\");\n        // Check destroy\n        this.$.SubMenu.destroyClientControls();\n        // Create component\n        this.$.SubMenu.createComponent({\n            kind: plCmSubMenu,\n            componentContents: inSender.componentContents\n        }, {owner: this});\n        this.$.SubMenu.render();\n    }\n});\n","// PIPELINE - SETUP\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Panels = require('layout/Panels'),\n    CardArranger = require('layout/CardArranger');\n\nvar IconButton = require('onyx/IconButton');\n\nvar plSuBuilding = require('./building.js'),\n    plSuSite = require('./site.js'),\n//    plTabBar = require('../../views/progress/setup/setup'),\n    plSuSubBreadcrumbs = require('./sub-breadcrumbs.js');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nmodule.exports = kind({\n    name: \"pl.SetupView\",\n    kind: FittableRows,\n    classes: \"form-setup\",\n    handlers: {\n        ontap: \"tapHandler\"\n    },\n    components: [\n        // SubMenuBar\n        { name: \"TabBar\", kind: FittableRows, classes: \"sub-menu-bar\", components: [\n            { name: \"TabBarName\", classes: \"name\", content: \"CONTROL SYSTEM SETUP:\"},\n            //{ name: \"TabBarContent\", kind: plTabBar, style: \"position: absolute;\", classes: \"tab-bar\", path: [\"SITE INFO\", \"BUILDING INFO\"], onActivate: \"tabActivated\"},\n            { name: \"TabBarContent\", kind: plSuSubBreadcrumbs, style: \"position: absolute;\", onActivate: \"tabActivated\" },\n            { name: \"TabBarChop\", classes: \"chop\"}\n        ]},\n        // MainPanels\n        { name: \"MainPanels\", kind: Panels, fit: true, index: 0, arrangerKind: CardArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: \"main-panels\", onTransitionStart: \"transitionStart\", onTransitionFinish: \"transitionFinish\", components: [\n            {name: \"SiteInfo\", kind: plSuSite, index: 0},\n            {name: \"BuildingInfo\", kind: plSuBuilding, index: 1}\n        ]},\n        { name: \"Footer\", classes: \"footer\", components: [\n            { name: \"FooterContent\", kind: FittableColumns, components: [\n                { classes: \"footer-status\", content: \"CLICK ON BUILDING INFO ARROW TO CONTINUE ...\", fit: true},\n                { kind: IconButton, name: \"BtLocate\", attributes: {title: \"\"}, classes: \"bt bt-locate\", ontap: \"mapTap\"},\n                { kind: IconButton, name: \"BtCurrentLocation\", attributes: {title: \"\"}, classes: \"bt bt-current-location\", ontap: \"mapTap\"}\n            ]}\n        ]}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n        this.mapFlag = false;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        // Setting\n        this.fixSubPipeLine();\n    },\n    init: function() {\n        if(this.ready !== true) {\n            this.ready = true;\n            this.render();\n            // Init google map\n            this.$.SiteInfo.initGoogleMap();\n        }\n    },\n    setProgress: function(percent) {\n        Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SETUP, key: 'SETUP', value: percent});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.fixSubPipeLine();\n    },\n    //resizeComplete: function() {\n    //    if(this.$.MainPanels.getActive() === this.$.BuildingInfo) {\n    //        this.$.BuildingInfo.resizeComplete();\n    //    }\n    //},\n    tapHandler: function(inSender, inEvent) {\n\n    },\n    tabActivated: function(inSender, inEvent) {\n        this.$.MainPanels.undoed = false;\n        this.$.MainPanels.setIndex(inEvent.originator.index);\n    },\n    transitionStart: function(inSender, inEvent) {\n        if(inEvent.fromIndex != inEvent.toIndex) {\n            if(this.$.TabBarContent.index != inEvent.toIndex) {\n                this.$.TabBarContent.setActive(inEvent.toIndex)\n            }\n            if(inEvent.toIndex == 1) {\n                this.$.BuildingInfo.createChart();\n                this.$.FooterContent.hide()\n            } else {\n                this.$.FooterContent.show();\n            }\n        }\n    },\n    transitionFinish: function(inSender, inEvent) {\n        if(inEvent.toIndex == 0) {\n            this.$.SiteInfo.mapReLoad();\n        } else if(inEvent.toIndex == 1) {\n            this.$[\"BuildingInfo\"].resize();\n        }\n        if(inEvent.fromIndex != inEvent.toIndex && !inSender.undoed) {\n            STACK_LIST.addStack(\n                this.name,\n                this.name,\n                STACK_TYPES.ENYO,\n                STACK_METHODS.TRANSITION,\n                inSender,\n                inEvent.fromIndex\n            );\n        }\n    },\n    // Fix position for SubPipeLine\n    fixSubPipeLine: function() {\n        var offset = $('#' + this.parent.parent.$.Breadcrumb.$[\"Item_\" + APP_PROGRESS.PR_SETUP].getId()).offset();\n        var offsetLeft = offset.left;\n        var offsetWidth = utils.getCSSProperty(this.parent.parent.$.Breadcrumb.$[\"Item_\" + APP_PROGRESS.PR_SETUP], \"offsetWidth\", false);\n        var tabBarNameWidth = utils.getCSSProperty(this.$.TabBarName, \"offsetWidth\", false);\n        var tabBarChopWidth = utils.getCSSProperty(this.parent.parent.$.Chop, \"offsetWidth\", false);\n        var tabBarContentWidth = utils.getCSSProperty(this.$.TabBarContent, \"offsetWidth\", false);\n        // Set Position for chop\n        this.parent.parent.$.Chop.applyStyle(\"left\", ((offsetLeft + offsetWidth / 2 - tabBarChopWidth / 2 + 8) - 20) + \"px\");\n        // Set Position for tab\n        var left = ((offsetLeft + offsetWidth / 2 - tabBarContentWidth / 2 + 25) - 20);\n        if(left < tabBarNameWidth + 10) {\n            left = tabBarNameWidth + 10;\n        }\n        this.$.TabBarContent.applyStyle(\"left\", left + \"px\");\n    },\n    mapTap: function(inSender) {\n        if(this.$.MainPanels.getIndex() != 0) {\n            return;\n        }\n        switch(inSender.name) {\n            case \"BtLocate\":\n                this.mapFlag = (this.mapFlag ? false : true);\n                if(this.mapFlag) {\n                    inSender.addClass(\"active\");\n                }\n                else {\n                    inSender.removeClass(\"active\");\n                }\n                this.$.SiteInfo.$.GoogleMap.isClick = this.mapFlag;\n                this.$.SiteInfo.$.GoogleMap.reLoad();\n                break;\n            case \"BtCurrentLocation\":\n                this.$.SiteInfo.$.GoogleMap.setPanToCurrent();\n                break;\n        }\n    },\n    undo: function() {\n        var stack = STACK_LIST.getStack(this.name);\n        if(!!stack) {\n            // Update\n            if(!!this.$.SiteInfo.$[stack.sender.name] || stack.parent === this.$.SiteInfo) {\n                this.$.SiteInfo.undo(stack);\n            } else if(!!this.$.BuildingInfo.$[stack.sender.name] || stack.parent === this.$.BuildingInfo) {\n                this.$.BuildingInfo.undo(stack);\n            }\n            STACK_LIST.undo(this.name);\n        }\n    }\n});\n","//\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals'),\n    bind = require('enyo/utils').bind;\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Panels = require('layout/Panels'),\n    CollapsingArranger = require('layout/CollapsingArranger');\nvar Button = require('onyx/Button'),\n    Animator = require('enyo/Animator'),\n    ColorPicker = require('enyo-external/ColorPicker'),\n    ContextualPopup = require('onyx/ContextualPopup'),\n    FileInputDecorator = require('enyo-external/FileInputDecorator'),\n    Grabber = require('onyx/Grabber'),\n    IconButton = require('onyx/IconButton'),\n    MenuDecorator = require('onyx/MenuDecorator'),\n    SideBar = require('../../../components/sidebar.js').SideBar,\n    SideBarItem = require('../../../components/sidebar.js').SideBarItem,\n    plSiteListSetting = require('./list-setting.js');\n\nvar utils = require('../../../common/services/utils.js');\nvar siteGraphic = require('../../../views/progress/site/graphic.js');\n\nvar STACK_LIST = require('../../../common/services/stack.js').STACK_LIST;\nvar STACK_TYPES = require('../../../common/services/stack.js').STACK_TYPES;\nvar STACK_METHODS = require('../../../common/services/stack.js').STACK_METHODS;\n\nmodule.exports = kind({\n    name: 'pl.SiteView',\n    kind: FittableRows,\n    classes: 'form-site',\n    handlers: {\n        ontap: 'tapHandler'\n    },\n    components: [\n        { name: 'MainPanels', kind: Panels, fit: true, arrangerKind: CollapsingArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: 'main-panels', onTransitionFinish: 'transitionFinish', components: [\n            { name: 'LeftColumn', kind: FittableRows, classes: 'widget enyo-fit', components: [\n                { name: 'SideBarWrapper', kind: FittableColumns, fit: true },\n                { classes: 'footer'}\n            ]},\n            { name: 'MainColumn', kind: FittableRows, classes: 'panel enyo-fit box-shadow', components: [\n                { content: 'ZONE LIST SETUP', classes: 'heading-title'},\n                { name: 'ZoneList', fit: true, kind: FittableColumns, components: [\n                    // Center Column\n                    { name: 'ZoneListPanels', kind: FittableRows, fit: true, components: [\n                        { name: 'ViewPortPanel', fit: true, style: 'overflow: hidden', classes: 'border-left border-right' },\n                        { name: 'Footer', kind: FittableColumns, classes: 'footer', components: [\n                            { kind: Grabber, attributes: {title: 'Collapsing'}, classes: 'bt bt-collapsing',\n                                ontap: 'toggleFullScreen',\n                                ondragstart: 'toggleFullScreen',\n                                ondragfinish: 'toggleFullScreen'\n                            },\n                            { name: 'DrawerTools', showing: false, kind: FittableColumns, components: [\n                                { name: 'ViewPortOff', kind: Button, content: 'BACK', attributes: {title: ''}, classes: 'bt bt-footer-default', ontap: 'viewPortTurnOff' },\n                                { kind: FittableColumns, classes: 'box-group', components: [\n                                    { kind: IconButton, name: 'bt-selector', attributes: {title: 'Selector/Move'}, classes: 'bt bt-move active', ontap: 'activeSelector'}\n                                ]},\n                                { kind: FittableColumns, classes: 'box-group', components: [\n                                    { kind: IconButton, name: 'bt-polyline', attributes: {title: ''}, classes: 'bt bt-connector2', ontap: 'activeAddPolyLine'},\n                                    { kind: IconButton, name: 'bt-rectangle', attributes: {title: ''}, classes: 'bt bt-rectangle', ontap: 'activeAddRectangle'},\n                                    { kind: IconButton, name: 'bt-circle', attributes: {title: ''}, classes: 'bt bt-circle', ontap: 'activeAddCircle'},\n                                    { kind: IconButton, name: 'bt-add-text', attributes: {title: 'Add Text'}, classes: 'bt bt-text', ontap: 'activeAddText'},\n                                    { kind: MenuDecorator, classes: 'bt bt-fill-color', components: [\n                                        { kind: IconButton, classes: 'bt bt-fill-color-button', ontap: 'colorTap', components: [\n                                            { name: 'FillColorContent', classes: 'bt-fill-color-content', style: 'background-color:' + SITE_SETTING.fillColor }\n                                        ]},\n                                        { name: 'FillColorContextualPopup', kind: ContextualPopup, classes: 'color-picker-popup', floating: true, maxHeight: '500', components: [\n                                            { name: 'FillColorPicker', kind: ColorPicker, drawer: 'FillColorContent', color: SITE_SETTING.fillColor.substr(1, 6), classes: 'color-picker',\n                                                onColorPick: 'colorPick',\n                                                onColorSlide: 'colorPick',\n                                                onColorButton: 'colorPick'\n                                            }\n                                        ]}\n                                    ]}\n                                ]},\n                                { kind: FittableColumns, classes: 'box-group', components: [\n                                    { name: 'bt-zoom', kind: IconButton, attributes: {title: ''}, classes: 'bt bt-look', ontap: 'activeZoom'},\n                                    { name: 'ZoomToFit', kind: IconButton, attributes: {title: 'Zoom to fit'}, classes: 'bt bt-max', ontap: 'activeZoomToFit'},\n                                    { name: 'bt-move', kind: IconButton, attributes: {title: 'Move'}, classes: 'bt bt-min', ontap: 'activeMoving'}\n                                ]}\n                            ]},\n                            { name: 'ViewPortOpen', kind: Button, content: 'EDIT PLAN VIEW', attributes: {title: ''}, classes: 'bt bt-footer-default', ontap: 'viewPortTurnOn' },\n                            { fit: true },\n                            { kind: FileInputDecorator, defaultClient: { kind: IconButton, content: ''}, attributes: {title: 'Up'}, classes: 'bt bt-up2', onSelect: 'floorAddImage'}\n                        ]}\n                    ]},\n                    // Right Column\n                    { name: 'ListSetting', kind: plSiteListSetting, classes: 'box-shadow',\n                        onFloorTap: 'onFloorTap',\n                        onZoneTap: 'onZoneTap',\n                        onZoneSetting: 'onZoneSetting'\n                    }\n                ]}\n            ]}\n        ]}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n        this.ready = false;\n\n        // available\n        this.project = {};\n        this.floors = new Collection();\n        this.fillColor = SITE_SETTING.fillColor;\n\n        // Transform Floor\n        this.transformation = '';\n        this.transformationA = '';\n\n        // Transform SVG\n        this.transformSvg = '';\n        this.transformSvgA = '';\n    },\n    create: function() {\n        this.inherited(arguments);\n\n        // Available\n        this.currentFloorId = undefined;\n        this.oldFloorId = undefined;\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        // Set graphic\n        siteGraphic.panel = this;\n\n        // Set tools\n        this.tools = [\n            this.$['bt-selector'],\n            this.$['bt-polyline'],\n            this.$['bt-rectangle'],\n            this.$['bt-circle'],\n            this.$['bt-add-text'],\n            this.$['bt-zoom'],\n            this.$['bt-move']\n        ];\n    },\n    init: function() {\n        var _self = this;\n\n        this.dimension();\n\n        if(this.ready !== true) {\n            this.ready = true;\n            this.render();\n\n            // AddEventListener to Parent\n            document.getElementById(this.getId()).addEventListener('dragover', function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n            }, false);\n\n            document.getElementById(this.getId()).addEventListener('drop', function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n            }, false);\n\n            // Init data\n            //foldersService.find(PL.baseUrl + 'assets/jsons/site.json', {}, function(inSender, inResponse) {\n            //    _self.initSideBar(inResponse);\n            //});\n            _self.initSideBar(SENSOR_LIST);\n\n            // Init floor\n            //foldersService.find(PL.baseUrl + 'assets/jsons/project.json', {}, function(inSender, inResponse) {\n            //    _self.initFloors(inResponse);\n            //});\n            _self.initFloors(plProject);\n\n            // Enable selector\n            this.activeSelector();\n        } else {\n            // Hide DrawerTools\n            this.$.DrawerTools.hide();\n            // Show ViewPortOpen\n            this.$.ViewPortOpen.show();\n\n            // Disable view port\n            this.$.ViewPortOff.triggerHandler('ontap');\n\n            // Enable selector\n            if(typeof this.toolStatus === 'function') {\n                this.toolStatus();\n            } else {\n                this.activeSelector();\n            }\n        }\n\n        // Reset\n        siteGraphic.drawing = false;\n        this.initColorPopup();\n\n        // Reload for wiring page\n        WIRING_SETTING.RELOAD = true;\n    },\n    setProgress: function(percent){\n        Signals.send('onProgress', {page: APP_PROGRESS.PR_SITE, key: 'SITE_BUILDER', value: percent});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    resizeComplete: function() {\n        if(this.ready === true) {\n            this.dimension();\n\n            // Floor Resize\n            this.floorResize();\n\n            this.resizeViewPort();\n\n            // Set position attribute for svg\n            this.initDrawAreaPositionByCollapse();\n        }\n    },\n    // Set Dimension\n    dimension: function() {\n        this.contentWidth = utils.getCSSProperty(this.$.ViewPortPanel, 'offsetWidth', false);\n        this.contentHeight = utils.getCSSProperty(this.$.ViewPortPanel, 'offsetHeight', false);\n\n        // Check validation\n        if(this.floors.count <= 1) return;\n\n        this.floorWidth = this.contentWidth;\n        this.floorHeight = Math.floor(this.contentHeight / (this.floors.count - 1));\n\n        // Transform Floor\n        this.transformation = 'scale(0.7, 2) rotateX(' + SITE_SETTING.rotateX + 'deg)';\n        this.transformationA = 'scale(0.75, 2.05) rotateX(' + SITE_SETTING.rotateX + 'deg)';\n\n        // Transform SVG\n        this.transformSvg = 'scale(1, ' + this.floorHeight / this.contentHeight + ') translate(0, -' + this.contentHeight + 'px)';\n        this.transformSvgA = 'scale(1, ' + this.floorHeight / this.contentHeight + ') translate(0, -' + this.contentHeight + 'px)';\n    },\n    // Listening mouse click event\n    tapHandler: function(inSender, inEvent) {\n        // FullScreen Control\n        if(inEvent.originator.name == 'FullScreenButton') {\n            var targetControl = this.$.MainPanels;\n            // If _targetControl_ is currently fullscreen, cancel fullscreen\n            if(targetControl.isFullscreen()) {\n                targetControl.cancelFullscreen();\n                // If _targetControl_ is not currently fullscreen, request fullscreen\n            } else {\n                targetControl.requestFullscreen();\n            }\n        }\n    },\n    // Init color popup\n    initColorPopup: function() {\n        $('#' + this.$.FillColorContextualPopup.getId()).remove();\n        this.$.Footer.render();\n    },\n    // Init sidebar\n    initSideBar: function(data) {\n        // Destroy if children exist\n        this.$.SideBarWrapper.destroyClientControls();\n        // Create\n        var contentComponents = new Array();\n        for(var i = 0; i < data.length; i++) {\n            var childComponents = new Array();\n            for(var j = 0; j < data[i].sensors.length; j++) {\n                childComponents.push({\n                    kind: SideBarItem,\n                    sensorId: data[i].sensors[j].id,\n                    title: data[i].sensors[j].name,\n                    image: data[i].sensors[j].url,\n                    width: data[i].sensors[j].width,\n                    height: data[i].sensors[j].height,\n                    sensorInfo: data[i].sensors[j],\n                    scale: 1.5,\n                    ontap: 'handleItemTap',\n                    ondrag: 'handleItemOnDrag',\n                    ondragstart: 'handleItemDragStart',\n                    ondragfinish: 'handleItemDragFinish'\n                });\n            }\n            contentComponents.push([data[i].name, childComponents]);\n        }\n        this.$.SideBarWrapper.createComponent({\n            name: 'SideBar',\n            kind: SideBar,\n            style: 'enyo-fit',\n            touch: false,\n            onSideBarDragStart: 'onSideBarDrag',\n            onSideBarOnDrag: 'onSideBarDrag',\n            onSideBarDragFinish: 'onSideBarDrag',\n            contentComponents: contentComponents\n        }, {owner: this});\n        this.$.SideBarWrapper.render();\n    },\n    // Init Floor\n    initFloors: function(data) {\n        var _sef = this;\n\n        // Init ZoneList\n        this.$.ListSetting.init(data);\n\n        // Init Floor Panel\n        this.project = data;\n        this.floors = data.floors;\n\n        // Destroy if children exist\n        this.$.ViewPortPanel.destroyClientControls();\n\n        // Create\n        for(var index = this.floors.count - 1; index > 0; index--) {\n            var floor = this.floors.item(index);\n            this.$.ViewPortPanel.createComponent({\n                name: 'Floor_' + floor.id,\n                kind: FittableRows,\n                classes: 'floors',\n                style: PREFIX.css + 'perspective: ' + SITE_SETTING.perspective + 'px',\n                floorId: floor.id,\n                info: floor,\n                ontap: 'floorTap',\n                components: [\n                    { name: 'Floor_' + floor.id + '_Content', classes: 'level enyo-fit', components: [\n                        { name: 'Floor_' + floor.id + '_Svg', tag: 'svg' },\n                        { name: 'Floor_' + floor.id + '_Input', tag: 'input', attributes: {value: '', type: 'text'}, classes: 'enyo-input onyx-input insert-text', style: 'display:none'}\n                    ]},\n                    { name: 'Floor_' + floor.id + '_Name', classes: 'title', content: utils.getOrdinal(index) + ' FLOOR'}\n                ]}, {owner: this});\n        }\n\n        // Render\n        this.$.ViewPortPanel.render();\n        this.$.Footer.render();\n\n        // AddEventListener to Floor & Init Graphic\n        for(var i = 0; i < this.$.ViewPortPanel.children.length; i++) {\n            var floor = this.$.ViewPortPanel.children[i];\n\n            // AddEventListener to Floor\n            floor.node.addEventListener('dragover', function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n            }, false);\n\n            floor.node.addEventListener('drop', function(e) {\n                e.stopPropagation();\n                e.preventDefault();\n                var dt = e.dataTransfer;\n                var files = dt.files;\n                //var panel = e.target.attributes.panel.value;\n                // Set background\n                _sef.initFloorBackground(files);\n            }, false);\n\n            // Init Graphic\n            siteGraphic.init(floor.info, this.$['Floor_' + floor.floorId + '_Svg'], this.$['Floor_' + floor.floorId + '_Input'], _sef.contentWidth, _sef.contentHeight);\n        }\n\n        // Select default\n        if(this.$.ViewPortPanel.children.length > 0) {\n            this.$.ViewPortPanel.children[0].triggerHandler('ontap');\n        }\n\n        // Resize\n        this.resizeComplete();\n    },\n    // Set position attribute for svg\n    initDrawAreaPositionByCollapse: function() {\n        var offset = this.$.ViewPortPanel.getAbsoluteBounds();\n        for(var index = this.floors.count - 1; index > 0; index--) {\n            var floor = this.floors.item(index);\n            this.$['Floor_' + floor.id + '_Svg'].setAttributes({offsetTop: offset.top, offsetLeft: offset.left});\n        }\n    },\n    // Color for draw and color popup\n    initAvailableDraw: function(option) {\n        var color = (option.color ? option.color : '#ffffff');\n\n        // Init popup color\n        this.initColorPopup();\n\n        // Set available\n        this.currentFloorId = option.floorId;\n        this.currentZoneId = option.zoneId;\n        this.fillColor = color;\n\n        siteGraphic.mAttributes.fill = utils.getRgbaString(color, SITE_SETTING.transparency);\n        siteGraphic.selectShape(option.floorId, option.zoneId);\n        siteGraphic.setAvailableDraw({\n            color: siteGraphic.mAttributes.fill,\n            floorId: option.floorId,\n            zoneId: option.zoneId\n        });\n\n        this.$['FillColorContent'].applyStyle('background-color', color);\n        this.$['FillColorPicker'].setColor(this.fillColor.substr(1, 6));\n//FIXME: is this really removed in 2.7?        this.$['FillColorPicker'].load();\n    },\n    initFloorBackground: function(files) {\n        var _self = this;\n        var f = utils.getImageUrl(files);\n        var floorId = this.currentFloorId;\n\n        Signals.send('onLoading', {method: 'show'});\n\n        f.then(function(result) {\n            if(result) {\n                if(siteGraphic.setBackground(result.url, result.width, result.height, _self.contentWidth, _self.contentHeight)) { // Success\n                    _self.floorGridHasImage(floorId);\n                } else {\n                    console.info('Draw panel is not init');\n                }\n            }\n            Signals.send('onLoading', {method: 'hide'});\n        });\n    },\n    // Upload Image For Floor\n    floorAddImage: function(inSender, inEvent) {\n        if(this.$.ListSetting.currentFloorId == -1) {\n            console.info('Draw panel is not init');\n\n            return false;\n        }\n\n        this.initFloorBackground(inEvent.files);\n    },\n    floorTap: function(inSender) {\n        if(siteGraphic.drawing !== true) {\n            if(this.currentFloorId === inSender.floorId) { // Open draw panel\n                if(!this.$['Floor_' + inSender.floorId].isOpenViewPort) {\n                    this.$.ViewPortOpen.triggerHandler('ontap');\n                }\n            } else {\n                // Remove selected\n                for(var i = 0; i < this.$.ViewPortPanel.children.length; i++) {\n                    var floorId = this.$.ViewPortPanel.children[i].floorId;\n                    if(this.$['Floor_' + floorId].hasClass('active')) {\n                        this.$['Floor_' + floorId].removeClass('active');\n                        this.$['Floor_' + floorId + '_Content'].applyStyle(PREFIX.css + 'transform', this.transformation);\n                    }\n                }\n                // Set old\n                this.oldFloorId = this.currentFloorId;\n                // Set current\n                this.currentFloorId = inSender.floorId;\n                // Active Resize\n                inSender.addClass('active');\n                // Resize\n                this.floorResize();\n            }\n            // Select Zone Menu\n            this.$.ListSetting.pFloorTap(inSender.floorId);\n            // Reset\n            this.$['Floor_' + inSender.floorId].isOpenViewPort = false;\n        }\n    },\n    onFloorTap: function(inSender, inEvent) {\n        var timeout = 0,\n            _self = this;\n\n        // Clear available\n        siteGraphic.setAvailableDraw({});\n\n        // Draw Area\n        if(siteGraphic.drawing === true) {\n            this.$.ViewPortOff.triggerHandler('ontap');\n            timeout = SITE_SETTING.duration * 1000 + 100; // The time required to turn off ViewPortOff\n        }\n\n        setTimeout(function() {\n            // Remove selected\n            for(var index = _self.floors.count - 1; index > 0; index--) {\n                var floor = _self.floors.item(index);\n                if(_self.$['Floor_' + floor.id].hasClass('active')) {\n                    _self.$['Floor_' + floor.id].removeClass('active');\n\n                    // Remove current tag for graphic\n                    if(_self.$['Floor_' + floor.id + '_Svg'].getId() == siteGraphic.currentTagName) {\n                        siteGraphic.currentTagName = undefined;\n                    }\n                }\n                _self.$['Floor_' + floor.id + '_Content'].applyStyle(PREFIX.css + 'transform', _self.transformation);\n            }\n\n            if(!_self.$['Floor_' + inEvent.floorId]) { // Floor not existing OR OUTDOOR\n                _self.currentFloorId = -1;\n            } else { // Selected\n                _self.currentFloorId = inEvent.floorId;\n\n                _self.$['Floor_' + inEvent.floorId].isOpenViewPort = true;\n                _self.$['Floor_' + inEvent.floorId].triggerHandler('ontap');\n\n                // Active\n                _self.$['Floor_' + inEvent.floorId].addClass('active');\n                _self.floorResize();\n\n                // Set current tag graphic\n                siteGraphic.currentTagName = _self.$['Floor_' + inEvent.floorId + '_Svg'].getId();\n            }\n        }, timeout);\n    },\n    onZoneTap: function(inSender, inEvent) {\n        var timeout = 0,\n            _self = this;\n        if(inEvent.sender.isfloorTap === true) {\n            timeout = SITE_SETTING.duration * 1000 + 100; // if onFloorTap\n        }\n\n        setTimeout(function() {\n            _self.initAvailableDraw(inEvent);\n        }, timeout);\n        //================================================================\n        // Added in order to open zone panel automatically\n        \n        if(document.body.clientWidth <= 768) {\n            TOOLBARS.SITE_BUILDER = 300;\n        } else {\n            TOOLBARS.SITE_BUILDER = 400;\n        }\n        //console.log(this);\n        var widthPanel = (utils.getCSSProperty(this.$.ZoneList, 'offsetWidth', false) - TOOLBARS.SITE_BUILDER);\n        this.$.ZoneListPanels.applyStyle('width', widthPanel + 'px');\n        this.$.ListSetting.applyStyle('width', TOOLBARS.SITE_BUILDER + 'px');\n        \n        this.$.ListSetting.dimension();\n\n        this.resizeComplete();\n        \n        //================================================================\n        //console.log(inEvent.type);\n    },\n    // Check zone existing\n    zoneExisting: function(floorId, zoneId) {\n        return this.$.ListSetting.zoneExisting(floorId, zoneId);\n    },\n    // Have the upload image on top at 100% opacity\n    floorGridHasImage: function(floorId) {\n        if(this.$['Floor_' + floorId]) {\n            if(siteGraphic.hasBackground(this.$['Floor_' + floorId + '_Svg'].getId())) {\n                this.$['Floor_' + floorId].addClass('has-image');\n            } else {\n                this.$['Floor_' + floorId].removeClass('has-image');\n            }\n        }\n    },\n    floorResize: function() {\n        if(siteGraphic.drawing === true || this.floors.count <= 1) return;\n\n        for(var i = 0; i < this.$.ViewPortPanel.children.length; i++) {\n            var floor = this.$.ViewPortPanel.children[i];\n            var floorId = floor.floorId;\n\n            // Set height\n            this.$['Floor_' + floorId].applyStyle('height', this.floorHeight + 'px');\n\n            // Transform Parent\n            this.$['Floor_' + floorId + '_Content'].applyStyle('width', this.floorWidth + 'px');\n            this.$['Floor_' + floorId + '_Content'].applyStyle('height', this.floorHeight + 'px');\n            this.$['Floor_' + floorId + '_Content'].applyStyle(PREFIX.css + 'transform', this.transformation);\n            this.$['Floor_' + floorId + '_Content'].applyStyle(PREFIX.css + 'transition-duration', '');\n\n            // Transform SVG\n            this.$['Floor_' + floorId + '_Svg'].applyStyle(PREFIX.css + 'transform', this.transformSvg);\n\n            // Save position\n            this.$['Floor_' + floorId + '_Content'].distanceTop = this.floorHeight * i;\n\n            // Has upload image\n            this.floorGridHasImage(floorId);\n\n            // Active Resize\n            if(this.$['Floor_' + floorId].hasClass('active')) {\n                // Set currentTagName\n                siteGraphic.currentTagName = this.$['Floor_' + floorId + '_Svg'].getId();\n                // Set current\n                this.currentFloorId = floorId;\n                // Transform\n                this.$['Floor_' + floorId + '_Content'].applyStyle(PREFIX.css + 'transform', this.transformationA);\n                this.$['Floor_' + floorId + '_Svg'].applyStyle(PREFIX.css + 'transform', this.transformSvgA);\n            }\n        }\n    },\n    onSideBarDrag: function(inSender, inEvent) {\n        // Set selector\n        if(siteGraphic.drawing === true) {\n            this.activeSelector();\n        }\n        var scale = inEvent.scale ? inEvent.scale : 1,\n            width = inEvent.width ? inEvent.width * scale : 30,\n            height = inEvent.height ? inEvent.height * scale : 30;\n\n        var startPos = utils.getPosition();\n\n        if(inEvent.type == 'onSideBarDragStart') {\n            // Disable notification\n            Signals.send('onNotification', {method: 'close'});\n\n            this.offset = $('#' + inEvent.id).find('#' + inEvent.id + '_Image').offset();\n\n            this.offset.x = startPos.x  - this.offset.left;\n            this.offset.y = startPos.y  - this.offset.top;\n\n            var pos = {\n                x: startPos.x - this.offset.x,\n                y: startPos.y - this.offset.y\n            };\n\n            PL.dragImage.setSrc(inEvent.image);\n            PL.dragImage.setStyle('width:' + width + 'px; height:' + height + 'px; position:fixed; opacity:0.5; filter:alpha(opacity=50); left:' + pos.x + 'px; top:' + pos.y + 'px;');\n            PL.dragImage.setShowing(true);\n            PL.dragImage.info = inEvent.sensorInfo;\n            PL.dragImage.startPos = startPos;\n            this.currentFloorId = this.$.ListSetting.currentFloorId;\n        } else if(inEvent.type == 'onSideBarOnDrag') { // Drag\n            var pos = {\n                x: startPos.x - this.offset.x,\n                y: startPos.y - this.offset.y\n            };\n\n            PL.dragImage.applyStyle('left', pos.x + 'px');\n            PL.dragImage.applyStyle('top', pos.y + 'px');\n        } else if(inEvent.type == 'onSideBarDragFinish') { // Finish\n            var isFinish = false;\n\n            // If drag on svg of floor, insert a new sensor icon on that\n            if(siteGraphic.isInside()) { // Drop to panel\n                var tagName = this.viewPort.node.parentElement.id;\n                var offset = document.getElementById(tagName).getBoundingClientRect();\n\n                var mouse = utils.getPosition();\n                mouse.x -= offset.left;\n                mouse.y -= offset.top;\n\n                // Scroll Fix\n                mouse.x += document.getElementById(tagName).scrollLeft;\n                mouse.y += document.getElementById(tagName).scrollTop;\n\n                var pos = {\n                    x: mouse.x - this.offset.x,\n                    y: mouse.y - this.offset.y\n                };\n\n                isFinish = siteGraphic.createSensor({\n                    sensorId: PL.dragImage.info.id,\n                    name: PL.dragImage.info.name,\n                    type: PL.dragImage.info.type,\n                    kind: PL.dragImage.info.kind,\n                    classes: PL.dragImage.info.classes,\n                    url: PL.dragImage.info.url,\n                    w: PL.dragImage.info.width,\n                    h: PL.dragImage.info.height,\n                    x: pos.x,\n                    y: pos.y\n                });\n\n                // Notification\n                if(!isFinish) {\n                    Signals.send('onNotification', {method: 'message', message: 'Sensor must be placed in zone!'});\n                }\n            } else { // Insert in sensor list\n                //this.$.ListSetting.floorSelect(this.currentFloorId);\n                //PL.dragImage.setShowing(false);\n                isFinish = this.$.ListSetting.pSensorAddToSensorList({\n                    sensorId: PL.dragImage.info.id,\n                    name: PL.dragImage.info.name,\n                    type: PL.dragImage.info.type,\n                    kind: PL.dragImage.info.kind,\n                    classes: PL.dragImage.info.classes,\n                    url: PL.dragImage.info.url,\n                    w: PL.dragImage.info.width,\n                    h: PL.dragImage.info.height\n                });\n\n                // Notification\n                if(!isFinish) {\n                    Signals.send('onNotification', {method: 'message', message: 'Sensor must be placed in zone!'});\n                }\n            }\n\n            // Check create successfully\n            if(isFinish === false) {\n                var startPos = PL.dragImage.startPos;\n                var currentLeft = utils.getCSSProperty(PL.dragImage, 'offsetLeft', false);\n                var currentTop = utils.getCSSProperty(PL.dragImage, 'offsetTop', false);\n\n                // Move left start\n                var leftAni = new Animator({\n                    duration: 500,\n                    startValue: currentLeft,\n                    endValue: startPos.x,\n                    onStep: bind(this, function(data) {\n                        PL.dragImage.applyStyle('left', data.value + 'px');\n                    }),\n                    onEnd: bind(this, function() {\n\n                    })\n                });\n                leftAni.play();\n\n                // Move top start\n                var rightAni = new Animator({\n                    duration: 500,\n                    startValue: currentTop,\n                    endValue: startPos.y,\n                    onStep: bind(this, function(data) {\n                        PL.dragImage.applyStyle('top', data.value + 'px');\n                    }),\n                    onEnd: bind(this, function() {\n                        PL.dragImage.setShowing(false);\n                    })\n                });\n                rightAni.play();\n            } else {\n                PL.dragImage.setShowing(false);\n            }\n\n            // Reset available\n            delete this.offset;\n            delete PL.dragImage.info;\n        }\n    },\n    // Full Screen\n    toggleFullScreen: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case 'tap':\n                this.$.MainPanels.setIndex(this.$.MainPanels.index ? 0 : 1);\n                break;\n            case 'dragstart':\n                this.$.MainPanels.setDraggable(true);\n                break;\n            case 'dragfinish':\n                this.$.MainPanels.setDraggable(false);\n                break;\n        }\n    },\n    transitionFinish: function(inSender, inEvent) {\n        if(inEvent.fromIndex === inEvent.toIndex) {\n            return;\n        }\n        if(inSender.name === 'MainPanels') {\n            if(this.$.MainPanels.getIndex()) {\n                siteGraphic.isCollapsed = true;\n            } else {\n                siteGraphic.isCollapsed = false;\n            }\n        }\n        this.resizeComplete();\n    },\n    onZoneSetting: function(inSender, inEvent) {\n        //console.log(inEvent);\n        if(document.body.clientWidth <= 768) {\n            TOOLBARS.SITE_BUILDER = 300;\n        } else {\n            TOOLBARS.SITE_BUILDER = 400;\n        }\n        if(inEvent.open === true) {\n            var widthPanel = (utils.getCSSProperty(this.$.ZoneList, 'offsetWidth', false) - TOOLBARS.SITE_BUILDER);\n            this.$.ZoneListPanels.applyStyle('width', widthPanel + 'px');\n            this.$.ListSetting.applyStyle('width', TOOLBARS.SITE_BUILDER + 'px');\n            this.ZoneListBullshit = false;\n        } else {\n            this.floorWidth = (utils.getCSSProperty(this.$.ZoneList, 'offsetWidth', false) - TOOLBARS.SITE_BUILDER / 2);\n            this.$.ZoneListPanels.applyStyle('width', this.floorWidth + 'px');\n            this.$.ListSetting.applyStyle('width', TOOLBARS.SITE_BUILDER / 2 + 'px');\n        }\n        this.$.ListSetting.dimension();\n\n        this.resizeComplete();\n    },\n    viewPortTurnOn: function(inSender, inEvent) {\n        if(this.currentFloorId === undefined) return;\n        siteGraphic.drawing = true;\n        \n        // Add class\n        this.$['Floor_' + this.currentFloorId].addClass('drawing');\n\n        // Disable element other\n        //for(var pos = 0; pos < this.$.ViewPortPanel.children.length; pos++) {\n        //    if(this.$.ViewPortPanel.children[pos].floorId != this.currentFloorId) {\n        //        this.$.ViewPortPanel.children[pos].hide();\n        //    }\n        //}\n\n        // Init style\n        this.scaleViewPort();\n\n        // Init ViewPort\n        siteGraphic.currentTagName = this.$['Floor_' + this.currentFloorId + '_Svg'].getId();\n        this.viewPort = siteGraphic.floors[siteGraphic.currentTagName].g.paper;\n\n        var _self = this;\n        inSender.disabled = true;\n        setTimeout(function() {\n            // Active selector\n            _self.activeSelector();\n            // Show DrawerTools\n            _self.$.DrawerTools.show();\n            // Hide ViewPortOpen\n            _self.$.ViewPortOpen.hide();\n            // Reload\n            _self.$.Footer.render();\n\n            // Add Stack List\n            if(inSender && inEvent) {\n                STACK_LIST.addStack(\n                    _self.name,\n                    _self.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.CALLBACK,\n                    inSender,\n                    'viewPortTurnOn',\n                    _self,\n                    'viewPortCallBack'\n                );\n            }\n            inSender.disabled = false;\n        }, SITE_SETTING.duration * 1000 + 100);\n    },\n    viewPortTurnOff: function(inSender, inEvent) {\n        var _self = this;\n        siteGraphic.drawing = false;\n\n        // Enable element other\n        //for(var pos = 0; pos < this.$.ViewPortPanel.children.length; pos++) {\n        //    this.$.ViewPortPanel.children[pos].show();\n        //}\n\n        // Init style\n        this.scaleViewPort();\n\n        // Off input and reset zoom\n        siteGraphic.resetInputAndZoom();\n        inSender.disabled = true;\n        setTimeout(function() {\n            // Remove class\n            _self.$['Floor_' + _self.currentFloorId].removeClass('drawing');\n            // Hide DrawerTools\n            _self.$.DrawerTools.hide();\n            // Show ViewPortOpen\n            _self.$.ViewPortOpen.show();\n            // Reload\n            _self.$.Footer.render();\n            // Resize\n            _self.floorResize();\n\n            // Add Stack List\n            if(inSender && inEvent) {\n                STACK_LIST.addStack(\n                    _self.name,\n                    _self.name,\n                    STACK_TYPES.ENYO,\n                    STACK_METHODS.CALLBACK,\n                    inSender,\n                    'viewPortTurnOff',\n                    _self,\n                    'viewPortCallBack'\n                );\n            }\n            inSender.disabled = false;\n        }, SITE_SETTING.duration * 1000 + 100);\n    },\n    viewPortCallBack: function(stack) {\n        if(stack.value === 'viewPortTurnOff') {\n            this.viewPortTurnOn(stack.sender);\n        } else if(stack.value === 'viewPortTurnOn') {\n            this.viewPortTurnOff(stack.sender);\n        }\n    },\n    // Resize draw area\n    resizeViewPort: function() {\n        if(!this.currentFloorId) return;\n        var _self = this;\n\n        function callback() {\n            _self.scaleViewPort();\n        }\n\n        siteGraphic.setSizeViewPort(_self.contentWidth, _self.contentHeight, callback);\n    },\n    // Scale draw area\n    scaleViewPort: function() {\n        if(!this.currentFloorId) return;\n\n        if(siteGraphic.drawing) {\n            var distanceTop = this.$['Floor_' + this.currentFloorId + '_Content'].distanceTop;\n\n            // Parent Animation\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle(PREFIX.css + 'transform', 'scale(1, 1) rotateX(0deg)');\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle(PREFIX.css + 'transition', 'height ' + SITE_SETTING.duration + 's, top ' + SITE_SETTING.duration + 's, opacity ' + SITE_SETTING.duration + 's, ' + PREFIX.css + 'transform ' + SITE_SETTING.duration + 's ease-in');\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle('width', this.contentWidth + 'px');\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle('height', this.contentHeight + 'px');\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle('top', '-' + distanceTop + 'px');\n\n            // SVG Animation\n            this.$['Floor_' + this.currentFloorId + '_Svg'].applyStyle(PREFIX.css + 'transform', 'scale(1, 1) translate(0,0)');\n            this.$['Floor_' + this.currentFloorId + '_Svg'].applyStyle(PREFIX.css + 'transition', 'height ' + SITE_SETTING.duration + 's, top ' + SITE_SETTING.duration + 's, opacity ' + SITE_SETTING.duration + 's, ' + PREFIX.css + 'transform ' + SITE_SETTING.duration + 's ease-in');\n\n            // SVG Show\n            setTimeout(function() {\n                siteGraphic.setShowing(true);\n            }, SITE_SETTING.duration * 1000);\n        } else {\n            // SVG Hide\n            setTimeout(function() {\n                siteGraphic.setShowing(false);\n            }, SITE_SETTING.duration * 1000);\n\n//            console.log(\"this.currentFloorId %O\", this.currentFloorId);\n//            console.log(\"    Content %O\", this.$['Floor_' + this.currentFloorId + '_Content']);\n\n            // Has upload image\n            this.floorGridHasImage(this.currentFloorId);\n\n            // Animation\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle(PREFIX.css + 'transform', this.transformationA);\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle('width', this.floorWidth + 'px');\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle('height', this.floorHeight + 'px');\n            this.$['Floor_' + this.currentFloorId + '_Content'].applyStyle('top', '0');\n\n            // SVG Animation\n            this.$['Floor_' + this.currentFloorId + '_Svg'].applyStyle(PREFIX.css + 'transform', this.transformSvgA);\n        }\n    },\n    colorTap: function() {\n        //this.$['FillColorPicker'].color = this.fillColor.substr(1, 6);\n        //this.$['FillColorPicker'].load();\n    },\n    colorPick: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case 'onColorPick':\n                break;\n            case 'onColorSlide':\n                break;\n            case 'onColorButton':\n                this.$['FillColorContextualPopup'].hide();\n                this.initAvailableDraw({\n                    color: inEvent.originator.color,\n                    floorId: this.currentFloorId,\n                    zoneId: this.currentZoneId\n                });\n                siteGraphic.adjustFillColor(this.currentFloorId, this.currentZoneId, this.fillColor);\n                break;\n        }\n    },\n    activeTools: function(name) {\n        for(var i = 0; i < this.tools.length; i++) {\n            this.tools[i].removeClass('active');\n            if(this.tools[i].name === name) {\n                this.tools[i].addClass('active');\n            }\n        }\n    },\n    // active icon selector\n    activeSelector: function() {\n        siteGraphic.activeIcons('isSelector', true);\n        this.activeTools('bt-selector');\n        this.toolStatus = this.activeSelector;\n    },\n    // active add polyline\n    activeAddPolyLine: function() {\n        siteGraphic.activeIcons('isAddPolyline', true);\n        this.activeTools('bt-polyline');\n        this.toolStatus = this.activeAddPolyLine;\n    },\n    // active add rectangle\n    activeAddRectangle: function() {\n        siteGraphic.activeIcons('isAddRectangle', true);\n        this.activeTools('bt-rectangle');\n        this.toolStatus = this.activeAddRectangle;\n    },\n    // active add circle\n    activeAddCircle: function() {\n        siteGraphic.activeIcons('isAddCircle', true);\n        this.activeTools('bt-circle');\n        this.toolStatus = this.activeAddCircle;\n    },\n    // active add text\n    activeAddText: function() {\n        siteGraphic.activeIcons('isAddText', true);\n        this.activeTools('bt-add-text');\n        this.toolStatus = this.activeAddText;\n    },\n    // active moving (resize entities)\n    activeMoving: function() {\n        siteGraphic.activeIcons('isMoving', true);\n        this.activeTools('bt-move');\n        this.toolStatus = this.activeMoving;\n    },\n    // Active zoom In\n    activeZoom: function() {\n        //siteGraphic.zoomInViewPort();\n        siteGraphic.activeIcons('isZoom', true);\n        this.activeTools('bt-zoom');\n        siteGraphic.zoomViewPort();\n    },\n    // Active zoom to fit\n    activeZoomToFit: function() {\n        siteGraphic.zoomToFit();\n    },\n    zoomIn: function() {\n        if(!this.$['bt-zoom'].hasClass('zoom-out')) {\n            this.$['bt-zoom'].addClass('zoom-out');\n        }\n    },\n    zoomOut: function() {\n        if(this.$['bt-zoom'].hasClass('zoom-out')) {\n            this.$['bt-zoom'].removeClass('zoom-out');\n        }\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var stack = STACK_LIST.getStackByParentPanel(this.name);\n        if(stack) {\n            if(stack.type === STACK_TYPES.SVG) {\n                if(siteGraphic.drawing) {\n                    siteGraphic.undo();\n                }\n            } else if(stack.type === STACK_TYPES.ENYO) {\n                STACK_LIST.undo(this.name);\n            }\n        }\n    },\n    // Delete item if key code 46\n    deleteSelectedItems: function() {\n        siteGraphic.deleteSelectedItems();\n    }\n});\n","//\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableColumnsLayout = require('layout/FittableLayout').Columns,\n    Panels = require('layout/Panels'),\n    CollapsingArranger = require('layout/CollapsingArranger'),\n    CarouselArranger = require('layout/CarouselArranger');\n\nvar Button = require('onyx/Button'),\n    ContextualPopup = require('onyx/ContextualPopup'),\n    Grabber = require('onyx/Grabber'),\n    Icon = require('onyx/Icon'),\n    IconButton = require('onyx/IconButton'),\n    MenuDecorator = require('onyx/MenuDecorator'),\n    plStSearch = require('./search'),\n    plStSideBar = require('./sidebar').SideBar,\n    plStSideBarItem = require('./sidebar').SideBarItem,\n    plStTankSettings = require('./pullout').TankSettings,\n    plStTemplate = require('./template'),\n    plStZoneSettings = require('./pullout').ZoneSettings;\n\nvar utils = require('../../../common/services/utils.js');\n\nvar systemGraphic = require('./graphic.js');\n\nvar eGetPosition= require('enyo/dispatcher').getPosition;\nvar eClone = require('enyo/utils').clone;\n\nvar IS_TOUCH = require('enyo/platform').touch;\n\n\nmodule.exports = kind({\n    name: \"pl.SystemView\",\n    kind: FittableRows,\n    classes: \"form-system\",\n    handlers: {\n        ontap: \"tapHandler\"\n    },\n    components: [\n        { name: \"MainPanels\", kind: Panels, fit: true, arrangerKind: CollapsingArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: \"main-panels\", onTransitionFinish: \"transitionFinish\", components: [\n            { name: \"LeftColumn\", kind: Panels, arrangerKind: CarouselArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: \"widget enyo-fit\", components: [\n                { name: \"EquipmentLeft\", kind: FittableRows, index: 0, classes: \"enyo-fit\", components: [\n                    { name: \"EquipmentSearch\", kind: plStSearch},\n                    { name: \"EquipmentSideBar\", kind: FittableColumns, fit: true },\n                    { kind: FittableColumns, classes: \"footer\", components: [\n                        { classes: \"action pull-left\", components:[\n                            {name: \"ComponentAddButton\", kind: IconButton, classes: 'btn btn-add-new', attributes: {title: \"Add A User Component\"}}\n                        ]},\n                        { fit: true },\n                        { kind: Button, content: \"TEMPLATES\", attributes: {title: \"\"}, classes: \"bt bt-footer-default\", panelIndex: 1, ontap: \"openLeftPanel\"}\n                    ]}\n                ]},\n                { name: \"TemplateLeft\", kind: FittableRows, index: 1, classes: \"enyo-fit\", components: [\n                    { name: \"TemplateSearch\", kind: plStSearch},\n                    { name: \"TemplateSideBar\", kind: FittableColumns, fit: true},\n                    { kind: FittableColumns, classes: \"footer\", components: [\n                        { fit: true },\n                        { kind: Button, content: \"EQUIPMENT\", attributes: {title: \"\"}, classes: \"bt bt-footer-default\", panelIndex: 0, ontap: \"openLeftPanel\"}\n                    ]}\n                ]}\n            ]},\n            { name: \"MainContent\", kind: FittableColumns, classes: \"panel enyo-fit box-shadow\", components: [\n                { name: \"ViewPortWrapper\", kind: FittableRows, classes: \"enyo-fit\", style: \"z-index:0\", components: [\n                    { name: \"ViewPortPanel\", kind: Panels, fit: true, style: \"position: relative\", classes: \"border-left\", components: [\n                        { name: \"SystemBuilder\", classes: \"enyo-fit\", components: [\n                            { name: \"Svg\", tag: \"svg\", classes: \"enyo-fit\" },\n                            { name: \"Input\", tag: \"input\", attributes: {value: \"\", type: \"text\"}, classes: \"enyo-input onyx-input insert-text\", style: \"display:none\"}\n                        ]}\n                    ]},\n                    { name: \"Footer\", kind: FittableColumns, classes: \"footer\", components: [\n                        { kind: Grabber, attributes: {title: \"Collapsing\"}, classes: \"bt bt-collapsing\", ontap: \"toggleFullScreen\", ondragstart: \"toggleFullScreen\", ondragfinish: \"toggleFullScreen\" },\n                        { kind: IconButton, name: \"bt-selector\", attributes: {title: \"Selector/Move\"}, classes: \"bt bt-move active\", ontap: \"activeSelector\"},\n                        { kind: FittableColumns, classes: \"box-group\", components: [\n                            { kind: IconButton, name: \"bt-connector\", attributes: {title: \"Connector\"}, classes: \"bt bt-connector\", ontap: \"activeConnector\"},\n                            { kind: IconButton, name: \"bt-outline\", attributes: {title: \"Outline\"}, classes: \"bt bt-outline\", ontap: \"activeOutline\"},\n                            { kind: IconButton, name: \"bt-parallel\", attributes: {title: \"Create Parallel\"}, classes: \"bt bt-CPI\", ontap: \"activeCreateParallel\"},\n                            { kind: IconButton, name: \"bt-add-text\", attributes: {title: \"Add Text\"}, classes: \"bt bt-text\", ontap: \"activeAddText\"}\n                        ]},\n                        { layoutKind: FittableColumnsLayout, classes: \"box-group\", components: [\n                            { kind: IconButton, name: \"bt-rotate\", attributes: {title: \"Rotate Left\"}, classes: \"bt bt-go-back\", ontap: \"activeRotate\"},\n                            { name: \"FlipButton\", kind: IconButton, attributes: {title: \"Flip\"}, classes: \"bt bt-flip\"},\n                            { kind: MenuDecorator, classes: \"bt\", components: [\n                                { kind: IconButton, name: \"AlignButton\", classes: \"bt bt-align\", attributes: {title: \"Align\"}},\n                                { kind: ContextualPopup, classes: \"align-menu\", floating: true, maxHeight: \"200\", components: [\n                                    { kind: FittableRows, components: [\n                                        { kind: FittableColumns, classes: \"row\", components: [\n                                            { name: \"VerticalAlignBottom\", kind: Icon, classes: \"bt bt-align-bottom\" },\n                                            { name: \"VerticalAlignCenter\", kind: Icon, classes: \"bt bt-align-vcenter\"},\n                                            { name: \"VerticalAlignTop\", kind: Icon, classes: \"bt bt-align-top\" }\n                                        ]},\n                                        { kind: FittableColumns, classes: \"row\", components: [\n                                            { name: \"HorizontalAlignRight\", kind: Icon, classes: \"bt-align-left\" },\n                                            { name: \"HorizontalAlignCenter\", kind: Icon, classes: \"bt bt-align-hcenter\" },\n                                            { name: \"HorizontalAlignLeft\", kind: Icon, classes: \"bt bt-align-right\" }\n                                        ]}\n                                    ]}\n                                ]}\n                            ]}\n                        ]},\n                        { kind: FittableColumns, classes: \"box-group\", components: [\n                            { kind: IconButton, name: \"bt-delete\", attributes: {title: \"Delete\"}, classes: \"bt bt-delete\", ontap: \"activeDeleteItems\"}\n                        ]},\n                        { kind: FittableColumns, classes: \"box-group\", components: [\n                            { name: \"bt-zoom\", kind: IconButton, attributes: {title: \"\"}, classes: \"bt bt-look\", ontap: \"activeZoom\"},\n                            { name: \"ZoomToFit\", kind: IconButton, attributes: {title: \"Zoom to fit\"}, classes: \"bt bt-max\", ontap: \"activeZoomToFit\"},\n                            { name: \"bt-move\", kind: IconButton, attributes: {title: \"Move\"}, classes: \"bt bt-min\", ontap: \"activeMoving\"}\n                        ]}\n                    ]}\n                ]},\n                { name: \"TankSettingsPullout\", kind: plStTankSettings, classes: \"tank-settings box-shadow\"},\n                { name: \"ZoneSettingsPullout\", kind: plStZoneSettings, classes: \"zone-setting box-shadow\"}\n            ]}\n        ]}\n    ],\n\n    breadcrumbHack: function(key, page, percentToAdd) {\n        // Hack to add breadcrumb percentage\n        var percent = PROGRESS[key];\n\n        percent+=percentToAdd;\n\n        if(PROGRESS[key] < 100)\n            Signals.send(\"onProgress\", {page: page, key: key, value: percent});\n        else \n            PROGRESS[key] = 100;\n    },\n\n    constructor: function() {\n        this.inherited(arguments);\n        this.ready = false;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        // Set graphic\n        systemGraphic.panel = this;\n        // Set tools\n        this.tools = [\n            this.$['bt-selector'],\n            this.$['bt-connector'],\n            this.$['bt-outline'],\n            this.$['bt-parallel'],\n            this.$['bt-add-text'],\n            this.$['bt-rotate'],\n            this.$['bt-delete'],\n            this.$['bt-move'],\n            this.$['bt-zoom'],\n            this.$['ZoomToFit']\n        ];\n        if(this.ready === true) {\n            // Setting\n            this.dimension();\n            // Init draw\n            this.initViewPort();\n        }\n    },\n    init: function() {\n        if(this.ready !== true) {\n            this.ready = true;\n            this.render();\n\n            // Init data\n            //var that = this;\n            //equipmentsService.find(PL.baseUrl + \"assets/jsons/system.json\", {}, function(inSender, inResponse) {\n            //    that.initSideBar(inResponse);\n            //});\n            this.initSideBar(EQUIPMENT_LIST);\n        }\n\n        // Reset\n        if(this.$.MainPanels.getIndex()) {\n            systemGraphic.isCollapsed = true;\n        } else {\n            systemGraphic.isCollapsed = false;\n        }\n\n        this.resizeComplete();\n\n        // Enable selector\n        this.activeSelector();\n    },\n    setProgress: function(percent){\n        Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_SYSTEM, key: 'SYSTEM_BUILDER', value: percent});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    resizeComplete: function() {\n        // Setting\n        if(this.ready === true) {\n            this.dimension();\n            this.initDrawArea();\n        }\n\n        // Set position attribute for svg\n        this.initDrawAreaPositionByCollapse();\n    },\n    // Set Dimension\n    dimension: function() {\n        this.headerHeight = utils.getCSSProperty(this.parent.parent.$.Header, \"offsetHeight\", false);\n        this.leftWidth = utils.getCSSProperty(this.$.LeftColumn, \"offsetWidth\", false);\n        this.contentWidth = utils.getCSSProperty(this.$.SystemBuilder, \"offsetWidth\", false);\n        this.contentHeight = utils.getCSSProperty(this.$.SystemBuilder, \"offsetHeight\", false);\n        // Fit\n        this.$.TankSettingsPullout.$.MainContent.applyStyle(\"height\", this.contentHeight + \"px\");\n        this.$.ZoneSettingsPullout.$.MainSetting.applyStyle(\"height\", this.contentHeight + \"px\");\n        this.$.ZoneSettingsPullout.$.ZoneList.applyStyle(\"height\", this.contentHeight + \"px\");\n    },\n    tapHandler: function(inSender, inEvent) {\n        // Redirect Component\n        if(inEvent.originator.name == \"ComponentAddButton\") {\n            Signals.send('onPageChanged', {page: APPS.APP_EQUIPMENT});\n        }\n        // Align\n        if(inEvent.originator.name == \"VerticalAlignBottom\") {\n            systemGraphic.alignObjects(ALIGN.VB);\n        }\n        if(inEvent.originator.name == \"VerticalAlignCenter\") {\n            systemGraphic.alignObjects(ALIGN.VC);\n        }\n        if(inEvent.originator.name == \"VerticalAlignTop\") {\n            systemGraphic.alignObjects(ALIGN.VT);\n        }\n        if(inEvent.originator.name == \"HorizontalAlignLeft\") {\n            systemGraphic.alignObjects(ALIGN.HL);\n        }\n        if(inEvent.originator.name == \"HorizontalAlignCenter\") {\n            systemGraphic.alignObjects(ALIGN.HC);\n        }\n        if(inEvent.originator.name == \"HorizontalAlignRight\") {\n            systemGraphic.alignObjects(ALIGN.HR);\n        }\n        // FullScreen Control\n        if(inEvent.originator.name == \"FullScreenButton\") {\n            var targetControl = this.$.MainPanels;\n            // If _targetControl_ is currently fullscreen, cancel fullscreen\n            if(targetControl.isFullscreen()) {\n                targetControl.cancelFullscreen();\n                // If _targetControl_ is not currently fullscreen, request fullscreen\n            } else {\n                targetControl.requestFullscreen();\n            }\n        }\n        // Action Button\n        if(inEvent.originator.name == \"FlipButton\") {\n            systemGraphic.drawFlip();\n        }\n    },\n    // Init SideBar\n    initSideBar: function(data) {\n        // Destroy if children exist\n        this.$.EquipmentSideBar.destroyClientControls();\n        // Create\n        var contentComponents = new Array();\n        for(var i = 0; i < data.length; i++) {\n            var childComponents = new Array();\n            childComponents.push(data[i].name);\n            var equipments = new Array();\n            for(var j = 0; j < data[i].equipment.length; j++) {\n                equipments.push({\n                    kind: plStSideBarItem,\n                    title: data[i].equipment[j].name,\n                    value: data[i].equipment[j].kind,\n                    objKind: data[i].equipment[j].kind,\n                    image: data[i].equipment[j].svg,\n                    width: data[i].equipment[j].width,\n                    height: data[i].equipment[j].height,\n                    equipment: data[i].equipment[j],\n                    ontap: \"handleItemTap\",\n                    ondragfinish: \"handleItemDragFinish\",\n                    ondrag: \"handleItemOnDrag\",\n                    ondragstart: \"handleItemDragStart\"\n                })\n            }\n            childComponents.push(equipments);\n            contentComponents.push(childComponents);\n        }\n\n        this.$.EquipmentSideBar.createComponent({\n            name: \"SideBar\",\n            kind: plStSideBar,\n            touch: false,\n            onSideBarDragStart: \"onDragStart\",\n            onSideBarOnDrag: \"onDrag\",\n            onSideBarDragFinish: \"onDragFinish\",\n            onEquipmentTap: \"onEquipmentTap\",\n            contentComponents: contentComponents,\n            classes: \"enyo-fit\"\n        }, {owner: this});\n        this.$.EquipmentSideBar.render();\n    },\n    // Calculate area\n    initDrawArea: function() {\n        systemGraphic.setSize(this.contentWidth, this.contentHeight);\n    },\n    // Draw Raphael\n    initViewPort: function() {\n        // Calculate area\n        this.initDrawArea();\n        // Initiation\n        systemGraphic.init(this.$.Svg, this.$.Input);\n        // Active selector\n        this.activeSelector();\n    },\n    // Set position attribute for svg\n    initDrawAreaPositionByCollapse: function() {\n        var offset = this.$.Svg.getAbsoluteBounds();\n        this.$.Svg.setAttributes({offsetTop: offset.top, offsetLeft: offset.left});\n    },\n    // Full Screen\n    toggleFullScreen: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case \"tap\":\n                this.$.MainPanels.setIndex(this.$.MainPanels.index ? 0 : 1);\n                break;\n            case \"dragstart\":\n                this.$.MainPanels.setDraggable(true);\n                break;\n            case \"dragfinish\":\n                this.$.MainPanels.setDraggable(false);\n                break;\n        }\n    },\n    transitionFinish: function(inSender, inEvent) {\n        if(inEvent.fromIndex === inEvent.toIndex) {\n            return;\n        }\n        if(inSender.name === \"MainPanels\") {\n            if(this.$.MainPanels.getIndex()) {\n                systemGraphic.isCollapsed = true;\n            } else {\n                systemGraphic.isCollapsed = false;\n            }\n        }\n        this.resizeComplete();\n    },\n    // Drawing\n    onDragStart: function(inSender, inEvent) {\n        systemGraphic.g.deSelectedItems();\n        if(!toolIcons.isSelector) this.activeSelector();\n        // Mouse Position\n        var mouse = {x: 0, y: 0};\n        if(IS_TOUCH) { // active on touch\n            mouse = {x: window.event.changedTouches[0].pageX, y: window.event.changedTouches[0].pageY};\n        } else {\n            mouse = {x: eGetPosition().pageX, y: eGetPosition().pageY};\n        }\n        if(toolIcons.isSelector) {\n            this.dragInfo = {};\n            this.dragInfo.info = inEvent;\n            this.dragInfo.image = inEvent.image;\n            this.dragInfo.styles = \"width:\" + inEvent.width + \"px; height:\" + inEvent.height + \"px;\";\n            this.dragInfo.showing = true;\n            Signals.send('onDragImage', this.dragInfo);\n\n            this.offset = $('#' + inEvent.id).find('#' + inEvent.id + '_Image').offset();\n\n            this.offset.x = mouse.x - this.offset.left;\n            this.offset.y = mouse.y - this.offset.top;\n\n            var pos = {\n                x: mouse.x - this.offset.x,\n                y: mouse.y - this.offset.y\n            };\n\n            this.dragInfo.styles = \"left:\" + pos.x + \"px; top:\" + pos.y + \"px; position:absolute; opacity:0.5; filter:alpha(opacity=50); z-index:1000\";\n            Signals.send('onDragImage', this.dragInfo);\n        }\n    },\n    onDrag: function(inSender, inEvent) {\n        var mouse = {x: 0, y: 0};\n        if(IS_TOUCH) { // active on touch\n            mouse = {x: window.event.changedTouches[0].pageX, y: window.event.changedTouches[0].pageY};\n        } else {\n            mouse = { x: eGetPosition().pageX, y: eGetPosition().pageY};\n        }\n        if(toolIcons.isSelector) {\n            var pos = {\n                x: mouse.x - this.offset.x,\n                y: mouse.y - this.offset.y\n            };\n\n            this.dragInfo.styles = \"left:\" + pos.x + \"px; top:\" + pos.y + \"px\";\n            Signals.send('onDragImage', this.dragInfo);\n        }\n    },\n    onDragFinish: function(inSender, inEvent) {\n        var mouse = {x: 0, y: 0};\n        var offset = document.getElementById(this.$.SystemBuilder.getId()).getBoundingClientRect();\n\n        if(IS_TOUCH) { // active on touch\n            mouse = {\n                x: window.event.changedTouches[0].pageX - offset.left,\n                y: window.event.changedTouches[0].pageY - offset.top\n            };\n        } else {\n            mouse = {\n                x: eGetPosition().pageX - offset.left,\n                y: eGetPosition().pageY - offset.top\n            };\n        }\n\n        if(0 < mouse.x && mouse.x < offset.width && 0 < mouse.y && mouse.y < offset.height) {\n            this.isCreate = true;\n        } else {\n            this.isCreate = false;\n        }\n\n        // Scroll Fix\n        mouse.x += document.getElementById(this.$.SystemBuilder.getId()).scrollLeft;\n        mouse.y += document.getElementById(this.$.SystemBuilder.getId()).scrollTop;\n\n        if(toolIcons.isSelector && !!this.isCreate) {\n            var pos = {\n                x: mouse.x - this.offset.x,\n                y: mouse.y - this.offset.y\n            };\n            var options = eClone(this.dragInfo.info.equipment);\n            options.x = pos.x;\n            options.y = pos.y;\n            systemGraphic.createEquipment(options);\n        }\n\n        this.dragInfo.showing = false;\n        Signals.send('onDragImage', this.dragInfo);\n\n        delete this.offset;\n        delete this.isCreate;\n        delete this.dragInfo;\n\n        // Hack to add breadcrumb percentage\n            if(PROGRESS['SYSTEM_BUILDER'] > 25)\n                this.breadcrumbHack('SYSTEM_BUILDER', APP_PROGRESS.PR_SYSTEM, 5);\n            else\n                this.breadcrumbHack('SYSTEM_BUILDER', APP_PROGRESS.PR_SYSTEM, 10);\n        // END HACK\n    },\n    onEquipmentTap: function(inSender, inEvent) {\n        systemGraphic.selectEquipmentsByObject(inEvent.equipment);\n    },\n    activeTools: function(name) {\n        for(var i = 0; i < this.tools.length; i++) {\n            this.tools[i].removeClass('active');\n            if(this.tools[i].name === name) {\n                this.tools[i].addClass('active');\n            }\n        }\n    },\n    // Active selector (select entities)\n    activeSelector: function() {\n        systemGraphic.activeIcons('isSelector', true);\n        this.activeTools('bt-selector');\n    },\n    // Active icon connector\n    activeConnector: function() {\n        systemGraphic.activeIcons('isConnector', true);\n        this.activeTools('bt-connector');\n    },\n    // Active outline\n    activeOutline: function() {\n        systemGraphic.activeIcons('isOutline', true);\n        this.activeTools('bt-outline');\n    },\n    // Active create parallel\n    activeCreateParallel: function() {\n        systemGraphic.createParallel();\n        //systemGraphic.activeIcons('isParallel', true);\n        //this.activeTools('bt-parallel');\n        //var me = this;\n        //setTimeout(function() {\n        //    me.activeSelector();\n        //}, 200);\n    },\n    // Active add text\n    activeAddText: function() {\n        systemGraphic.activeIcons('isAddText', true);\n        this.activeTools('bt-add-text');\n    },\n    // Active moving (resize entities)\n    activeMoving: function() {\n        systemGraphic.activeIcons('isMoving', true);\n        this.activeTools('bt-move');\n    },\n    // Active delete selected items\n    activeDeleteItems: function() {\n        systemGraphic.deleteSelectedItems();\n    },\n    // Active rotate\n    activeRotate: function() {\n        systemGraphic.rotate();\n    },\n    // Active zoom In\n    activeZoom: function() {\n        systemGraphic.activeIcons('isZoom', true);\n        this.activeTools('bt-zoom');\n        systemGraphic.zoomViewPort();\n        var me = this;\n        setTimeout(function() {\n            me.activeSelector();\n        }, 200);\n    },\n    // Active zoom to fit\n    activeZoomToFit: function() {\n        systemGraphic.activeIcons('isZoomToFit', true);\n        this.activeTools(\"ZoomToFit\");\n        systemGraphic.zoomToFit();\n        var me = this;\n        setTimeout(function() {\n            me.activeSelector();\n        }, 200);\n    },\n    zoomIn: function() {\n        if(!this.$['bt-zoom'].hasClass('zoom-out')) {\n            this.$['bt-zoom'].addClass(\"zoom-out\");\n        }\n    },\n    zoomOut: function() {\n        if(this.$['bt-zoom'].hasClass('zoom-out')) {\n            this.$['bt-zoom'].removeClass(\"zoom-out\");\n        }\n    },\n    // Open left panel\n    openLeftPanel: function(inSender) {\n        if(inSender.panelIndex == 0) {\n            this.$.LeftColumn.previous();\n        } else {\n            this.$.LeftColumn.next();\n        }\n        if(inSender.panelIndex === 1) {\n            // Destroy if children exist\n            this.$.TemplateSideBar.destroyClientControls();\n            // Create component\n            this.$.TemplateSideBar.createComponent({\n                name: \"Template\",\n                kind: plStTemplate,\n                touch: false,\n                onSideBarDragStart: \"onDragStart\",\n                onSideBarOnDrag: \"onDrag\",\n                onSideBarDragFinish: \"onDragFinish\",\n                onEquipmentTap: \"onEquipmentTap\",\n                classes: \"enyo-fit\"\n            }, {owner: this});\n            this.$.TemplateSideBar.render();\n        }\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var stack = STACK_LIST.getStackByParentPanel(this.name);\n        if(stack) {\n            if(stack.type === STACK_TYPES.SVG) {\n                systemGraphic.undo();\n            } else if(stack.type === STACK_TYPES.ENYO) {\n                STACK_LIST.undo(this.name);\n            }\n        }\n    },\n    // Delete item if key code 46\n    deleteSelectedItems: function() {\n        systemGraphic.deleteSelectedItems();\n    }\n});\n","//\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals'),\n    FileInputDecorator = require('enyo-external/FileInputDecorator');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    FittableColumnsLayout = require('layout/FittableLayout').Columns,\n    Panels = require('layout/Panels'),\n    CollapsingArranger = require('layout/CollapsingArranger');\n\nvar IconButton = require('onyx/IconButton'),\n    RadioGroup = require('onyx/RadioGroup'),\n    Grabber = require('onyx/Grabber'),\n    Menu = require('onyx/Menu'),\n    MenuDecorator = require('onyx/MenuDecorator');\n\nvar Scroller = require('enyo/Scroller');\n\nvar plItSideBar = require('./sidebar.js').SideBar;\nvar plItSideBarItem = require('./sidebar.js').SideBarItem;\nvar plItPoControl = require('./control-pullout.js');\nvar plItPoIndicator = require('./indicator-pullout.js');\nvar plItPoUserInput = require('./user-input-pullout.js');\n\nvar utils = require('../../../common/services/utils.js');\n\nvar interfaceGraphic = require('../../progress/interface/graphic.js');\n\nvar IS_TOUCH = require('enyo/platform').touch;\n\nvar eGetPosition= require('enyo/dispatcher').getPosition;\n\nmodule.exports = kind({\n    name: 'pl.InterfaceView',\n    kind: FittableRows,\n    classes: 'form-interface',\n    handlers: {\n        ontap: 'tapHandler'\n    },\n    components: [\n        { name: 'MainPanels', kind: Panels, fit: true, arrangerKind: CollapsingArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: 'main-panels', onTransitionFinish: 'transitionFinish', components: [\n            { name: 'LeftColumn', kind: FittableRows, classes: 'widget enyo-fit', components: [\n                { name: 'SideBarWrapper', kind: FittableColumns, fit: true },\n                { classes: 'footer'}\n            ]},\n            { name: 'MainContent', kind: FittableColumns, classes: 'panel enyo-fit box-shadow', components: [\n                { name: 'ContentWrapper', kind: FittableRows, classes: 'border-left enyo-fit', components: [\n                    {name: 'ViewTabsScroller', kind: Scroller, touch: true, vertical: 'hidden', classes: 'tab', components: [\n                        { name: 'ViewTabs', kind: RadioGroup, layoutKind: FittableColumnsLayout, onActivate: 'tabActivated' }\n                    ]},\n                    { name: 'ContentPanels', kind: Panels, fit: true, draggable: false, narrowFit: false },\n                    { name: 'Footer', kind: FittableColumns, classes: 'footer', components: [\n                        { kind: Grabber, attributes: {title: 'Collapsing'}, classes: 'bt bt-collapsing', ontap: 'toggleFullScreen', ondragstart: 'toggleFullScreen', ondragfinish: 'toggleFullScreen' },\n                        { kind: MenuDecorator, onSelect: 'tabAddView', components: [\n                            { content: 'ADD VIEW', classes: 'bt bt-footer-default'},\n                            { kind: Menu, classes: 'add-view-menu', components: [\n                                { name: 'MainTabViewButton', components: [\n                                    {kind: IconButton, classes: 'bt bt-add-main-view'},\n                                    {content: 'ADD MAIN VIEW'}\n                                ]},\n                                { name: 'NewTabViewButton', components: [\n                                    {kind: IconButton, classes: 'bt bt-add-new-view' },\n                                    {content: 'ADD NEW VIEW'}\n                                ]}\n                            ]}\n                        ]},\n                        { name: 'polygonButton', kind: IconButton, classes: 'bt bt-line-1', ontap: 'activePolyLine' },\n                        { name: 'rectangleButton', kind: IconButton, classes: 'bt bt-line-2', ontap: 'activeRectangle' },\n                        { name: 'ovalButton', kind: IconButton, classes: 'bt bt-line-3', ontap: 'activeOval' },\n                        { name: 'textLabelingButton', kind: IconButton, classes: 'bt bt-text', ontap: 'activeAddText' },\n                        { fit: true},\n                        { name: 'TopViewButton', kind: FileInputDecorator, defaultClient: {kind: IconButton, content: ''}, disabled: true, attributes: {title: 'Top View'}, classes: 'bt bt-up', onSelect: 'importViewImage'},\n                        { name: 'BottomViewButton', kind: FileInputDecorator, defaultClient: {kind: IconButton, content: ''}, disabled: true, attributes: {title: 'Bottom View'}, classes: 'bt bt-down', onSelect: 'importViewImage'}\n                    ]}\n                ]},\n                { name: 'ControlPullout', kind: plItPoControl, onUpdate: 'valueChanged'},\n                { name: 'IndicatorPullout', kind: plItPoIndicator, onUpdate: 'valueChanged', onColorPark: 'valueColorChanged'},\n                { name: 'UserInputPullout', kind: plItPoUserInput, onUpdate: 'valueChanged'}\n            ]}\n        ]}\n    ],\n    breadcrumbHack: function(key, page, percentToAdd) {\n        // Hack to add breadcrumb percentage\n        var percent = PROGRESS[key];\n\n        percent += percentToAdd;\n\n        if(PROGRESS[key] < 100) {\n            Signals.send('onProgress', {page: page, key: key, value: percent});\n        } else {\n            PROGRESS[key] = 100;\n        }\n    },\n    constructor: function() {\n        this.inherited(arguments);\n        this.ready = false;\n        // Set graphic\n        interfaceGraphic.panel = this;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        // Setting\n        this.dimension();\n        // Set tools\n        this.tools = [\n            this.$['polygonButton'],\n            this.$['rectangleButton'],\n            this.$['ovalButton'],\n            this.$['textLabelingButton']\n        ];\n        // AddEventListener to Parent\n        document.getElementById(this.getId()).addEventListener('dragover', function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n        }, false);\n        document.getElementById(this.getId()).addEventListener('drop', function(e) {\n            e.stopPropagation();\n            e.preventDefault();\n        }, false);\n    },\n    init: function() {\n        if(this.ready !== true) {\n            this.ready = true;\n            this.render();\n            // Init data\n            //var me = this;\n            //interfaceService.find(PL.baseUrl + 'assets/jsons/interface.json', {}, function(inSender, inResponse) {\n            //    me.initSideBar(inResponse);\n            //});\n            this.initSideBar(CONTROL_LIST);\n\n            // Set default\n            this.tabAddViewContent();\n            //this.tabAddViewContent();\n            this.$['ViewTabItem_0'].setActive(true);\n            this.$.ContentPanels.setIndex(0);\n        }\n        // Disable toolbar\n        this.activeReset();\n    },\n    setProgress: function(percent) {\n        Signals.send('onProgress', {page: APP_PROGRESS.PR_INTERFACE, key: 'INTERFACE', value: percent});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    resizeComplete: function() {\n        // Setting\n        this.dimension();\n\n        // Set position attribute for svg\n        this.initDrawAreaPositionByCollapse();\n    },\n    resizeStopped: function() {\n        this.initDrawArea();\n    },\n    // Dimension\n    dimension: function() {\n        this.headerHeight = utils.getCSSProperty(this.parent.parent.$.Header, 'offsetHeight', false);\n        this.leftWidth = utils.getCSSProperty(this.$.LeftColumn, 'offsetWidth', false);\n        this.contentWidth = utils.getCSSProperty(this.$.ContentPanels, 'offsetWidth', false);\n        this.contentHeight = utils.getCSSProperty(this.$.ContentPanels, 'offsetHeight', false);\n\n        // Fit\n        this.$.ControlPullout.$.MainContent.applyStyle('height', this.contentHeight + 'px');\n        this.$.IndicatorPullout.$.MainContent.applyStyle('height', this.contentHeight + 'px');\n        this.$.UserInputPullout.$.MainContent.applyStyle('height', this.contentHeight + 'px');\n    },\n    tapHandler: function(inSender, inEvent) {\n\n    },\n    // init Sidebar\n    initSideBar: function(data) {\n        // Destroy if children exist\n        this.$.SideBarWrapper.destroyClientControls();\n        // Create\n        var contentComponents = new Array();\n        for(var i = 0; i < data.length; i++) {\n            var childComponents = new Array();\n            childComponents.push(data[i].name);\n\n            var items = new Array();\n            for(var j = 0; j < data[i].items.length; j++) {\n                items.push({\n                    kind: plItSideBarItem,\n                    id: data[i].items[j].id,\n                    value: data[i].items[j].id,\n                    title: data[i].items[j].name,\n                    image: data[i].items[j].url,\n                    objkind: data[i].items[j].type,\n                    width: data[i].items[j].w,\n                    height: data[i].items[j].h,\n                    data: data[i].items[j],\n                    ontap: 'handleItemTap',\n                    ondragfinish: 'handleItemDragFinish',\n                    ondrag: 'handleItemOnDrag',\n                    ondragstart: 'handleItemDragStart'\n                })\n            }\n            childComponents.push(items);\n            contentComponents.push(childComponents);\n        }\n        // Create SideBar\n        this.$.SideBarWrapper.createComponent({\n            name: 'SideBar',\n            kind: plItSideBar,\n            classes: 'enyo-fit side-bar',\n            onSideBarDragStart: 'onDragStart',\n            onSideBarOnDrag: 'onDrag',\n            onSideBarDragFinish: 'onDragFinish',\n            contentComponents: contentComponents\n        }, {owner: this});\n        this.$.SideBarWrapper.render();\n    },\n    // Calculate area\n    initDrawArea: function() {\n        interfaceGraphic.setSize(this.contentWidth, this.contentHeight);\n    },\n    // Draw\n    initViewPort: function(index) {\n        this.initDrawArea();\n        // Initiation\n        interfaceGraphic.init(this.$['DrawArea_' + index + '_Svg'], this.$['DrawArea_' + index + '_Input']);\n    },\n    // Set position attribute for svg\n    initDrawAreaPositionByCollapse: function() {\n        var length = this.$.ContentPanels.children.length;\n        for(var i = 0; i < length; i++) {\n            var offset = this.$['DrawArea_' + i + '_Svg'].getAbsoluteBounds();\n            this.$['DrawArea_' + i + '_Svg'].setAttributes({offsetTop: offset.top, offsetLeft: offset.left});\n        }\n    },\n    // Full Screen\n    toggleFullScreen: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case 'tap':\n                this.$.MainPanels.setIndex(this.$.MainPanels.index ? 0 : 1);\n                break;\n            case 'dragstart':\n                this.$.MainPanels.setDraggable(true);\n                break;\n            case 'dragfinish':\n                this.$.MainPanels.setDraggable(false);\n                break;\n        }\n    },\n    transitionFinish: function(inSender, inEvent) {\n        if(inEvent.fromIndex === inEvent.toIndex) {\n            return;\n        }\n        if(inSender.name === 'MainPanels') {\n            if(this.$.MainPanels.getIndex()) {\n                interfaceGraphic.isCollapsed = true;\n            } else {\n                interfaceGraphic.isCollapsed = false;\n            }\n        }\n        this.resizeComplete();\n    },\n    // Setting\n    toggleSetting: function(snapObject) {\n        if(!!snapObject) {\n            if(snapObject.info.objKind === INTERFACE_ITEM_TYPE.CONTROL) {\n                this.$.ControlPullout.toggle(true, snapObject);\n                this.$.IndicatorPullout.toggle(false);\n                this.$.UserInputPullout.toggle(false);\n            } else if(snapObject.info.objKind === INTERFACE_ITEM_TYPE.INDICATOR) {\n                this.$.ControlPullout.toggle(false);\n                this.$.IndicatorPullout.toggle(true, snapObject);\n                this.$.UserInputPullout.toggle(false);\n            } else if(snapObject.info.objKind === INTERFACE_ITEM_TYPE.USER_INPUT) {\n                this.$.ControlPullout.toggle(false);\n                this.$.IndicatorPullout.toggle(false);\n                this.$.UserInputPullout.toggle(true, snapObject);\n            }\n        } else {\n            this.$.ControlPullout.toggle(false);\n            this.$.IndicatorPullout.toggle(false);\n            this.$.UserInputPullout.toggle(false);\n        }\n        this.snapObject = snapObject;\n    },\n    // Switch tab\n    tabActivated: function(inSender, inEvent) {\n        if(inEvent.originator.getActive()) {\n            this.$.ContentPanels.setIndex(inEvent.originator.index);\n            // Reset button active\n            this.activeReset();\n            // Change viewPort\n            interfaceGraphic.currentTagName = this.$['DrawArea_' + inEvent.originator.index + '_Svg'].getId();\n            this.viewPort = interfaceGraphic.viewTabs[interfaceGraphic.currentTagName].g.paper;\n            // ReInit\n            this.initDrawArea();\n        }\n    },\n    tabAddView: function(inSender, inEvent) {\n        if(inEvent.originator.name == 'MainTabViewButton') {\n            this.tabAddViewContent();\n        } else if(inEvent.originator.name == 'NewTabViewButton') {\n            this.tabAddViewContent();\n        }\n    },\n    tabAddViewContent: function() {\n        // Disabled Setting\n        this.toggleSetting(false);\n        // Create Tabs\n        var index = this.$.ViewTabs.children.length;\n        this.$.ViewTabs.createComponent({\n            name: 'ViewTabItem_' + index,\n            content: (index == 0 ? 'MAIN' : utils.getOrdinal(index + 1)) + ' VIEW',\n            index: index\n        }, {owner: this});\n        this.$['ViewTabItem_' + index].render();\n        this.$.ViewTabsScroller.scrollToRight();\n        // Create Panel\n        this.$.ContentPanels.createComponent({\n            name: 'DrawArea_' + index + '_Panel', kind: FittableRows, fit: true, components: [\n                {name: 'DrawArea_' + index + '_Svg', tag: 'svg'},\n                {\n                    name: 'DrawArea_' + index + '_Input',\n                    tag: 'input',\n                    attributes: {value: '', type: 'text'},\n                    classes: 'enyo-input onyx-input insert-text',\n                    style: 'display:none'\n                }\n            ]\n        }, {owner: this});\n        this.$['DrawArea_' + index + '_Panel'].render();\n        // Draw\n        this.initViewPort(index);\n        // Set Active\n        this.$['ViewTabItem_' + index].setActive(true);\n        // Enable Import Button\n// FIXME: these are now gone, does it matter?\n//        this.$.TopViewButton.statusChanged(true);\n//        this.$.BottomViewButton.statusChanged(true);\n    },\n    // Open dialog to import top view image  and bottom view image(jpg, png, etc)\n    importViewImage: function(inSender, inEvent) {\n        var position = 'bgBottom';\n        if(inSender.name == 'TopViewButton') {\n            position = 'bgTop';\n        } else if(inSender.name == 'BottomViewButton') {\n            position = 'bgBottom';\n        }\n\n        // Hack to add breadcrumb percentage\n        if(position == 'bgTop' || position == 'bgBottom') {\n            this.breadcrumbHack('INTERFACE', APP_PROGRESS.PR_INTERFACE, 25);\n        }\n        // END HACK\n\n        // Set Background\n        interfaceGraphic.setBackgroundByBase64(inEvent.files, position);\n\n        // Clear\n        inEvent.originator.$.fileInput.node.value = '';\n    },\n    // Drag Start\n    onDragStart: function(inSender, inEvent) {\n        // Mouse Position\n        var mouse = {x: 0, y: 0};\n        if(IS_TOUCH) {\n            mouse = {x: window.event.changedTouches[0].pageX, y: window.event.changedTouches[0].pageY};\n        } else {\n            mouse = {x: eGetPosition().pageX, y: eGetPosition().pageY};\n        }\n        // Set Position\n        this.dragInfo = {};\n        this.dragInfo.info = inEvent;\n        this.dragInfo.image = inEvent.image;\n        this.dragInfo.styles = 'width:' + inEvent.width + 'px; height:' + inEvent.height + 'px;';\n        this.dragInfo.showing = true;\n        Signals.send('onDragImage', this.dragInfo);\n\n        this.offset = $('#' + inEvent.id).find('#' + inEvent.$.Image.getId()).offset();\n\n        this.offset.x = mouse.x - this.offset.left;\n        this.offset.y = mouse.y - this.offset.top;\n\n        var pos = {\n            x: mouse.x - this.offset.x,\n            y: mouse.y - this.offset.y\n        };\n\n        this.dragInfo.styles = 'left:' + pos.x + 'px; top:' + pos.y + 'px; position:absolute; opacity:0.5; filter:alpha(opacity=50); z-index:1000';\n        Signals.send('onDragImage', this.dragInfo);\n\n        //this.dragInfo.styles = 'left:' + (mouse.x - inEvent.width / 2) + 'px; top:' + (mouse.y - inEvent.height / 2) + 'px; position:fixed; opacity:0.5; filter:alpha(opacity=50); z-index:1000';\n        //Signals.send('onDragImage', this.dragInfo);\n    },\n    onDrag: function(inSender, inEvent) {\n        // Mouse Position\n        var mouse = {x: 0, y: 0};\n        if(IS_TOUCH) {\n            mouse = {x: window.event.changedTouches[0].pageX, y: window.event.changedTouches[0].pageY};\n        } else {\n            mouse = {x: eGetPosition().pageX, y: eGetPosition().pageY};\n        }\n        // Move\n        var pos = {\n            x: mouse.x - this.offset.x,\n            y: mouse.y - this.offset.y\n        };\n\n        this.dragInfo.styles = 'left:' + pos.x + 'px; top:' + pos.y + 'px';\n        Signals.send('onDragImage', this.dragInfo);\n\n        //this.dragInfo.styles = 'left:' + (mouse.x - this.dragInfo.info.width / 2) + 'px; top:' + (mouse.y - this.dragInfo.info.height / 2) + 'px';\n        //Signals.send('onDragImage', this.dragInfo);\n    },\n    onDragFinish: function(inSender, inEvent) {\n        if(this.viewPort && interfaceGraphic.isInside()) {\n            var tagName = this.viewPort.node.parentElement.id;\n            var offset = document.getElementById(tagName).getBoundingClientRect();\n\n            var mouse = utils.getPosition();\n            mouse.x -= offset.left;\n            mouse.y -= offset.top;\n\n            // Scroll Fix\n            mouse.x += document.getElementById(tagName).scrollLeft;\n            mouse.y += document.getElementById(tagName).scrollTop;\n\n            var pos = {\n                x: mouse.x - this.offset.x,\n                y: mouse.y - this.offset.y\n            };\n\n            interfaceGraphic.createControl({\n                name: this.dragInfo.info.data.nameDefault,\n                url: this.dragInfo.info.image,\n                kind: this.dragInfo.info.objkind,\n                x: pos.x,\n                y: pos.y,\n                width: this.dragInfo.info.width,\n                height: this.dragInfo.info.height,\n                data: this.dragInfo.info.data\n            });\n        }\n\n        this.dragInfo.showing = false;\n        Signals.send('onDragImage', this.dragInfo);\n\n        delete this.offset;\n        delete this.dragInfo;\n        delete this.isCreate;\n\n        // Hack to add breadcrumb percentage\n        this.breadcrumbHack('INTERFACE', APP_PROGRESS.PR_INTERFACE, 5);\n        // END HACK\n    },\n    valueColorChanged: function(inSender, inEvent) {\n        console.log(inEvent);\n    },\n    valueChanged: function(inSender, inEvent) {\n        console.log(inEvent.originator.name);\n        switch(inEvent.originator.name) {\n            case 'FloorPicker':\n                break;\n            case 'LocationPicker':\n                break;\n            case 'SensorPicker':\n                break;\n            case 'ColorPicker':\n                break;\n            case 'SwitchNameInput':\n                break;\n            case 'PointerStyleCheckbox':\n                break;\n            case 'PointerAnglePicker':\n                break;\n            case 'SystemPicker':\n                break;\n            case 'TriggerActionPicker':\n                break;\n            case 'TimerStyleCheckbox':\n                break;\n            case 'TimeStylePicker':\n                break;\n            case 'PhysicalSwitchCheckbox':\n                break;\n            case 'PhysicalSwitchPicker':\n                break;\n        }\n    },\n    activeTools: function(name) {\n        for(var i = 0; i < this.tools.length; i++) {\n            this.tools[i].removeClass('active');\n            if(this.tools[i].name === name) {\n                this.tools[i].addClass('active');\n            }\n        }\n    },\n    // active reset button\n    activeReset: function() {\n        interfaceGraphic.activeIcons(false);\n        this.activeTools(false);\n    },\n    // active add polyline\n    activePolyLine: function() {\n        if(!toolIcons.isAddPolyline) {\n            if(interfaceGraphic.activeIcons('isAddPolyline', true)) {\n                this.activeTools('polygonButton');\n            }\n        } else {\n            this.activeReset();\n\n        }\n    },\n    // active add rectangle\n    activeRectangle: function() {\n        if(!toolIcons.isAddRectangle) {\n            if(interfaceGraphic.activeIcons('isAddRectangle', true)) {\n                this.activeTools('rectangleButton');\n            }\n        } else {\n            this.activeReset();\n\n        }\n    },\n    // active add circle\n    activeOval: function() {\n        if(!toolIcons.isAddCircle) {\n            if(interfaceGraphic.activeIcons('isAddCircle', true)) {\n                this.activeTools('ovalButton');\n            }\n        } else {\n            this.activeReset();\n\n        }\n    },\n    // active add text\n    activeAddText: function() {\n        if(!toolIcons.isAddText) {\n            if(interfaceGraphic.activeIcons('isAddText', true)) {\n                this.activeTools('textLabelingButton');\n            }\n        } else {\n            this.activeReset();\n\n        }\n    },\n    // It should just undo the last things done\n    undo: function() {\n        var stack = STACK_LIST.getStackByParentPanel(this.name);\n        if(stack) {\n            if(stack.type === STACK_TYPES.SVG) {\n                interfaceGraphic.undo();\n            } else if(stack.type === STACK_TYPES.ENYO) {\n                STACK_LIST.undo(this.name);\n            }\n        }\n    },\n    // Delete item if key code 46\n    deleteSelectedItems: function() {\n        if(PL.keyCode == 46) { // != 8 (backspace)\n            interfaceGraphic.deleteSelectedItems();\n        }\n    }\n});\n","// PIPELINE - COMMISSION\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals'),\n    FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Panels = require('layout/Panels'),\n    CollapsingArranger = require('layout/CollapsingArranger'),\n    Button = require('onyx/Button'),\n    Grabber = require('onyx/Grabber'),\n    plCmSideBar = require('./sidebar.js');\n\nmodule.exports = kind({\n    name: \"pl.CommissionView\",\n    kind: FittableRows,\n    fit: true,\n    classes: \"form-commission\",\n    handlers: {\n        ontap: \"tapHandler\",\n        onSetting: \"onSetting\"\n    },\n    components: [\n        { name: \"MainPanels\", kind: Panels, fit: true, arrangerKind: CollapsingArranger, draggable: false, narrowFit: false, realtimeFit: true, classes: \"main-panels\", components: [\n            { name: \"SideBar\", kind: plCmSideBar},\n            { kind: FittableRows, classes: \"enyo-fit panel box-shadow\", fit: true, components: [\n                { name: \"MainContent\", fit: true, classes: \"border-left\"},\n                { kind: FittableColumns, classes: \"footer\", components: [\n                    { kind: Grabber, attributes: {title: \"Collapsing\"}, classes: \"bt bt-collapsing\", ontap: \"toggleFullScreen\", ondragstart: \"toggleFullScreen\", ondragfinish: \"toggleFullScreen\" },\n                    { fit: true },\n                    { name: \"DeployButton\", kind: Button, content: \"DEPLOY SYSTEM\", attributes: {title: \"\"}, classes: \"bt bt-deploy\"}\n                ]}\n            ]}\n        ]}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n        this.ready = false;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: function() {\n        this.inherited(arguments);\n    },\n    init: function() {\n        // Init sidebar\n        this.$.SideBar.loadData();\n        this.render();\n        this.ready = true;\n    },\n    setProgress: function(percent){\n        Signals.send(\"onProgress\", {page: APP_PROGRESS.PR_COMMISSION, key: 'COMMISSION', value: percent});\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    resizeComplete: function() {\n\n    },\n    tapHandler: function(inSender, inEvent) {\n        if(inEvent.originator.name == \"DeployButton\") {\n            // Progress\n            // Signals.send(\"onNavigationBar\", {deploy: true});\n            // Return event\n            Signals.send('onPageChanged', {page: APPS.APP_RUNTIME});\n        }\n    },\n    // Full Screen\n    toggleFullScreen: function(inSender, inEvent) {\n        switch(inEvent.type) {\n            case \"tap\":\n                this.$.MainPanels.setIndex(this.$.MainPanels.index ? 0 : 1);\n                break;\n            case \"dragstart\":\n                this.$.MainPanels.setDraggable(true);\n                break;\n            case \"dragfinish\":\n                this.$.MainPanels.setDraggable(false);\n                break;\n        }\n    },\n    onSetting: function(inSender, inEvent) {\n        this.render();\n    },\n    undo: function() {\n\n    }\n});\n","//\n\nvar kind = require('enyo/kind'),\n    Signals = require('enyo/Signals');\n\nvar FittableRows = require('layout/FittableRows'),\n    FittableColumns = require('layout/FittableColumns'),\n    Panels = require('layout/Panels');\n\nvar Button = require('onyx/Button'),\n    IconButton = require('onyx/IconButton');\n\nvar plSetupView = require('./setup/setup.js'),\n    plSiteView = require('./site/site.js'),\n    plSystemView = require('./system/system.js'),\n    plInterfaceView = require('./interface/interface.js'),\n    plWiringView = require('./wiring/wiring.js'),\n    plCommissionView = require('./commission/commission.js');\n\nvar plBtnSetting = require('../../components/button.js').Setting,\n    plBtnHelp = require('../../components/button.js').Help,\n    plBtnLocked = require('../../components/button.js').Locked;\n\nvar plPgBreadcrumbs = require('./breadcrumbs/breadcrumbs.js');\n\nvar plScreenState = require('./screenState.js')\n\nmodule.exports = kind({\n    name: 'pl.ProgressView',\n    kind: FittableRows,\n    classes: 'form-progress',\n    handlers: {\n        ontap: 'tapHandler',\n    },\n    components: [\n        {\n            name: 'Header', kind: FittableRows, classes: 'header',\n            components: [\n                {name: 'Chop', classes: 'chop', showing: false},\n                {\n                    kind: FittableColumns, classes: 'header-left',\n                    components: [\n                        {\n                            name: 'PreviousPageButton',\n                            kind: Button,\n                            content: 'PROJECTS',\n                            attributes: {title: 'PROJECTS'},\n                            classes: 'bt bt-project'\n                        },\n                        {kind: IconButton, attributes: {title: 'Undo'}, classes: 'bt bt-reload', ontap: 'undo'},\n                        {\n                            name: 'BtAddTab',\n                            kind: IconButton,\n                            showing: false,\n                            attributes: {title: 'Add'},\n                            classes: 'bt bt-add-tab',\n                            ontap: ''\n                        }\n                    ]\n                },\n                {\n                    kind: FittableColumns, classes: 'header-right',\n                    components: [\n                        {kind: plBtnSetting},\n                        {kind: plBtnHelp},\n                        {kind: plBtnLocked}\n                    ]\n                },\n                {\n                    name: 'Breadcrumb',\n                    kind: plPgBreadcrumbs,\n                    fit: true,\n                    page: 0,\n                    onProgressChanged: 'onProgressChanged'\n                }\n            ]\n        },\n        {\n            name: 'PGMasterPanels',\n            kind: Panels,\n            fit: true,\n            realtimeFit: true,\n            draggable: false,\n            narrowFit: false,\n            onTransitionStart: 'transitionStart',\n            onTransitionFinish: 'transitionComplete',\n            components: [\n                {kind: plSiteView, name: 'SitePanel', index: APP_PROGRESS.PR_SITE},]\n        },\n        {kind: Signals, onChildPageChanged: 'onChildPageChanged'}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n        this.ready = false;\n    },\n    create: function() {\n        this.inherited(arguments);\n    },\n    rendered: kind.inherit(function (sup) {\n    return function () {\n        sup.apply(this, arguments);\n      this.volumehandler = this.volumehandler.bind(this);\n      document.addEventListener('volumechange', this.volumehandler);\n    };\n  }),\n    handleResize: function() {\n        this.inherited(arguments);\n    },\n    resizeComplete: function() {\n        if(typeof this.currentPanel === 'object' && typeof this.currentPanel.resizeComplete === 'function') {\n            this.currentPanel.resizeComplete();\n        }\n    },\n    resizeStopped: function() {\n        if(typeof this.currentPanel === 'object' && typeof this.currentPanel.resizeStopped === 'function') {\n            this.currentPanel.resizeStopped();\n        }\n    },\n    init: function() {\n        if(this.ready !== true) {\n            this.ready = true;\n            this.render();\n            this.$.Breadcrumb.setCurrentPageWithTap(APP_PROGRESS.PR_SITE);\n        }\n    },\n    volumehandler: function(){\n        if (plScreenState.eventState == 1){\n            plScreenState.eventState = 0\n        }\n        else {\n            plScreenState.eventState = 1\n            if (plScreenState.state == 0) {\n                plScreenState.state = 1\n                plScreenState.fromScreen = this.$.Breadcrumb.page\n                this.$.Breadcrumb.setCurrentPageWithTap(APP_PROGRESS.PR_WIRING);\n             }\n            else{\n                plScreenState.state = 0\n                this.$.Breadcrumb.setCurrentPageWithTap(plScreenState.fromScreen);\n                plScreenState.fromScreen = null\n            }\n        }\n    },\n    tapHandler: function(inSender, inEvent) {\n        if(inEvent.originator.name == 'PreviousPageButton') {\n            Signals.send('onPageChanged', {page: APPS.APP_FILEVIEWER});\n        }\n    },\n    onChildPageChanged: function(inSender, inEvent) {\n        this.$.Breadcrumb.setCurrentPageWithTap(inEvent.page);\n    },\n    onProgressChanged: function(inSender, inEvent) {\n        // Set current page\n        this.$.Breadcrumb.setCurrentPage(inEvent.page);\n        this.$.PGMasterPanels.setIndex(inEvent.page);\n\n        // Check show BtAATab\n        if(inEvent.page === APP_PROGRESS.PR_SYSTEM) {\n            this.$.BtAddTab.show();\n        } else {\n            this.$.BtAddTab.hide();\n        }\n        // Check Chop show\n        this.chopStatus(inEvent.page);\n    },\n    // Check Chop show\n    chopStatus: function(page) {\n        if(page === APP_PROGRESS.PR_SETUP || page === APP_PROGRESS.PR_WIRING) {\n            this.$.Chop.show();\n        } else {\n            this.$.Chop.hide();\n        }\n    },\n    transitionStart: function(inSender, inEvent) {\n        // Reset drag info\n        delete PL.dragImage.ready;\n        delete PL.dragImage.info;\n\n        //Signals.send('onDragImage', {\n        //    info: undefined,\n        //    image: undefined,\n        //    showing: false\n        //});\n    },\n    transitionComplete: function(inSender, inEvent) {\n        if(inEvent.originator.name === 'PGMasterPanels') {\n            this.currentPanel = this.$.PGMasterPanels.getActive();\n\n            PL.currentPanel = this.currentPanel;\n            if(typeof this.currentPanel.init === 'function') {\n                this.currentPanel.init();\n            }\n\n            if(this.currentPanel) {\n                // if(this.currentPanel.name !== 'WiringPanel') {\n                //     //this.currentPanel.setProgress(100);\n                // }\n                if(this.currentPanel.name == 'CommissionPanel') {\n                    this.currentPanel.setProgress(100);\n                }\n            }\n\n            // Check Chop show\n            this.chopStatus(inEvent.toIndex);\n        }\n    },\n    // It should just undo the last things done\n    undo: function(inSender) {\n        if(typeof this.currentPanel.undo === 'function') {\n            this.currentPanel.undo();\n        }\n\n        // Delay SiteBuilder (for CSS 3)\n        if(this.$.PGMasterPanels.getIndex() === APP_PROGRESS.PR_SITE) {\n            inSender.disabled = true;\n            setTimeout(function() {\n                inSender.disabled = false;\n            }, 600);\n        }\n    }\n});\n","/**\n For simple applications, you might define all of your views in this file.\n For more complex applications, you might choose to separate these kind definitions\n into multiple files under this folder.\n */\n\nvar kind = require('enyo/kind'),\n    bind = require('enyo/utils').bind,\n    Signals = require('enyo/Signals'),\n    Control = require('enyo/Control'),\n    Image = require('enyo/Image'),\n    FittableRows = require('layout/FittableRows'),\n    Panels = require('layout/Panels'),\n    Popup = require('onyx/Popup'),\n    Spinner = require('onyx/Spinner'),\n    Button = require('onyx/Button'),\n    FittableColumns = require('layout/FittableColumns'),\n    Notification = require('enyo-external/Notification'),\n    Scroller = require('enyo/Scroller');\n\nvar utils = require('../common/services/utils.js');\n\nvar plProgressView = require('./progress/progress.js');\n\nmodule.exports = kind({\n    name: 'pl.MainView',\n    kind: FittableRows,\n    classes: 'app enyo-fit enyo-unselectable',\n    handlers: {\n        ontap: 'tapHandler'\n    },\n    components: [\n        {\n            kind: Panels,\n            name: 'AppPanels',\n            fit: true,\n            realtimeFit: true,\n            draggable: false,\n            narrowFit: false,\n            onTransitionStart: 'transitionStart',\n            onTransitionFinish: 'transitionComplete',\n            classes: 'app-panels',\n            components: [\n                {kind: plProgressView, name: 'ProgressPanel', index: APPS.APP_PROGRESS},\n            ]\n        },\n        // Popup\n        {name: 'Notification', kind: Notification},\n        {\n            name: 'Loading', kind: Popup, classes: 'enyo-loading', centered: true, floating: true, scrim: false, autoDismiss: false, components: [\n                {kind: Spinner, classes: 'onyx-light'}\n            ]\n        },\n        // Add drag item when drag-drop to create entity\n        {name: 'DragItem', kind: Control, classes: 'drag-item', allowHtml: true, showing: false},\n        {name: 'DragImage', kind: Image, classes: 'enyo-popup', showing: false},\n        {\n            kind: Signals,\n            onNotification: 'onNotification',\n            onLoading: 'onLoading',\n            onDragItem: 'onDragItem',\n            onDragImage: 'onDragImage',\n            onPageChanged: 'onPageChanged',\n            onUpdate: 'onUpdate',\n            onMouseDown: 'onMouseDown'\n        }\n        //{\n        //    kind: FittableColumns, noStretch: true, classes: 'onyx-toolbar onyx-toolbar-inline',\n        //    components: [\n        //        {\n        //            kind: Scroller,\n        //            thumb: false,\n        //            fit: true,\n        //            touch: true,\n        //            vertical: 'hidden',\n        //            style: 'margin: 0;',\n        //            components: [\n        //                {\n        //                    classes: 'onyx-toolbar-inline', style: 'white-space: nowrap;',\n        //                    components: [\n        //                        {kind: Button, content: 'Previous', ontap: 'prevPanel'},\n        //                        {kind: Button, content: 'Next', ontap: 'nextPanel'}\n        //                    ]\n        //                }\n        //            ]\n        //        }\n        //    ]\n        //}\n    ],\n    constructor: function() {\n        this.inherited(arguments);\n    },\n    create: function() {\n        this.inherited(arguments);\n        PL.dragImage = this.$.DragImage;\n    },\n    rendered: function() {\n        this.inherited(arguments);\n        this.dimension();\n        this.$.AppPanels.setIndex(APPS.APP_SPLASH);\n        this.loadingShowing(false);\n    },\n    handleResize: function() {\n        this.inherited(arguments);\n        this.dimension();\n    },\n    resizeComplete: function() {\n        var currentPanel = this.$.AppPanels.getActive();\n        if(typeof currentPanel.resizeComplete === 'function') {\n            currentPanel.resizeComplete();\n        }\n        this.loadingShowing(false);\n    },\n    resizeStopped: function() {\n        var currentPanel = this.$.AppPanels.getActive();\n        if(typeof currentPanel.resizeStopped === 'function') {\n            currentPanel.resizeStopped();\n        }\n    },\n    // Set global variables\n    dimension: function() {\n        PL.app = this;\n        SETTINGS.height = utils.getCSSProperty(this.$.AppPanels, 'offsetHeight', false);\n        SETTINGS.width = utils.getCSSProperty(this.$.AppPanels, 'offsetWidth', false);\n        SETTINGS.header = 40;\n        SETTINGS.footer = 40;\n    },\n    loadingShowing: function(showing) {\n        // Hash code: Turn off lazy loading\n//        showing = false;\n//        if(showing) {\n//            this.$.Loading.show();\n//        } else {\n//            this.$.Loading.hide();\n//        }\n    },\n    tapHandler: function(inSender, inEvent) {\n        Signals.send('onCheckInput', {sender: inEvent.originator});\n    },\n    transitionStart: function(inSender, inEvent) {\n        var panelName = inEvent.originator.name;\n        if(\n            inEvent.fromIndex === inEvent.toIndex ||\n            ['ListItemPanel'].indexOf(panelName) > -1\n        ) {\n            return;\n        }\n\n        this.loadingShowing(true);\n\n        if(panelName === 'AppPanels' && inEvent.toIndex === APPS.APP_SPLASH) {\n//            this.$.Loading.centered = false;\n            //var wL = utils.getCSSProperty(this.$.Loading, 'offsetWidth', false);\n            var wB = utils.getCSSProperty(this, 'offsetWidth', false);\n            var percent = (73 / wB) * 50;\n//            this.$.Loading.applyStyle('left', (50 - percent) + '%');\n//            this.$.Loading.applyStyle('top', '55%');\n        } else {\n//            this.$.Loading.centered = true;\n        }\n    },\n    transitionComplete: function(inSender, inEvent) {\n        if(inEvent.originator.name === 'AppPanels') {\n            var currentPanel = this.$.AppPanels.getActive();\n            PL.currentPanel = currentPanel;\n            if(typeof currentPanel.init === 'function') {\n                currentPanel.init();\n            }\n        }\n        this.loadingShowing(false);\n    },\n    // Notification\n    warning: function(message) {\n        this.$.Notification.sendNotification({\n            title: '',\n            message: message,\n            icon: 'assets/images/temps/icons/warning.png',\n            theme: 'notification.Bezel',\n            stay: undefined,\n            duration: 2\n        }, bind(this, function(notif) {\n            this.$[notif.originator.name].removeAllNotifications(true);\n        }));\n    },\n    onNotification: function(inSender, inEvent) {\n        if(inEvent.method === 'message') {\n            this.warning(inEvent.message);\n        } else if(inEvent.method === 'close') {\n            this.$.Notification.removeAllNotifications(false);\n        }\n    },\n    onLoading: function(inSender, inEvent) {\n        if(inEvent.method === 'show') {\n            this.loadingShowing(true);\n        } else if(inEvent.method === 'hide') {\n            this.loadingShowing(false);\n        }\n    },\n    onPageChanged: function(inSender, inEvent) {\n        this.$.AppPanels.setIndex(inEvent.page);\n        if(!!inEvent.childPage) {\n            Signals.send('onChildPageChanged', {page: inEvent.childPage});\n        }\n    },\n    onDragItem: function(inSender, inEvent) {\n        if(inEvent.showing === true) {\n            this.$.DragItem.setShowing(true);\n        }\n        if(inEvent.showing === false) {\n            this.$.DragItem.setShowing(false);\n            var classes = this.$.DragItem.getAttribute('class').split(' ');\n            for(var i = 0; i < classes.length; i++) {\n                if(classes[i] != 'drag-item') this.$.DragItem.removeClass(classes[i]);\n            }\n            this.$.DragItem.setStyle('');\n            this.$.DragItem.setContent('');\n        }\n        if(inEvent.content) {\n            this.$.DragItem.setContent(inEvent.content);\n        }\n        if(inEvent.classes) {\n            if(typeof inEvent.classes === 'object') {\n                for(var i = 0; i < inEvent.classes.length; i++) {\n                    if(!this.$.DragItem.hasClass(inEvent.classes[i])) {\n                        this.$.DragItem.addClass(inEvent.classes[i]);\n                    }\n                }\n            } else {\n                if(!this.$.DragItem.hasClass(inEvent.classes)) {\n                    this.$.DragItem.addClass(inEvent.classes);\n                }\n            }\n        }\n        if(inEvent.pos) {\n            this.$.DragItem.addStyles('top:' + inEvent.pos.y + 'px;left:' + inEvent.pos.x + 'px');\n        }\n        if(inEvent.styles && typeof inEvent.styles === 'object') {\n            for(var i = 0; i < inEvent.styles.length; i++) {\n                var styles = inEvent.styles[i];\n                for(var key in styles) {\n                    this.$.DragItem.applyStyle(key, styles[key]);\n                }\n            }\n        }\n    },\n    onDragImage: function(inSender, inEvent) {\n        if(!!inEvent.info) {\n            this.$.DragImage.info = inEvent.info;\n        }\n        if(!!inEvent.image) {\n            this.$.DragImage.setSrc(inEvent.image);\n        }\n        if(!!inEvent.styles) {\n            this.$.DragImage.addStyles(inEvent.styles);\n        }\n        if(!!inEvent.showing) {\n            this.$.DragImage.show();\n        } else {\n            this.$.DragImage.hide();\n        }\n    },\n    onUpdate: function(inSender, inEvent) {\n        console.log('test');\n    },\n    onMouseDown: function() {\n        this.$.Notification.removeAllNotifications(false);\n    }\n    //prevPanel: function() {\n    //    this.$.AppPanels.previous();\n    //},\n    //nextPanel: function() {\n    //    this.$.AppPanels.next();\n    //}\n});\n","/*** Application init and global event ***/\n\nvar kind = require('enyo/kind'),\n    Application = require('enyo/Application'),\n    Signals = require('enyo/Signals'),\n    plMainView = require('./views/MainView.js'),\n    StaticDataModel = require('./data/data.js');\n\nvar app = module.exports = kind({\n    name: 'pl.Application',\n    kind: Application,\n    components: [{kind: StaticDataModel, name: \"data\"}],\n    view: plMainView,\n    constructor: function() {\n        this.inherited(arguments);\n        if(DEBUG) {\n            //PL.baseUrl = '';\n            this.baseUrl = PL.baseUrl;\n        }\n    }\n});\n\n//*** EVENT RESIZE\n//var resizeTimer;\n//window.onresize = function() {\n//    console.log(\"mainView %O\", app);\n//\n//    if(typeof app.$.mainView.resizeComplete === 'function') {\n//        app.$.mainView.resizeComplete();\n//    }\n//\n//    clearTimeout(resizeTimer);\n//    resizeTimer = setTimeout(function() {\n//        // Run code here, resizing has 'stopped'\n//        if(typeof app.$.mainView.resizeStopped === 'function') {\n//            app.$.mainView.resizeStopped();\n//        }\n//    }, 250);\n//};\n\nwindow.ondragstart = function() {\n    return false;\n};\n\n//*** KEY EVENT\nfunction keydown(e) {\n    PL.keyCode = e.keyCode;\n\n    switch(e.keyCode) {\n        case 13: // enter\n        {\n            break;\n        }\n        case 16: // shift\n        {\n            if(typeof PL.currentPanel.zoomIn === 'function') {\n                PL.currentPanel.zoomIn();\n            }\n            break;\n        }\n        case 17: // ctrl\n        {\n            break;\n        }\n        case 27: //escape\n        {\n            if(PL.currentPanel.index === APP_PROGRESS.PR_SYSTEM) {\n                systemGraphic.g.deSelectedItems();\n                systemGraphic.panel.activeSelector();\n            }\n            break;\n        }\n        case 8: // backspace\n        case 46: // delete\n        {\n            if(typeof PL.currentPanel.deleteSelectedItems === 'function') {\n                PL.currentPanel.deleteSelectedItems();\n            }\n            break;\n        }\n    }\n\n    Signals.send('onKeyDown', {keyCode: e.keyCode});\n}\n\nfunction keyup(e) {\n    PL.keyCode = undefined;\n\n    switch(e.keyCode) {\n        case 16: // shift\n        {\n            if(typeof PL.currentPanel.zoomOut === 'function') {\n                PL.currentPanel.zoomOut();\n            }\n            break;\n        }\n        case 17: // ctrl\n            break;\n    }\n\n    Signals.send('onKeyUp', {keyCode: e.keyCode});\n}\n\n//*** MOUSE EVENT\nfunction mousedown(e) {\n    Signals.send('onMouseDown', e);\n}\n\nfunction mouseup(e) {\n    Signals.send('onMouseUp', e);\n}\n\n//*** ALL EVENT\nvar dispatcher = require('enyo/dispatcher');\ndispatcher.listen(window, 'mousedown', mousedown);\ndispatcher.listen(window, 'touchstart', mousedown);\ndispatcher.listen(window, 'mouseup', mouseup);\ndispatcher.listen(window, 'touchend', mouseup);\ndispatcher.listen(window, 'keydown', keydown);\ndispatcher.listen(window, 'keyup', keyup);\n\n//var KEYBOARD = true;\n//$(window).bind({\n//    'touchstart mousedown touchmove mousemove touchend mouseup': function(e) {\n//        //e.preventDefault();\n//        if(e.type === 'mousedown' || e.type === 'touchstart') mousedown(e);\n//        if(e.type === 'mouseup' || e.type === 'touchend') mouseup(e);\n//    },\n//    'keydown keypress keyup': function(e) {\n//        if(!KEYBOARD) e.preventDefault();\n//        if(e.type === 'keydown') keydown(e);\n//        if(e.type === 'keyup') keyup(e);\n//    }\n//\n//});\n","/**\n\tInstantiate your enyo/Application kind in this file.  Note, application\n\trendering should be deferred until the DOM is ready by wrapping it in a\n\tcall to ready().\n*/\n\nvar ready = require('enyo/ready'),\n    App = require('./src/app.js');\n\nready(function () {\n    google.charts.load('current', {\n        'packages': ['corechart', 'gantt'],\n        'callback': function () {\n            new App().renderInto(document.body);\n        }\n    });\n});\n"]}